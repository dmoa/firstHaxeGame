// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl_text__TextFormatAlign_TextFormatAlign_Impl_
#include <openfl/text/_TextFormatAlign/TextFormatAlign_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_52c40939c4ee2936_54_fromString,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_","fromString",0xac8d25d1,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_.fromString","openfl/text/TextFormatAlign.hx",54,0xaa546dc0)
HX_LOCAL_STACK_FRAME(_hx_pos_52c40939c4ee2936_68_toString,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_","toString",0xf3d6bf22,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_.toString","openfl/text/TextFormatAlign.hx",68,0xaa546dc0)
HX_LOCAL_STACK_FRAME(_hx_pos_52c40939c4ee2936_16_boot,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_","boot",0x91217fa8,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_.boot","openfl/text/TextFormatAlign.hx",16,0xaa546dc0)
HX_LOCAL_STACK_FRAME(_hx_pos_52c40939c4ee2936_24_boot,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_","boot",0x91217fa8,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_.boot","openfl/text/TextFormatAlign.hx",24,0xaa546dc0)
HX_LOCAL_STACK_FRAME(_hx_pos_52c40939c4ee2936_30_boot,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_","boot",0x91217fa8,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_.boot","openfl/text/TextFormatAlign.hx",30,0xaa546dc0)
HX_LOCAL_STACK_FRAME(_hx_pos_52c40939c4ee2936_36_boot,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_","boot",0x91217fa8,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_.boot","openfl/text/TextFormatAlign.hx",36,0xaa546dc0)
HX_LOCAL_STACK_FRAME(_hx_pos_52c40939c4ee2936_42_boot,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_","boot",0x91217fa8,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_.boot","openfl/text/TextFormatAlign.hx",42,0xaa546dc0)
HX_LOCAL_STACK_FRAME(_hx_pos_52c40939c4ee2936_50_boot,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_","boot",0x91217fa8,"openfl.text._TextFormatAlign.TextFormatAlign_Impl_.boot","openfl/text/TextFormatAlign.hx",50,0xaa546dc0)
namespace openfl{
namespace text{
namespace _TextFormatAlign{

void TextFormatAlign_Impl__obj::__construct() { }

Dynamic TextFormatAlign_Impl__obj::__CreateEmpty() { return new TextFormatAlign_Impl__obj; }

void *TextFormatAlign_Impl__obj::_hx_vtable = 0;

Dynamic TextFormatAlign_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextFormatAlign_Impl__obj > _hx_result = new TextFormatAlign_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextFormatAlign_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x744b861e;
}

 ::Dynamic TextFormatAlign_Impl__obj::CENTER;

 ::Dynamic TextFormatAlign_Impl__obj::END;

 ::Dynamic TextFormatAlign_Impl__obj::JUSTIFY;

 ::Dynamic TextFormatAlign_Impl__obj::LEFT;

 ::Dynamic TextFormatAlign_Impl__obj::RIGHT;

 ::Dynamic TextFormatAlign_Impl__obj::START;

 ::Dynamic TextFormatAlign_Impl__obj::fromString(::String value){
            	HX_STACKFRAME(&_hx_pos_52c40939c4ee2936_54_fromString)
HXDLIN(  54)		::String _hx_switch_0 = value;
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE(  56)			return (int)0;
HXDLIN(  56)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("end",db,03,4d,00)) ){
HXLINE(  57)			return (int)1;
HXDLIN(  57)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("justify",50,df,b5,83)) ){
HXLINE(  58)			return (int)2;
HXDLIN(  58)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(  59)			return (int)3;
HXDLIN(  59)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(  60)			return (int)4;
HXDLIN(  60)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("start",62,74,0b,84)) ){
HXLINE(  61)			return (int)5;
HXDLIN(  61)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  62)			return null();
            		}
            		_hx_goto_0:;
HXLINE(  54)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextFormatAlign_Impl__obj,fromString,return )

::String TextFormatAlign_Impl__obj::toString(int value){
            	HX_STACKFRAME(&_hx_pos_52c40939c4ee2936_68_toString)
HXDLIN(  68)		switch((int)(value)){
            			case (int)0: {
HXLINE(  70)				return HX_("center",d5,25,db,05);
            			}
            			break;
            			case (int)1: {
HXLINE(  71)				return HX_("end",db,03,4d,00);
            			}
            			break;
            			case (int)2: {
HXLINE(  72)				return HX_("justify",50,df,b5,83);
            			}
            			break;
            			case (int)3: {
HXLINE(  73)				return HX_("left",07,08,b0,47);
            			}
            			break;
            			case (int)4: {
HXLINE(  74)				return HX_("right",dc,0b,64,e9);
            			}
            			break;
            			case (int)5: {
HXLINE(  75)				return HX_("start",62,74,0b,84);
            			}
            			break;
            			default:{
HXLINE(  76)				return null();
            			}
            		}
HXLINE(  68)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextFormatAlign_Impl__obj,toString,return )


TextFormatAlign_Impl__obj::TextFormatAlign_Impl__obj()
{
}

bool TextFormatAlign_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TextFormatAlign_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo TextFormatAlign_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &TextFormatAlign_Impl__obj::CENTER,HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8")},
	{hx::fsObject /*Dynamic*/ ,(void *) &TextFormatAlign_Impl__obj::END,HX_HCSTRING("END","\xbb","\x9f","\x34","\x00")},
	{hx::fsObject /*Dynamic*/ ,(void *) &TextFormatAlign_Impl__obj::JUSTIFY,HX_HCSTRING("JUSTIFY","\x30","\xb3","\x89","\x03")},
	{hx::fsObject /*Dynamic*/ ,(void *) &TextFormatAlign_Impl__obj::LEFT,HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32")},
	{hx::fsObject /*Dynamic*/ ,(void *) &TextFormatAlign_Impl__obj::RIGHT,HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67")},
	{hx::fsObject /*Dynamic*/ ,(void *) &TextFormatAlign_Impl__obj::START,HX_HCSTRING("START","\x42","\xac","\xf9","\x01")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void TextFormatAlign_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextFormatAlign_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextFormatAlign_Impl__obj::CENTER,"CENTER");
	HX_MARK_MEMBER_NAME(TextFormatAlign_Impl__obj::END,"END");
	HX_MARK_MEMBER_NAME(TextFormatAlign_Impl__obj::JUSTIFY,"JUSTIFY");
	HX_MARK_MEMBER_NAME(TextFormatAlign_Impl__obj::LEFT,"LEFT");
	HX_MARK_MEMBER_NAME(TextFormatAlign_Impl__obj::RIGHT,"RIGHT");
	HX_MARK_MEMBER_NAME(TextFormatAlign_Impl__obj::START,"START");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextFormatAlign_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextFormatAlign_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextFormatAlign_Impl__obj::CENTER,"CENTER");
	HX_VISIT_MEMBER_NAME(TextFormatAlign_Impl__obj::END,"END");
	HX_VISIT_MEMBER_NAME(TextFormatAlign_Impl__obj::JUSTIFY,"JUSTIFY");
	HX_VISIT_MEMBER_NAME(TextFormatAlign_Impl__obj::LEFT,"LEFT");
	HX_VISIT_MEMBER_NAME(TextFormatAlign_Impl__obj::RIGHT,"RIGHT");
	HX_VISIT_MEMBER_NAME(TextFormatAlign_Impl__obj::START,"START");
};

#endif

hx::Class TextFormatAlign_Impl__obj::__mClass;

static ::String TextFormatAlign_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("CENTER","\xd5","\xd1","\x5d","\xb8"),
	HX_HCSTRING("END","\xbb","\x9f","\x34","\x00"),
	HX_HCSTRING("JUSTIFY","\x30","\xb3","\x89","\x03"),
	HX_HCSTRING("LEFT","\x07","\xd0","\x70","\x32"),
	HX_HCSTRING("RIGHT","\xbc","\x43","\x52","\x67"),
	HX_HCSTRING("START","\x42","\xac","\xf9","\x01"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void TextFormatAlign_Impl__obj::__register()
{
	hx::Object *dummy = new TextFormatAlign_Impl__obj;
	TextFormatAlign_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text._TextFormatAlign.TextFormatAlign_Impl_","\xb8","\x18","\x3c","\xd5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextFormatAlign_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextFormatAlign_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextFormatAlign_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< TextFormatAlign_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextFormatAlign_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextFormatAlign_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextFormatAlign_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextFormatAlign_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_52c40939c4ee2936_16_boot)
HXDLIN(  16)		CENTER = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_52c40939c4ee2936_24_boot)
HXDLIN(  24)		END = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_52c40939c4ee2936_30_boot)
HXDLIN(  30)		JUSTIFY = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_52c40939c4ee2936_36_boot)
HXDLIN(  36)		LEFT = (int)3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_52c40939c4ee2936_42_boot)
HXDLIN(  42)		RIGHT = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_52c40939c4ee2936_50_boot)
HXDLIN(  50)		START = (int)5;
            	}
}

} // end namespace openfl
} // end namespace text
} // end namespace _TextFormatAlign
