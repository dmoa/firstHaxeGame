// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeOpenGLRenderContext
#include <lime/_internal/backend/native/NativeOpenGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_RenderContext
#include <lime/graphics/RenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics__WebGLRenderContext_WebGLRenderContext_Impl_
#include <lime/graphics/_WebGLRenderContext/WebGLRenderContext_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_ShaderBuffer
#include <openfl/_internal/renderer/ShaderBuffer.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Int
#include <openfl/display/ShaderParameter_Int.h>
#endif
#ifndef INCLUDED_openfl_display__ShaderData_ShaderData_Impl_
#include <openfl/display/_ShaderData/ShaderData_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4b006e5218f2daf8_253_new,"openfl.display.Shader","new",0x88fbb381,"openfl.display.Shader.new","openfl/display/Shader.hx",253,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_263___clearUseArray,"openfl.display.Shader","__clearUseArray",0xbc4a9c00,"openfl.display.Shader.__clearUseArray","openfl/display/Shader.hx",263,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_311___createGLShader,"openfl.display.Shader","__createGLShader",0xd8186585,"openfl.display.Shader.__createGLShader","openfl/display/Shader.hx",311,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_330___createGLProgram,"openfl.display.Shader","__createGLProgram",0xd1b33824,"openfl.display.Shader.__createGLProgram","openfl/display/Shader.hx",330,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_364___disable,"openfl.display.Shader","__disable",0x171f2ca9,"openfl.display.Shader.__disable","openfl/display/Shader.hx",364,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_371___disableGL,"openfl.display.Shader","__disableGL",0x7ec2a70e,"openfl.display.Shader.__disableGL","openfl/display/Shader.hx",371,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_408___enable,"openfl.display.Shader","__enable",0x8f5f3ee2,"openfl.display.Shader.__enable","openfl/display/Shader.hx",408,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_418___enableGL,"openfl.display.Shader","__enableGL",0x94d67987,"openfl.display.Shader.__enableGL","openfl/display/Shader.hx",418,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_438___init,"openfl.display.Shader","__init",0x2faba5af,"openfl.display.Shader.__init","openfl/display/Shader.hx",438,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_451___initGL,"openfl.display.Shader","__initGL",0x2e23ed94,"openfl.display.Shader.__initGL","openfl/display/Shader.hx",451,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_557___processGLData,"openfl.display.Shader","__processGLData",0x90b8a01f,"openfl.display.Shader.__processGLData","openfl/display/Shader.hx",557,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_718___update,"openfl.display.Shader","__update",0x1ddd1668,"openfl.display.Shader.__update","openfl/display/Shader.hx",718,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_726___updateFromBuffer,"openfl.display.Shader","__updateFromBuffer",0x7639ee92,"openfl.display.Shader.__updateFromBuffer","openfl/display/Shader.hx",726,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_733___updateGL,"openfl.display.Shader","__updateGL",0x201dbe8d,"openfl.display.Shader.__updateGL","openfl/display/Shader.hx",733,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_759___updateGLFromBuffer,"openfl.display.Shader","__updateGLFromBuffer",0x5f0216f7,"openfl.display.Shader.__updateGLFromBuffer","openfl/display/Shader.hx",759,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_894_get_data,"openfl.display.Shader","get_data",0xb0c636f2,"openfl.display.Shader.get_data","openfl/display/Shader.hx",894,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_905_set_data,"openfl.display.Shader","set_data",0x5f239066,"openfl.display.Shader.set_data","openfl/display/Shader.hx",905,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_910_get_glFragmentSource,"openfl.display.Shader","get_glFragmentSource",0x5d5fb298,"openfl.display.Shader.get_glFragmentSource","openfl/display/Shader.hx",910,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_914_set_glFragmentSource,"openfl.display.Shader","set_glFragmentSource",0x2a176a0c,"openfl.display.Shader.set_glFragmentSource","openfl/display/Shader.hx",914,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_925_get_glVertexSource,"openfl.display.Shader","get_glVertexSource",0xa3c917ec,"openfl.display.Shader.get_glVertexSource","openfl/display/Shader.hx",925,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_929_set_glVertexSource,"openfl.display.Shader","set_glVertexSource",0x80784a60,"openfl.display.Shader.set_glVertexSource","openfl/display/Shader.hx",929,0xae8f5dcd)
HX_LOCAL_STACK_FRAME(_hx_pos_4b006e5218f2daf8_124_boot,"openfl.display.Shader","boot",0x4b5a5df1,"openfl.display.Shader.boot","openfl/display/Shader.hx",124,0xae8f5dcd)
namespace openfl{
namespace display{

void Shader_obj::__construct( ::openfl::utils::ByteArrayData code){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_253_new)
HXLINE( 254)		this->byteCode = code;
HXLINE( 255)		this->precisionHint = (int)1;
HXLINE( 257)		this->_hx___glSourceDirty = true;
HXLINE( 258)		this->_hx___numPasses = (int)1;
HXLINE( 259)		this->_hx___data = ::openfl::display::_ShaderData::ShaderData_Impl__obj::_new(code);
            	}

Dynamic Shader_obj::__CreateEmpty() { return new Shader_obj; }

void *Shader_obj::_hx_vtable = 0;

Dynamic Shader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Shader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x676ab1f7;
}

void Shader_obj::_hx___clearUseArray(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_263___clearUseArray)
HXLINE( 264)		{
HXLINE( 264)			int _g = (int)0;
HXDLIN( 264)			::Array< ::Dynamic> _g1 = this->_hx___paramBool;
HXDLIN( 264)			while((_g < _g1->length)){
HXLINE( 264)				 ::openfl::display::ShaderParameter_Bool parameter = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 264)				_g = (_g + (int)1);
HXLINE( 266)				parameter->_hx___useArray = false;
            			}
            		}
HXLINE( 269)		{
HXLINE( 269)			int _g2 = (int)0;
HXDLIN( 269)			::Array< ::Dynamic> _g11 = this->_hx___paramFloat;
HXDLIN( 269)			while((_g2 < _g11->length)){
HXLINE( 269)				 ::openfl::display::ShaderParameter_Float parameter1 = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 269)				_g2 = (_g2 + (int)1);
HXLINE( 271)				parameter1->_hx___useArray = false;
            			}
            		}
HXLINE( 274)		{
HXLINE( 274)			int _g3 = (int)0;
HXDLIN( 274)			::Array< ::Dynamic> _g12 = this->_hx___paramInt;
HXDLIN( 274)			while((_g3 < _g12->length)){
HXLINE( 274)				 ::openfl::display::ShaderParameter_Int parameter2 = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 274)				_g3 = (_g3 + (int)1);
HXLINE( 276)				parameter2->_hx___useArray = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___clearUseArray,(void))

 ::lime::graphics::opengl::GLObject Shader_obj::_hx___createGLShader(::String source,int type){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_311___createGLShader)
HXLINE( 312)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 314)		 ::lime::graphics::opengl::GLObject shader = gl->createShader(type);
HXLINE( 315)		gl->shaderSource(shader,source);
HXLINE( 316)		gl->compileShader(shader);
HXLINE( 318)		if (hx::IsEq( gl->getShaderParameter(shader,gl->COMPILE_STATUS),(int)0 )) {
HXLINE( 320)			::String message;
HXDLIN( 320)			if ((type == gl->VERTEX_SHADER)) {
HXLINE( 320)				message = HX_("Error compiling vertex shader",39,c9,c1,b2);
            			}
            			else {
HXLINE( 320)				message = HX_("Error compiling fragment shader",4d,d0,be,e3);
            			}
HXLINE( 321)			message = (message + (HX_("\n",0a,00,00,00) + gl->getShaderInfoLog(shader)));
HXLINE( 322)			message = (message + (HX_("\n",0a,00,00,00) + source));
HXLINE( 323)			::lime::utils::Log_obj::error(message,hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),323,HX_("openfl.display.Shader",0f,df,61,a7),HX_("__createGLShader",46,69,da,33)));
            		}
HXLINE( 326)		return shader;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,_hx___createGLShader,return )

 ::lime::graphics::opengl::GLObject Shader_obj::_hx___createGLProgram(::String vertexSource,::String fragmentSource){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_330___createGLProgram)
HXLINE( 331)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 333)		 ::lime::graphics::opengl::GLObject vertexShader = this->_hx___createGLShader(vertexSource,gl->VERTEX_SHADER);
HXLINE( 334)		 ::lime::graphics::opengl::GLObject fragmentShader = this->_hx___createGLShader(fragmentSource,gl->FRAGMENT_SHADER);
HXLINE( 336)		 ::lime::graphics::opengl::GLObject program = gl->createProgram();
HXLINE( 339)		{
HXLINE( 339)			int _g = (int)0;
HXDLIN( 339)			::Array< ::Dynamic> _g1 = this->_hx___paramFloat;
HXDLIN( 339)			while((_g < _g1->length)){
HXLINE( 339)				 ::openfl::display::ShaderParameter_Float param = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 339)				_g = (_g + (int)1);
HXLINE( 341)				bool _hx_tmp;
HXDLIN( 341)				if ((param->name.indexOf(HX_("Position",c9,5c,ac,a4),null()) > (int)-1)) {
HXLINE( 341)					_hx_tmp = ::StringTools_obj::startsWith(param->name,HX_("openfl_",cf,ba,42,40));
            				}
            				else {
HXLINE( 341)					_hx_tmp = false;
            				}
HXDLIN( 341)				if (_hx_tmp) {
HXLINE( 343)					gl->bindAttribLocation(program,(int)0,param->name);
HXLINE( 344)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
HXLINE( 348)		gl->attachShader(program,vertexShader);
HXLINE( 349)		gl->attachShader(program,fragmentShader);
HXLINE( 350)		gl->linkProgram(program);
HXLINE( 352)		if (hx::IsEq( gl->getProgramParameter(program,gl->LINK_STATUS),(int)0 )) {
HXLINE( 354)			::String message = HX_("Unable to initialize the shader program",f0,86,8b,39);
HXLINE( 355)			message = (message + (HX_("\n",0a,00,00,00) + gl->getProgramInfoLog(program)));
HXLINE( 356)			::lime::utils::Log_obj::error(message,hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),356,HX_("openfl.display.Shader",0f,df,61,a7),HX_("__createGLProgram",43,7d,b4,bf)));
            		}
HXLINE( 359)		return program;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,_hx___createGLProgram,return )

void Shader_obj::_hx___disable(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_364___disable)
HXDLIN( 364)		if (hx::IsNotNull( this->program )) {
HXLINE( 366)			this->_hx___disableGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___disable,(void))

void Shader_obj::_hx___disableGL(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_371___disableGL)
HXLINE( 372)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 374)		int textureCount = (int)0;
HXLINE( 376)		{
HXLINE( 376)			int _g = (int)0;
HXDLIN( 376)			::Array< ::Dynamic> _g1 = this->_hx___inputBitmapData;
HXDLIN( 376)			while((_g < _g1->length)){
HXLINE( 376)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 376)				_g = (_g + (int)1);
HXLINE( 378)				input->_hx___disableGL(this->_hx___context,textureCount);
HXLINE( 379)				textureCount = (textureCount + (int)1);
            			}
            		}
HXLINE( 382)		{
HXLINE( 382)			int _g2 = (int)0;
HXDLIN( 382)			::Array< ::Dynamic> _g11 = this->_hx___paramBool;
HXDLIN( 382)			while((_g2 < _g11->length)){
HXLINE( 382)				 ::openfl::display::ShaderParameter_Bool parameter = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 382)				_g2 = (_g2 + (int)1);
HXLINE( 384)				parameter->_hx___disableGL(this->_hx___context);
            			}
            		}
HXLINE( 387)		{
HXLINE( 387)			int _g3 = (int)0;
HXDLIN( 387)			::Array< ::Dynamic> _g12 = this->_hx___paramFloat;
HXDLIN( 387)			while((_g3 < _g12->length)){
HXLINE( 387)				 ::openfl::display::ShaderParameter_Float parameter1 = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 387)				_g3 = (_g3 + (int)1);
HXLINE( 389)				parameter1->_hx___disableGL(this->_hx___context);
            			}
            		}
HXLINE( 392)		{
HXLINE( 392)			int _g4 = (int)0;
HXDLIN( 392)			::Array< ::Dynamic> _g13 = this->_hx___paramInt;
HXDLIN( 392)			while((_g4 < _g13->length)){
HXLINE( 392)				 ::openfl::display::ShaderParameter_Int parameter2 = _g13->__get(_g4).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 392)				_g4 = (_g4 + (int)1);
HXLINE( 394)				parameter2->_hx___disableGL(this->_hx___context);
            			}
            		}
HXLINE( 397)		this->_hx___context->_hx___bindGLArrayBuffer(null());
HXLINE( 400)		if ((this->_hx___context->_hx___context->type == HX_("opengl",6f,64,94,21))) {
HXLINE( 402)			gl->disable(gl->TEXTURE_2D);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___disableGL,(void))

void Shader_obj::_hx___enable(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_408___enable)
HXLINE( 409)		this->_hx___init();
HXLINE( 411)		if (hx::IsNotNull( this->program )) {
HXLINE( 413)			this->_hx___enableGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___enable,(void))

void Shader_obj::_hx___enableGL(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_418___enableGL)
HXLINE( 419)		int textureCount = (int)0;
HXLINE( 421)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 423)		{
HXLINE( 423)			int _g = (int)0;
HXDLIN( 423)			::Array< ::Dynamic> _g1 = this->_hx___inputBitmapData;
HXDLIN( 423)			while((_g < _g1->length)){
HXLINE( 423)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 423)				_g = (_g + (int)1);
HXLINE( 425)				gl->uniform1i(input->index,textureCount);
HXLINE( 426)				textureCount = (textureCount + (int)1);
            			}
            		}
HXLINE( 430)		bool _hx_tmp;
HXDLIN( 430)		if ((this->_hx___context->_hx___context->type == HX_("opengl",6f,64,94,21))) {
HXLINE( 430)			_hx_tmp = (textureCount > (int)0);
            		}
            		else {
HXLINE( 430)			_hx_tmp = false;
            		}
HXDLIN( 430)		if (_hx_tmp) {
HXLINE( 432)			gl->enable(gl->TEXTURE_2D);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___enableGL,(void))

void Shader_obj::_hx___init(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_438___init)
HXLINE( 439)		if (hx::IsNull( this->_hx___data )) {
HXLINE( 441)			this->_hx___data = ::openfl::display::_ShaderData::ShaderData_Impl__obj::_new(null());
            		}
HXLINE( 444)		bool _hx_tmp;
HXDLIN( 444)		bool _hx_tmp1;
HXDLIN( 444)		if (hx::IsNotNull( this->_hx___glFragmentSource )) {
HXLINE( 444)			_hx_tmp1 = hx::IsNotNull( this->_hx___glVertexSource );
            		}
            		else {
HXLINE( 444)			_hx_tmp1 = false;
            		}
HXDLIN( 444)		if (_hx_tmp1) {
HXLINE( 444)			if (hx::IsNotNull( this->program )) {
HXLINE( 444)				_hx_tmp = this->_hx___glSourceDirty;
            			}
            			else {
HXLINE( 444)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 444)			_hx_tmp = false;
            		}
HXDLIN( 444)		if (_hx_tmp) {
HXLINE( 446)			this->_hx___initGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___init,(void))

void Shader_obj::_hx___initGL(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_451___initGL)
HXLINE( 452)		bool _hx_tmp;
HXDLIN( 452)		if (!(this->_hx___glSourceDirty)) {
HXLINE( 452)			_hx_tmp = hx::IsNull( this->_hx___paramBool );
            		}
            		else {
HXLINE( 452)			_hx_tmp = true;
            		}
HXDLIN( 452)		if (_hx_tmp) {
HXLINE( 454)			this->_hx___glSourceDirty = false;
HXLINE( 455)			this->program = null();
HXLINE( 457)			this->_hx___inputBitmapData = ::Array_obj< ::Dynamic>::__new();
HXLINE( 458)			this->_hx___paramBool = ::Array_obj< ::Dynamic>::__new();
HXLINE( 459)			this->_hx___paramFloat = ::Array_obj< ::Dynamic>::__new();
HXLINE( 460)			this->_hx___paramInt = ::Array_obj< ::Dynamic>::__new();
HXLINE( 462)			this->_hx___processGLData(this->get_glVertexSource(),HX_("attribute",1c,70,f0,fa));
HXLINE( 463)			this->_hx___processGLData(this->get_glVertexSource(),HX_("uniform",34,41,64,b5));
HXLINE( 464)			this->_hx___processGLData(this->get_glFragmentSource(),HX_("uniform",34,41,64,b5));
            		}
HXLINE( 467)		bool _hx_tmp1;
HXDLIN( 467)		if (hx::IsNotNull( this->_hx___context )) {
HXLINE( 467)			_hx_tmp1 = hx::IsNull( this->program );
            		}
            		else {
HXLINE( 467)			_hx_tmp1 = false;
            		}
HXDLIN( 467)		if (_hx_tmp1) {
HXLINE( 469)			 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 472)			::String prefix;
HXDLIN( 472)			if (hx::IsEq( this->precisionHint,(int)1 )) {
HXLINE( 472)				prefix = HX_("#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\t\tprecision highp float;\n\t\t\t\t#else\n\t\t\t\tprecision mediump float;\n\t\t\t\t#endif",4b,73,c6,16);
            			}
            			else {
HXLINE( 472)				prefix = HX_("precision lowp float;",81,5f,ad,9a);
            			}
HXLINE( 471)			::String prefix1 = ((HX_("#ifdef GL_ES\n\t\t\t\t",7d,b3,ff,2f) + prefix) + HX_("\n\t\t\t\t#endif\n\t\t\t\t",ab,2a,3b,b6));
HXLINE( 481)			::String vertex = (prefix1 + this->get_glVertexSource());
HXLINE( 482)			::String fragment = (prefix1 + this->get_glFragmentSource());
HXLINE( 484)			::String id = (vertex + fragment);
HXLINE( 486)			if (this->_hx___context->_hx___programs->exists(id)) {
HXLINE( 488)				this->program = this->_hx___context->_hx___programs->get(id).StaticCast<  ::openfl::display3D::Program3D >();
            			}
            			else {
HXLINE( 492)				this->program = this->_hx___context->createProgram((int)1);
HXLINE( 496)				this->program->_hx___glProgram = this->_hx___createGLProgram(vertex,fragment);
HXLINE( 498)				this->_hx___context->_hx___programs->set(id,this->program);
            			}
HXLINE( 501)			if (hx::IsNotNull( this->program )) {
HXLINE( 503)				this->glProgram = this->program->_hx___glProgram;
HXLINE( 505)				{
HXLINE( 505)					int _g = (int)0;
HXDLIN( 505)					::Array< ::Dynamic> _g1 = this->_hx___inputBitmapData;
HXDLIN( 505)					while((_g < _g1->length)){
HXLINE( 505)						 ::openfl::display::ShaderInput_openfl_display_BitmapData input = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 505)						_g = (_g + (int)1);
HXLINE( 507)						if (input->_hx___isUniform) {
HXLINE( 509)							input->index = gl->getUniformLocation(this->glProgram,input->name);
            						}
            						else {
HXLINE( 513)							input->index = gl->getAttribLocation(this->glProgram,input->name);
            						}
            					}
            				}
HXLINE( 517)				{
HXLINE( 517)					int _g2 = (int)0;
HXDLIN( 517)					::Array< ::Dynamic> _g11 = this->_hx___paramBool;
HXDLIN( 517)					while((_g2 < _g11->length)){
HXLINE( 517)						 ::openfl::display::ShaderParameter_Bool parameter = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 517)						_g2 = (_g2 + (int)1);
HXLINE( 519)						if (parameter->_hx___isUniform) {
HXLINE( 521)							parameter->index = gl->getUniformLocation(this->glProgram,parameter->name);
            						}
            						else {
HXLINE( 525)							parameter->index = gl->getAttribLocation(this->glProgram,parameter->name);
            						}
            					}
            				}
HXLINE( 529)				{
HXLINE( 529)					int _g3 = (int)0;
HXDLIN( 529)					::Array< ::Dynamic> _g12 = this->_hx___paramFloat;
HXDLIN( 529)					while((_g3 < _g12->length)){
HXLINE( 529)						 ::openfl::display::ShaderParameter_Float parameter1 = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 529)						_g3 = (_g3 + (int)1);
HXLINE( 531)						if (parameter1->_hx___isUniform) {
HXLINE( 533)							parameter1->index = gl->getUniformLocation(this->glProgram,parameter1->name);
            						}
            						else {
HXLINE( 537)							parameter1->index = gl->getAttribLocation(this->glProgram,parameter1->name);
            						}
            					}
            				}
HXLINE( 541)				{
HXLINE( 541)					int _g4 = (int)0;
HXDLIN( 541)					::Array< ::Dynamic> _g13 = this->_hx___paramInt;
HXDLIN( 541)					while((_g4 < _g13->length)){
HXLINE( 541)						 ::openfl::display::ShaderParameter_Int parameter2 = _g13->__get(_g4).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 541)						_g4 = (_g4 + (int)1);
HXLINE( 543)						if (parameter2->_hx___isUniform) {
HXLINE( 545)							parameter2->index = gl->getUniformLocation(this->glProgram,parameter2->name);
            						}
            						else {
HXLINE( 549)							parameter2->index = gl->getAttribLocation(this->glProgram,parameter2->name);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___initGL,(void))

void Shader_obj::_hx___processGLData(::String source,::String storageType){
            	HX_GC_STACKFRAME(&_hx_pos_4b006e5218f2daf8_557___processGLData)
HXLINE( 558)		int lastMatch = (int)0;
HXDLIN( 558)		 ::Dynamic position;
HXDLIN( 558)		 ::EReg regex;
HXDLIN( 558)		::String name;
HXDLIN( 558)		::String type;
HXLINE( 560)		if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 562)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)",e3,a8,c0,f8),HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 566)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)",fb,2e,25,cc),HX_("",00,00,00,00));
            		}
HXLINE( 569)		while(regex->matchSub(source,lastMatch,null())){
HXLINE( 571)			type = regex->matched((int)1);
HXLINE( 572)			name = regex->matched((int)2);
HXLINE( 574)			if (::StringTools_obj::startsWith(name,HX_("gl_",9a,86,4e,00))) {
HXLINE( 576)				continue;
            			}
HXLINE( 579)			bool isUniform = (storageType == HX_("uniform",34,41,64,b5));
HXLINE( 581)			if (::StringTools_obj::startsWith(type,HX_("sampler",08,c5,c9,83))) {
HXLINE( 583)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input =  ::openfl::display::ShaderInput_openfl_display_BitmapData_obj::__alloc( HX_CTX );
HXLINE( 584)				input->name = name;
HXLINE( 585)				input->_hx___isUniform = isUniform;
HXLINE( 586)				this->_hx___inputBitmapData->push(input);
HXLINE( 588)				::String _hx_switch_0 = name;
            				if (  (_hx_switch_0==HX_("bitmap",ef,0f,0c,f1)) ){
HXLINE( 593)					this->_hx___bitmap = input;
HXDLIN( 593)					goto _hx_goto_24;
            				}
            				if (  (_hx_switch_0==HX_("openfl_Texture",cc,bd,e4,7e)) ){
HXLINE( 591)					this->_hx___texture = input;
HXDLIN( 591)					goto _hx_goto_24;
            				}
            				/* default */{
            				}
            				_hx_goto_24:;
HXLINE( 597)				::Reflect_obj::setField(this->_hx___data,name,input);
HXLINE( 598)				if (this->_hx___isGenerated) {
HXLINE( 598)					::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),name,input);
            				}
            			}
            			else {
HXLINE( 600)				bool _hx_tmp;
HXDLIN( 600)				if (!(!(::Reflect_obj::hasField(this->_hx___data,name)))) {
HXLINE( 600)					_hx_tmp = hx::IsNull( ::Reflect_obj::field(this->_hx___data,name) );
            				}
            				else {
HXLINE( 600)					_hx_tmp = true;
            				}
HXDLIN( 600)				if (_hx_tmp) {
HXLINE( 602)					 ::Dynamic parameterType;
HXDLIN( 602)					::String _hx_switch_1 = type;
            					if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ){
HXLINE( 602)						parameterType = (int)0;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("bvec2",c0,00,91,bb)) ){
HXLINE( 602)						parameterType = (int)1;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("bvec3",c1,00,91,bb)) ){
HXLINE( 602)						parameterType = (int)2;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("bvec4",c2,00,91,bb)) ){
HXLINE( 602)						parameterType = (int)3;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("dvec2",c2,29,5e,e2)) ||  (_hx_switch_1==HX_("vec2",5e,27,4c,4e)) ){
HXLINE( 602)						parameterType = (int)5;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("dvec3",c3,29,5e,e2)) ||  (_hx_switch_1==HX_("vec3",5f,27,4c,4e)) ){
HXLINE( 602)						parameterType = (int)6;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("double",11,2b,cb,32)) ||  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE( 602)						parameterType = (int)4;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("ivec3",48,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec3",54,06,2e,ac)) ){
HXLINE( 602)						parameterType = (int)10;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("ivec4",49,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec4",55,06,2e,ac)) ){
HXLINE( 602)						parameterType = (int)11;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat2",92,41,56,48)) ||  (_hx_switch_1==HX_("mat2x2",cc,b2,97,bb)) ){
HXLINE( 602)						parameterType = (int)12;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat2x3",cd,b2,97,bb)) ){
HXLINE( 602)						parameterType = (int)13;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat2x4",ce,b2,97,bb)) ){
HXLINE( 602)						parameterType = (int)14;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat3x2",0d,75,98,bb)) ){
HXLINE( 602)						parameterType = (int)15;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat3",93,41,56,48)) ||  (_hx_switch_1==HX_("mat3x3",0e,75,98,bb)) ){
HXLINE( 602)						parameterType = (int)16;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat3x4",0f,75,98,bb)) ){
HXLINE( 602)						parameterType = (int)17;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat4",94,41,56,48)) ||  (_hx_switch_1==HX_("mat4x4",50,37,99,bb)) ){
HXLINE( 602)						parameterType = (int)20;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat4x2",4e,37,99,bb)) ){
HXLINE( 602)						parameterType = (int)18;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("mat4x3",4f,37,99,bb)) ){
HXLINE( 602)						parameterType = (int)19;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ||  (_hx_switch_1==HX_("uint",9a,03,a6,4d)) ){
HXLINE( 602)						parameterType = (int)8;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("ivec2",47,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec2",53,06,2e,ac)) ){
HXLINE( 602)						parameterType = (int)9;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					if (  (_hx_switch_1==HX_("dvec4",c4,29,5e,e2)) ||  (_hx_switch_1==HX_("vec4",60,27,4c,4e)) ){
HXLINE( 602)						parameterType = (int)7;
HXDLIN( 602)						goto _hx_goto_25;
            					}
            					/* default */{
HXLINE( 602)						parameterType = null();
            					}
            					_hx_goto_25:;
HXLINE( 628)					int length;
HXDLIN( 628)					 ::Dynamic _hx_switch_2 = parameterType;
            					if (  (_hx_switch_2==(int)1) ||  (_hx_switch_2==(int)5) ||  (_hx_switch_2==(int)9) ){
HXLINE( 628)						length = (int)2;
HXDLIN( 628)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_2==(int)3) ||  (_hx_switch_2==(int)7) ||  (_hx_switch_2==(int)11) ||  (_hx_switch_2==(int)12) ){
HXLINE( 628)						length = (int)4;
HXDLIN( 628)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_2==(int)2) ||  (_hx_switch_2==(int)6) ||  (_hx_switch_2==(int)10) ){
HXLINE( 628)						length = (int)3;
HXDLIN( 628)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_2==(int)16) ){
HXLINE( 628)						length = (int)9;
HXDLIN( 628)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_2==(int)20) ){
HXLINE( 628)						length = (int)16;
HXDLIN( 628)						goto _hx_goto_26;
            					}
            					/* default */{
HXLINE( 628)						length = (int)1;
            					}
            					_hx_goto_26:;
HXLINE( 638)					int arrayLength;
HXDLIN( 638)					 ::Dynamic _hx_switch_3 = parameterType;
            					if (  (_hx_switch_3==(int)12) ){
HXLINE( 638)						arrayLength = (int)2;
HXDLIN( 638)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_3==(int)16) ){
HXLINE( 638)						arrayLength = (int)3;
HXDLIN( 638)						goto _hx_goto_27;
            					}
            					if (  (_hx_switch_3==(int)20) ){
HXLINE( 638)						arrayLength = (int)4;
HXDLIN( 638)						goto _hx_goto_27;
            					}
            					/* default */{
HXLINE( 638)						arrayLength = (int)1;
            					}
            					_hx_goto_27:;
HXLINE( 646)					 ::Dynamic _hx_switch_4 = parameterType;
            					if (  (_hx_switch_4==(int)0) ||  (_hx_switch_4==(int)1) ||  (_hx_switch_4==(int)2) ||  (_hx_switch_4==(int)3) ){
HXLINE( 649)						 ::openfl::display::ShaderParameter_Bool parameter =  ::openfl::display::ShaderParameter_Bool_obj::__alloc( HX_CTX );
HXLINE( 650)						parameter->set_name(name);
HXLINE( 651)						parameter->type = parameterType;
HXLINE( 652)						parameter->_hx___arrayLength = arrayLength;
HXLINE( 653)						parameter->_hx___isBool = true;
HXLINE( 654)						parameter->_hx___isUniform = isUniform;
HXLINE( 655)						parameter->__length = length;
HXLINE( 656)						this->_hx___paramBool->push(parameter);
HXLINE( 658)						if ((name == HX_("openfl_HasColorTransform",b4,00,4b,62))) {
HXLINE( 660)							this->_hx___hasColorTransform = parameter;
            						}
HXLINE( 663)						::Reflect_obj::setField(this->_hx___data,name,parameter);
HXLINE( 664)						if (this->_hx___isGenerated) {
HXLINE( 664)							::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),name,parameter);
            						}
HXLINE( 648)						goto _hx_goto_29;
            					}
            					if (  (_hx_switch_4==(int)8) ||  (_hx_switch_4==(int)9) ||  (_hx_switch_4==(int)10) ||  (_hx_switch_4==(int)11) ){
HXLINE( 667)						 ::openfl::display::ShaderParameter_Int parameter1 =  ::openfl::display::ShaderParameter_Int_obj::__alloc( HX_CTX );
HXLINE( 668)						parameter1->set_name(name);
HXLINE( 669)						parameter1->type = parameterType;
HXLINE( 670)						parameter1->_hx___arrayLength = arrayLength;
HXLINE( 671)						parameter1->_hx___isInt = true;
HXLINE( 672)						parameter1->_hx___isUniform = isUniform;
HXLINE( 673)						parameter1->__length = length;
HXLINE( 674)						this->_hx___paramInt->push(parameter1);
HXLINE( 675)						::Reflect_obj::setField(this->_hx___data,name,parameter1);
HXLINE( 676)						if (this->_hx___isGenerated) {
HXLINE( 676)							::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),name,parameter1);
            						}
HXLINE( 666)						goto _hx_goto_29;
            					}
            					/* default */{
HXLINE( 679)						 ::openfl::display::ShaderParameter_Float parameter2 =  ::openfl::display::ShaderParameter_Float_obj::__alloc( HX_CTX );
HXLINE( 680)						parameter2->set_name(name);
HXLINE( 681)						parameter2->type = parameterType;
HXLINE( 682)						parameter2->_hx___arrayLength = arrayLength;
HXLINE( 684)						if ((arrayLength > (int)0)) {
HXLINE( 684)							 ::Dynamic elements = (arrayLength * arrayLength);
HXDLIN( 684)							 ::lime::utils::ArrayBufferView this1;
HXDLIN( 684)							if (hx::IsNotNull( elements )) {
HXLINE( 684)								this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)8);
            							}
            							else {
HXLINE( 684)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
HXDLIN( 684)							parameter2->_hx___uniformMatrix = this1;
            						}
HXLINE( 686)						parameter2->_hx___isFloat = true;
HXLINE( 687)						parameter2->_hx___isUniform = isUniform;
HXLINE( 688)						parameter2->__length = length;
HXLINE( 689)						this->_hx___paramFloat->push(parameter2);
HXLINE( 691)						if (::StringTools_obj::startsWith(name,HX_("openfl_",cf,ba,42,40))) {
HXLINE( 693)							::String _hx_switch_5 = name;
            							if (  (_hx_switch_5==HX_("openfl_Alpha",0f,ce,3e,6a)) ){
HXLINE( 695)								this->_hx___alpha = parameter2;
HXDLIN( 695)								goto _hx_goto_28;
            							}
            							if (  (_hx_switch_5==HX_("openfl_ColorMultiplier",b5,e4,dc,18)) ){
HXLINE( 696)								this->_hx___colorMultiplier = parameter2;
HXDLIN( 696)								goto _hx_goto_28;
            							}
            							if (  (_hx_switch_5==HX_("openfl_ColorOffset",c7,ea,07,41)) ){
HXLINE( 697)								this->_hx___colorOffset = parameter2;
HXDLIN( 697)								goto _hx_goto_28;
            							}
            							if (  (_hx_switch_5==HX_("openfl_Matrix",70,ea,41,06)) ){
HXLINE( 698)								this->_hx___matrix = parameter2;
HXDLIN( 698)								goto _hx_goto_28;
            							}
            							if (  (_hx_switch_5==HX_("openfl_Position",98,fe,6c,ee)) ){
HXLINE( 699)								this->_hx___position = parameter2;
HXDLIN( 699)								goto _hx_goto_28;
            							}
            							if (  (_hx_switch_5==HX_("openfl_TextureCoord",49,e9,27,e8)) ){
HXLINE( 700)								this->_hx___textureCoord = parameter2;
HXDLIN( 700)								goto _hx_goto_28;
            							}
            							if (  (_hx_switch_5==HX_("openfl_TextureSize",ad,60,72,29)) ){
HXLINE( 701)								this->_hx___textureSize = parameter2;
HXDLIN( 701)								goto _hx_goto_28;
            							}
            							/* default */{
            							}
            							_hx_goto_28:;
            						}
HXLINE( 706)						::Reflect_obj::setField(this->_hx___data,name,parameter2);
HXLINE( 707)						if (this->_hx___isGenerated) {
HXLINE( 707)							::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),name,parameter2);
            						}
            					}
            					_hx_goto_29:;
            				}
            			}
HXLINE( 711)			position = regex->matchedPos();
HXLINE( 712)			lastMatch = (( (int)(position->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) + ( (int)(position->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,_hx___processGLData,(void))

void Shader_obj::_hx___update(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_718___update)
HXDLIN( 718)		if (hx::IsNotNull( this->program )) {
HXLINE( 720)			this->_hx___updateGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___update,(void))

void Shader_obj::_hx___updateFromBuffer( ::openfl::_internal::renderer::ShaderBuffer shaderBuffer,int bufferOffset){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_726___updateFromBuffer)
HXDLIN( 726)		if (hx::IsNotNull( this->program )) {
HXLINE( 728)			this->_hx___updateGLFromBuffer(shaderBuffer,bufferOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,_hx___updateFromBuffer,(void))

void Shader_obj::_hx___updateGL(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_733___updateGL)
HXLINE( 734)		int textureCount = (int)0;
HXLINE( 736)		{
HXLINE( 736)			int _g = (int)0;
HXDLIN( 736)			::Array< ::Dynamic> _g1 = this->_hx___inputBitmapData;
HXDLIN( 736)			while((_g < _g1->length)){
HXLINE( 736)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 736)				_g = (_g + (int)1);
HXLINE( 738)				input->_hx___updateGL(this->_hx___context,textureCount,null(),null(),null(),null());
HXLINE( 739)				textureCount = (textureCount + (int)1);
            			}
            		}
HXLINE( 742)		{
HXLINE( 742)			int _g2 = (int)0;
HXDLIN( 742)			::Array< ::Dynamic> _g11 = this->_hx___paramBool;
HXDLIN( 742)			while((_g2 < _g11->length)){
HXLINE( 742)				 ::openfl::display::ShaderParameter_Bool parameter = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 742)				_g2 = (_g2 + (int)1);
HXLINE( 744)				parameter->_hx___updateGL(this->_hx___context,null());
            			}
            		}
HXLINE( 747)		{
HXLINE( 747)			int _g3 = (int)0;
HXDLIN( 747)			::Array< ::Dynamic> _g12 = this->_hx___paramFloat;
HXDLIN( 747)			while((_g3 < _g12->length)){
HXLINE( 747)				 ::openfl::display::ShaderParameter_Float parameter1 = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 747)				_g3 = (_g3 + (int)1);
HXLINE( 749)				parameter1->_hx___updateGL(this->_hx___context,null());
            			}
            		}
HXLINE( 752)		{
HXLINE( 752)			int _g4 = (int)0;
HXDLIN( 752)			::Array< ::Dynamic> _g13 = this->_hx___paramInt;
HXDLIN( 752)			while((_g4 < _g13->length)){
HXLINE( 752)				 ::openfl::display::ShaderParameter_Int parameter2 = _g13->__get(_g4).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 752)				_g4 = (_g4 + (int)1);
HXLINE( 754)				parameter2->_hx___updateGL(this->_hx___context,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___updateGL,(void))

void Shader_obj::_hx___updateGLFromBuffer( ::openfl::_internal::renderer::ShaderBuffer shaderBuffer,int bufferOffset){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_759___updateGLFromBuffer)
HXLINE( 760)		int textureCount = (int)0;
HXLINE( 761)		 ::openfl::display::ShaderInput_openfl_display_BitmapData input;
HXDLIN( 761)		 ::openfl::display::BitmapData inputData;
HXDLIN( 761)		 ::Dynamic inputFilter;
HXDLIN( 761)		 ::Dynamic inputMipFilter;
HXDLIN( 761)		 ::Dynamic inputWrap;
HXLINE( 763)		{
HXLINE( 763)			int _g1 = (int)0;
HXDLIN( 763)			int _g = shaderBuffer->inputCount;
HXDLIN( 763)			while((_g1 < _g)){
HXLINE( 763)				_g1 = (_g1 + (int)1);
HXDLIN( 763)				int i = (_g1 - (int)1);
HXLINE( 765)				input = shaderBuffer->inputRefs->__get(i).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXLINE( 766)				inputData = shaderBuffer->inputs->__get(i).StaticCast<  ::openfl::display::BitmapData >();
HXLINE( 767)				inputFilter = shaderBuffer->inputFilter->__get(i);
HXLINE( 768)				inputMipFilter = shaderBuffer->inputMipFilter->__get(i);
HXLINE( 769)				inputWrap = shaderBuffer->inputWrap->__get(i);
HXLINE( 771)				if (hx::IsNotNull( inputData )) {
HXLINE( 773)					input->_hx___updateGL(this->_hx___context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
HXLINE( 774)					textureCount = (textureCount + (int)1);
            				}
            			}
            		}
HXLINE( 778)		 ::lime::_internal::backend::native::NativeOpenGLRenderContext gl = this->_hx___context->gl;
HXLINE( 780)		if ((shaderBuffer->paramDataLength > (int)0)) {
HXLINE( 782)			if (hx::IsNull( shaderBuffer->paramDataBuffer )) {
HXLINE( 784)				shaderBuffer->paramDataBuffer = gl->createBuffer();
            			}
HXLINE( 789)			this->_hx___context->_hx___bindGLArrayBuffer(shaderBuffer->paramDataBuffer);
HXLINE( 790)			::lime::graphics::_WebGLRenderContext::WebGLRenderContext_Impl__obj::bufferData(gl,gl->ARRAY_BUFFER,shaderBuffer->paramData,gl->DYNAMIC_DRAW);
            		}
            		else {
HXLINE( 796)			this->_hx___context->_hx___bindGLArrayBuffer(null());
            		}
HXLINE( 799)		int boolIndex = (int)0;
HXLINE( 800)		int floatIndex = (int)0;
HXLINE( 801)		int intIndex = (int)0;
HXLINE( 803)		int boolCount = shaderBuffer->paramBoolCount;
HXLINE( 804)		int floatCount = shaderBuffer->paramFloatCount;
HXLINE( 805)		 ::lime::utils::ArrayBufferView paramData = shaderBuffer->paramData;
HXLINE( 807)		 ::openfl::display::ShaderParameter_Bool boolRef;
HXDLIN( 807)		 ::openfl::display::ShaderParameter_Float floatRef;
HXDLIN( 807)		 ::openfl::display::ShaderParameter_Int intRef;
HXDLIN( 807)		bool hasOverride;
HXLINE( 808)		::Array< bool > overrideBoolValue = null();
HXDLIN( 808)		::Array< Float > overrideFloatValue = null();
HXDLIN( 808)		::Array< int > overrideIntValue = null();
HXLINE( 810)		{
HXLINE( 810)			int _g11 = (int)0;
HXDLIN( 810)			int _g2 = shaderBuffer->paramCount;
HXDLIN( 810)			while((_g11 < _g2)){
HXLINE( 810)				_g11 = (_g11 + (int)1);
HXDLIN( 810)				int i1 = (_g11 - (int)1);
HXLINE( 812)				hasOverride = false;
HXLINE( 814)				if ((i1 < boolCount)) {
HXLINE( 816)					boolRef = shaderBuffer->paramRefs_Bool->__get(boolIndex).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXLINE( 818)					{
HXLINE( 818)						int _g3 = (int)0;
HXDLIN( 818)						int _g21 = shaderBuffer->overrideBoolCount;
HXDLIN( 818)						while((_g3 < _g21)){
HXLINE( 818)							_g3 = (_g3 + (int)1);
HXDLIN( 818)							int j = (_g3 - (int)1);
HXLINE( 820)							::String boolRef1 = boolRef->name;
HXDLIN( 820)							if ((boolRef1 == shaderBuffer->overrideBoolNames->__get(j))) {
HXLINE( 822)								overrideBoolValue = shaderBuffer->overrideBoolValues->__get(j).StaticCast< ::Array< bool > >();
HXLINE( 823)								hasOverride = true;
HXLINE( 824)								goto _hx_goto_40;
            							}
            						}
            						_hx_goto_40:;
            					}
HXLINE( 828)					if (hasOverride) {
HXLINE( 830)						boolRef->_hx___updateGL(this->_hx___context,overrideBoolValue);
            					}
            					else {
HXLINE( 834)						 ::openfl::display3D::Context3D _hx_tmp = this->_hx___context;
HXDLIN( 834)						int shaderBuffer1 = shaderBuffer->paramPositions->__get(i1);
HXDLIN( 834)						boolRef->_hx___updateGLFromBuffer(_hx_tmp,paramData,shaderBuffer1,shaderBuffer->paramLengths->__get(i1),bufferOffset);
            					}
HXLINE( 837)					boolIndex = (boolIndex + (int)1);
            				}
            				else {
HXLINE( 839)					if ((i1 < (boolCount + floatCount))) {
HXLINE( 841)						floatRef = shaderBuffer->paramRefs_Float->__get(floatIndex).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXLINE( 843)						{
HXLINE( 843)							int _g31 = (int)0;
HXDLIN( 843)							int _g22 = shaderBuffer->overrideFloatCount;
HXDLIN( 843)							while((_g31 < _g22)){
HXLINE( 843)								_g31 = (_g31 + (int)1);
HXDLIN( 843)								int j1 = (_g31 - (int)1);
HXLINE( 845)								::String floatRef1 = floatRef->name;
HXDLIN( 845)								if ((floatRef1 == shaderBuffer->overrideFloatNames->__get(j1))) {
HXLINE( 847)									overrideFloatValue = shaderBuffer->overrideFloatValues->__get(j1).StaticCast< ::Array< Float > >();
HXLINE( 848)									hasOverride = true;
HXLINE( 849)									goto _hx_goto_41;
            								}
            							}
            							_hx_goto_41:;
            						}
HXLINE( 853)						if (hasOverride) {
HXLINE( 855)							floatRef->_hx___updateGL(this->_hx___context,overrideFloatValue);
            						}
            						else {
HXLINE( 859)							 ::openfl::display3D::Context3D _hx_tmp1 = this->_hx___context;
HXDLIN( 859)							int shaderBuffer2 = shaderBuffer->paramPositions->__get(i1);
HXDLIN( 859)							floatRef->_hx___updateGLFromBuffer(_hx_tmp1,paramData,shaderBuffer2,shaderBuffer->paramLengths->__get(i1),bufferOffset);
            						}
HXLINE( 862)						floatIndex = (floatIndex + (int)1);
            					}
            					else {
HXLINE( 866)						intRef = shaderBuffer->paramRefs_Int->__get(intIndex).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXLINE( 868)						{
HXLINE( 868)							int _g32 = (int)0;
HXDLIN( 868)							int _g23 = shaderBuffer->overrideIntCount;
HXDLIN( 868)							while((_g32 < _g23)){
HXLINE( 868)								_g32 = (_g32 + (int)1);
HXDLIN( 868)								int j2 = (_g32 - (int)1);
HXLINE( 870)								::String intRef1 = intRef->name;
HXDLIN( 870)								if ((intRef1 == shaderBuffer->overrideIntNames->__get(j2))) {
HXLINE( 872)									overrideIntValue = ::cpp::VirtualArray( shaderBuffer->overrideIntValues->__get(j2));
HXLINE( 873)									hasOverride = true;
HXLINE( 874)									goto _hx_goto_42;
            								}
            							}
            							_hx_goto_42:;
            						}
HXLINE( 878)						if (hasOverride) {
HXLINE( 880)							intRef->_hx___updateGL(this->_hx___context,overrideIntValue);
            						}
            						else {
HXLINE( 884)							 ::openfl::display3D::Context3D _hx_tmp2 = this->_hx___context;
HXDLIN( 884)							int shaderBuffer3 = shaderBuffer->paramPositions->__get(i1);
HXDLIN( 884)							intRef->_hx___updateGLFromBuffer(_hx_tmp2,paramData,shaderBuffer3,shaderBuffer->paramLengths->__get(i1),bufferOffset);
            						}
HXLINE( 887)						intIndex = (intIndex + (int)1);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,_hx___updateGLFromBuffer,(void))

 ::Dynamic Shader_obj::get_data(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_894_get_data)
HXLINE( 895)		bool _hx_tmp;
HXDLIN( 895)		if (!(this->_hx___glSourceDirty)) {
HXLINE( 895)			_hx_tmp = hx::IsNull( this->_hx___data );
            		}
            		else {
HXLINE( 895)			_hx_tmp = true;
            		}
HXDLIN( 895)		if (_hx_tmp) {
HXLINE( 897)			this->_hx___init();
            		}
HXLINE( 900)		return this->_hx___data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_data,return )

 ::Dynamic Shader_obj::set_data( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_905_set_data)
HXDLIN( 905)		return (this->_hx___data = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_data,return )

::String Shader_obj::get_glFragmentSource(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_910_get_glFragmentSource)
HXDLIN( 910)		return this->_hx___glFragmentSource;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_glFragmentSource,return )

::String Shader_obj::set_glFragmentSource(::String value){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_914_set_glFragmentSource)
HXLINE( 915)		if ((value != this->_hx___glFragmentSource)) {
HXLINE( 917)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 920)		return (this->_hx___glFragmentSource = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_glFragmentSource,return )

::String Shader_obj::get_glVertexSource(){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_925_get_glVertexSource)
HXDLIN( 925)		return this->_hx___glVertexSource;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_glVertexSource,return )

::String Shader_obj::set_glVertexSource(::String value){
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_929_set_glVertexSource)
HXLINE( 930)		if ((value != this->_hx___glVertexSource)) {
HXLINE( 932)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 935)		return (this->_hx___glVertexSource = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_glVertexSource,return )


hx::ObjectPtr< Shader_obj > Shader_obj::__new( ::openfl::utils::ByteArrayData code) {
	hx::ObjectPtr< Shader_obj > __this = new Shader_obj();
	__this->__construct(code);
	return __this;
}

hx::ObjectPtr< Shader_obj > Shader_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::utils::ByteArrayData code) {
	Shader_obj *__this = (Shader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Shader_obj), true, "openfl.display.Shader"));
	*(void **)__this = Shader_obj::_hx_vtable;
	__this->__construct(code);
	return __this;
}

Shader_obj::Shader_obj()
{
}

void Shader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shader);
	HX_MARK_MEMBER_NAME(byteCode,"byteCode");
	HX_MARK_MEMBER_NAME(glProgram,"glProgram");
	HX_MARK_MEMBER_NAME(precisionHint,"precisionHint");
	HX_MARK_MEMBER_NAME(program,"program");
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___bitmap,"__bitmap");
	HX_MARK_MEMBER_NAME(_hx___colorMultiplier,"__colorMultiplier");
	HX_MARK_MEMBER_NAME(_hx___colorOffset,"__colorOffset");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___data,"__data");
	HX_MARK_MEMBER_NAME(_hx___glFragmentSource,"__glFragmentSource");
	HX_MARK_MEMBER_NAME(_hx___glSourceDirty,"__glSourceDirty");
	HX_MARK_MEMBER_NAME(_hx___glVertexSource,"__glVertexSource");
	HX_MARK_MEMBER_NAME(_hx___hasColorTransform,"__hasColorTransform");
	HX_MARK_MEMBER_NAME(_hx___inputBitmapData,"__inputBitmapData");
	HX_MARK_MEMBER_NAME(_hx___isGenerated,"__isGenerated");
	HX_MARK_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_MARK_MEMBER_NAME(_hx___numPasses,"__numPasses");
	HX_MARK_MEMBER_NAME(_hx___paramBool,"__paramBool");
	HX_MARK_MEMBER_NAME(_hx___paramFloat,"__paramFloat");
	HX_MARK_MEMBER_NAME(_hx___paramInt,"__paramInt");
	HX_MARK_MEMBER_NAME(_hx___position,"__position");
	HX_MARK_MEMBER_NAME(_hx___textureCoord,"__textureCoord");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureSize,"__textureSize");
	HX_MARK_END_CLASS();
}

void Shader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(byteCode,"byteCode");
	HX_VISIT_MEMBER_NAME(glProgram,"glProgram");
	HX_VISIT_MEMBER_NAME(precisionHint,"precisionHint");
	HX_VISIT_MEMBER_NAME(program,"program");
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___bitmap,"__bitmap");
	HX_VISIT_MEMBER_NAME(_hx___colorMultiplier,"__colorMultiplier");
	HX_VISIT_MEMBER_NAME(_hx___colorOffset,"__colorOffset");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___data,"__data");
	HX_VISIT_MEMBER_NAME(_hx___glFragmentSource,"__glFragmentSource");
	HX_VISIT_MEMBER_NAME(_hx___glSourceDirty,"__glSourceDirty");
	HX_VISIT_MEMBER_NAME(_hx___glVertexSource,"__glVertexSource");
	HX_VISIT_MEMBER_NAME(_hx___hasColorTransform,"__hasColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___inputBitmapData,"__inputBitmapData");
	HX_VISIT_MEMBER_NAME(_hx___isGenerated,"__isGenerated");
	HX_VISIT_MEMBER_NAME(_hx___matrix,"__matrix");
	HX_VISIT_MEMBER_NAME(_hx___numPasses,"__numPasses");
	HX_VISIT_MEMBER_NAME(_hx___paramBool,"__paramBool");
	HX_VISIT_MEMBER_NAME(_hx___paramFloat,"__paramFloat");
	HX_VISIT_MEMBER_NAME(_hx___paramInt,"__paramInt");
	HX_VISIT_MEMBER_NAME(_hx___position,"__position");
	HX_VISIT_MEMBER_NAME(_hx___textureCoord,"__textureCoord");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureSize,"__textureSize");
}

hx::Val Shader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_data() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__data") ) { return hx::Val( _hx___data ); }
		if (HX_FIELD_EQ(inName,"__init") ) { return hx::Val( _hx___init_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { return hx::Val( program ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"byteCode") ) { return hx::Val( byteCode ); }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { return hx::Val( _hx___bitmap ); }
		if (HX_FIELD_EQ(inName,"__matrix") ) { return hx::Val( _hx___matrix ); }
		if (HX_FIELD_EQ(inName,"__enable") ) { return hx::Val( _hx___enable_dyn() ); }
		if (HX_FIELD_EQ(inName,"__initGL") ) { return hx::Val( _hx___initGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_data") ) { return hx::Val( get_data_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_data") ) { return hx::Val( set_data_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { return hx::Val( glProgram ); }
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"__disable") ) { return hx::Val( _hx___disable_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__paramInt") ) { return hx::Val( _hx___paramInt ); }
		if (HX_FIELD_EQ(inName,"__position") ) { return hx::Val( _hx___position ); }
		if (HX_FIELD_EQ(inName,"__enableGL") ) { return hx::Val( _hx___enableGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateGL") ) { return hx::Val( _hx___updateGL_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__numPasses") ) { return hx::Val( _hx___numPasses ); }
		if (HX_FIELD_EQ(inName,"__paramBool") ) { return hx::Val( _hx___paramBool ); }
		if (HX_FIELD_EQ(inName,"__disableGL") ) { return hx::Val( _hx___disableGL_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__paramFloat") ) { return hx::Val( _hx___paramFloat ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"precisionHint") ) { return hx::Val( precisionHint ); }
		if (HX_FIELD_EQ(inName,"__colorOffset") ) { return hx::Val( _hx___colorOffset ); }
		if (HX_FIELD_EQ(inName,"__isGenerated") ) { return hx::Val( _hx___isGenerated ); }
		if (HX_FIELD_EQ(inName,"__textureSize") ) { return hx::Val( _hx___textureSize ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glVertexSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_glVertexSource() ); }
		if (HX_FIELD_EQ(inName,"__textureCoord") ) { return hx::Val( _hx___textureCoord ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__glSourceDirty") ) { return hx::Val( _hx___glSourceDirty ); }
		if (HX_FIELD_EQ(inName,"__clearUseArray") ) { return hx::Val( _hx___clearUseArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"__processGLData") ) { return hx::Val( _hx___processGLData_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"glFragmentSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_glFragmentSource() ); }
		if (HX_FIELD_EQ(inName,"__glVertexSource") ) { return hx::Val( _hx___glVertexSource ); }
		if (HX_FIELD_EQ(inName,"__createGLShader") ) { return hx::Val( _hx___createGLShader_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__colorMultiplier") ) { return hx::Val( _hx___colorMultiplier ); }
		if (HX_FIELD_EQ(inName,"__inputBitmapData") ) { return hx::Val( _hx___inputBitmapData ); }
		if (HX_FIELD_EQ(inName,"__createGLProgram") ) { return hx::Val( _hx___createGLProgram_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__glFragmentSource") ) { return hx::Val( _hx___glFragmentSource ); }
		if (HX_FIELD_EQ(inName,"__updateFromBuffer") ) { return hx::Val( _hx___updateFromBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_glVertexSource") ) { return hx::Val( get_glVertexSource_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_glVertexSource") ) { return hx::Val( set_glVertexSource_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__hasColorTransform") ) { return hx::Val( _hx___hasColorTransform ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__updateGLFromBuffer") ) { return hx::Val( _hx___updateGLFromBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_glFragmentSource") ) { return hx::Val( get_glFragmentSource_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_glFragmentSource") ) { return hx::Val( set_glFragmentSource_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Shader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_data(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__data") ) { _hx___data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { program=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"byteCode") ) { byteCode=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bitmap") ) { _hx___bitmap=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__matrix") ) { _hx___matrix=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { glProgram=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__paramInt") ) { _hx___paramInt=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__position") ) { _hx___position=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__numPasses") ) { _hx___numPasses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paramBool") ) { _hx___paramBool=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__paramFloat") ) { _hx___paramFloat=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"precisionHint") ) { precisionHint=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__colorOffset") ) { _hx___colorOffset=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isGenerated") ) { _hx___isGenerated=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textureSize") ) { _hx___textureSize=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glVertexSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glVertexSource(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"__textureCoord") ) { _hx___textureCoord=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__glSourceDirty") ) { _hx___glSourceDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"glFragmentSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glFragmentSource(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"__glVertexSource") ) { _hx___glVertexSource=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__colorMultiplier") ) { _hx___colorMultiplier=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__inputBitmapData") ) { _hx___inputBitmapData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__glFragmentSource") ) { _hx___glFragmentSource=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__hasColorTransform") ) { _hx___hasColorTransform=inValue.Cast<  ::openfl::display::ShaderParameter_Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Shader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("glFragmentSource","\xd0","\xc5","\xca","\xf7"));
	outFields->push(HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1"));
	outFields->push(HX_HCSTRING("glVertexSource","\x24","\x6d","\x4a","\x5b"));
	outFields->push(HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c"));
	outFields->push(HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"));
	outFields->push(HX_HCSTRING("__colorMultiplier","\xa4","\x47","\xdb","\xd3"));
	outFields->push(HX_HCSTRING("__colorOffset","\x36","\x6a","\xe0","\x62"));
	outFields->push(HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"));
	outFields->push(HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1"));
	outFields->push(HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63"));
	outFields->push(HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41"));
	outFields->push(HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f"));
	outFields->push(HX_HCSTRING("__hasColorTransform","\x63","\x3d","\xdb","\xa3"));
	outFields->push(HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64"));
	outFields->push(HX_HCSTRING("__isGenerated","\x25","\xe7","\x69","\xbb"));
	outFields->push(HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63"));
	outFields->push(HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd"));
	outFields->push(HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f"));
	outFields->push(HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab"));
	outFields->push(HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21"));
	outFields->push(HX_HCSTRING("__position","\xc9","\x13","\x33","\x6e"));
	outFields->push(HX_HCSTRING("__textureCoord","\xfa","\xea","\xbe","\x63"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__textureSize","\x1c","\xe0","\x4a","\x4b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(Shader_obj,byteCode),HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Shader_obj,glProgram),HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Shader_obj,precisionHint),HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c")},
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(int)offsetof(Shader_obj,program),HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(Shader_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsObject /*::openfl::display::ShaderInput_openfl_display_BitmapData*/ ,(int)offsetof(Shader_obj,_hx___bitmap),HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(Shader_obj,_hx___colorMultiplier),HX_HCSTRING("__colorMultiplier","\xa4","\x47","\xdb","\xd3")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(Shader_obj,_hx___colorOffset),HX_HCSTRING("__colorOffset","\x36","\x6a","\xe0","\x62")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(Shader_obj,_hx___context),HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Shader_obj,_hx___data),HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1")},
	{hx::fsString,(int)offsetof(Shader_obj,_hx___glFragmentSource),HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63")},
	{hx::fsBool,(int)offsetof(Shader_obj,_hx___glSourceDirty),HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41")},
	{hx::fsString,(int)offsetof(Shader_obj,_hx___glVertexSource),HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Bool*/ ,(int)offsetof(Shader_obj,_hx___hasColorTransform),HX_HCSTRING("__hasColorTransform","\x63","\x3d","\xdb","\xa3")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___inputBitmapData),HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64")},
	{hx::fsBool,(int)offsetof(Shader_obj,_hx___isGenerated),HX_HCSTRING("__isGenerated","\x25","\xe7","\x69","\xbb")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(Shader_obj,_hx___matrix),HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63")},
	{hx::fsInt,(int)offsetof(Shader_obj,_hx___numPasses),HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramBool),HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramFloat),HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramInt),HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(Shader_obj,_hx___position),HX_HCSTRING("__position","\xc9","\x13","\x33","\x6e")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(Shader_obj,_hx___textureCoord),HX_HCSTRING("__textureCoord","\xfa","\xea","\xbe","\x63")},
	{hx::fsObject /*::openfl::display::ShaderInput_openfl_display_BitmapData*/ ,(int)offsetof(Shader_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*::openfl::display::ShaderParameter_Float*/ ,(int)offsetof(Shader_obj,_hx___textureSize),HX_HCSTRING("__textureSize","\x1c","\xe0","\x4a","\x4b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Shader_obj_sStaticStorageInfo = 0;
#endif

static ::String Shader_obj_sMemberFields[] = {
	HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42"),
	HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1"),
	HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c"),
	HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"),
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__bitmap","\x0f","\x7b","\x3b","\x99"),
	HX_HCSTRING("__colorMultiplier","\xa4","\x47","\xdb","\xd3"),
	HX_HCSTRING("__colorOffset","\x36","\x6a","\xe0","\x62"),
	HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"),
	HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1"),
	HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63"),
	HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41"),
	HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f"),
	HX_HCSTRING("__hasColorTransform","\x63","\x3d","\xdb","\xa3"),
	HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64"),
	HX_HCSTRING("__isGenerated","\x25","\xe7","\x69","\xbb"),
	HX_HCSTRING("__matrix","\x61","\xa1","\xf7","\x63"),
	HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd"),
	HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f"),
	HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab"),
	HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21"),
	HX_HCSTRING("__position","\xc9","\x13","\x33","\x6e"),
	HX_HCSTRING("__textureCoord","\xfa","\xea","\xbe","\x63"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__textureSize","\x1c","\xe0","\x4a","\x4b"),
	HX_HCSTRING("__clearUseArray","\x5f","\x0b","\x0a","\xa8"),
	HX_HCSTRING("__createGLShader","\x46","\x69","\xda","\x33"),
	HX_HCSTRING("__createGLProgram","\x43","\x7d","\xb4","\xbf"),
	HX_HCSTRING("__disable","\xc8","\xba","\xa6","\x32"),
	HX_HCSTRING("__disableGL","\xed","\x3a","\xe1","\x35"),
	HX_HCSTRING("__enable","\xa3","\x19","\xb7","\xa0"),
	HX_HCSTRING("__enableGL","\x88","\x46","\xeb","\x8f"),
	HX_HCSTRING("__init","\x30","\x9e","\xb3","\xf4"),
	HX_HCSTRING("__initGL","\x55","\xc8","\x7b","\x3f"),
	HX_HCSTRING("__processGLData","\x7e","\x0f","\x78","\x7c"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateFromBuffer","\x93","\x24","\x55","\xc9"),
	HX_HCSTRING("__updateGL","\x8e","\x8b","\x32","\x1b"),
	HX_HCSTRING("__updateGLFromBuffer","\x38","\x8f","\xd7","\x17"),
	HX_HCSTRING("get_data","\xb3","\x11","\x1e","\xc2"),
	HX_HCSTRING("set_data","\x27","\x6b","\x7b","\x70"),
	HX_HCSTRING("get_glFragmentSource","\xd9","\x2a","\x35","\x16"),
	HX_HCSTRING("set_glFragmentSource","\x4d","\xe2","\xec","\xe2"),
	HX_HCSTRING("get_glVertexSource","\xed","\x4d","\xe4","\xf6"),
	HX_HCSTRING("set_glVertexSource","\x61","\x80","\x93","\xd3"),
	::String(null()) };

static void Shader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#endif

hx::Class Shader_obj::__mClass;

void Shader_obj::__register()
{
	hx::Object *dummy = new Shader_obj;
	Shader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Shader","\x0f","\xdf","\x61","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Shader_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4b006e5218f2daf8_124_boot)
HXDLIN( 124)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("glProgram",df,d6,b3,c1), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c))))))));
            	}
}

} // end namespace openfl
} // end namespace display
