// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text__UTF8String_UTF8String_Impl_
#include <lime/text/_UTF8String/UTF8String_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_GlyphPosition
#include <openfl/_internal/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayout
#include <openfl/_internal/text/TextLayout.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_104_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",104,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_152_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",152,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_147_createRestrictRegexp,"openfl._internal.text.TextEngine","createRestrictRegexp",0x9d7d650f,"openfl._internal.text.TextEngine.createRestrictRegexp","openfl/_internal/text/TextEngine.hx",147,0xdff93b7f)
static const ::String _hx_array_data_a0887a60_3[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_234_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",234,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_547_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",547,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_564_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",564,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_574_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",574,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_734_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",734,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1552_restrictText,"openfl._internal.text.TextEngine","restrictText",0x020728d7,"openfl._internal.text.TextEngine.restrictText","openfl/_internal/text/TextEngine.hx",1552,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1573_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1573,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1679_trimText,"openfl._internal.text.TextEngine","trimText",0xf449c67d,"openfl._internal.text.TextEngine.trimText","openfl/_internal/text/TextEngine.hx",1679,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1694_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1694,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1726_get_bottomScrollV,"openfl._internal.text.TextEngine","get_bottomScrollV",0x630381c7,"openfl._internal.text.TextEngine.get_bottomScrollV","openfl/_internal/text/TextEngine.hx",1726,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1756_get_maxScrollV,"openfl._internal.text.TextEngine","get_maxScrollV",0xb4491bfc,"openfl._internal.text.TextEngine.get_maxScrollV","openfl/_internal/text/TextEngine.hx",1756,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1788_set_restrict,"openfl._internal.text.TextEngine","set_restrict",0x897ab987,"openfl._internal.text.TextEngine.set_restrict","openfl/_internal/text/TextEngine.hx",1788,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1809_get_scrollV,"openfl._internal.text.TextEngine","get_scrollV",0xb7bed0b2,"openfl._internal.text.TextEngine.get_scrollV","openfl/_internal/text/TextEngine.hx",1809,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1818_set_scrollV,"openfl._internal.text.TextEngine","set_scrollV",0xc22bd7be,"openfl._internal.text.TextEngine.set_scrollV","openfl/_internal/text/TextEngine.hx",1818,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1825_set_text,"openfl._internal.text.TextEngine","set_text",0x09f7f978,"openfl._internal.text.TextEngine.set_text","openfl/_internal/text/TextEngine.hx",1825,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_173_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",173,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_209_findFontVariant,"openfl._internal.text.TextEngine","findFontVariant",0xfb6dc0af,"openfl._internal.text.TextEngine.findFontVariant","openfl/_internal/text/TextEngine.hx",209,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_259_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",259,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_295_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",295,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_352_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",352,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_33_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",33,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_35_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",35,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_36_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",36,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_37_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",37,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_38_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",38,0xdff93b7f)
HX_LOCAL_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_39_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",39,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_104_new)
HXLINE( 105)		this->textField = textField;
HXLINE( 107)		this->width = (int)100;
HXLINE( 108)		this->height = (int)100;
HXLINE( 109)		this->set_text(HX_("",00,00,00,00));
HXLINE( 111)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 112)		this->textBounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 114)		this->type = (int)0;
HXLINE( 115)		this->autoSize = (int)2;
HXLINE( 116)		this->embedFonts = false;
HXLINE( 117)		this->selectable = true;
HXLINE( 118)		this->borderColor = (int)0;
HXLINE( 119)		this->border = false;
HXLINE( 120)		this->backgroundColor = (int)16777215;
HXLINE( 121)		this->background = false;
HXLINE( 122)		this->gridFitType = (int)1;
HXLINE( 123)		this->maxChars = (int)0;
HXLINE( 124)		this->multiline = false;
HXLINE( 125)		this->numLines = (int)1;
HXLINE( 126)		this->sharpness = (int)0;
HXLINE( 127)		this->scrollH = (int)0;
HXLINE( 128)		this->set_scrollV((int)1);
HXLINE( 129)		this->wordWrap = false;
HXLINE( 131)		int length = null();
HXDLIN( 131)		bool fixed = null();
HXDLIN( 131)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null(),true);
HXLINE( 132)		int length1 = null();
HXDLIN( 132)		bool fixed1 = null();
HXDLIN( 132)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
HXLINE( 133)		int length2 = null();
HXDLIN( 133)		bool fixed2 = null();
HXDLIN( 133)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null(),true);
HXLINE( 134)		int length3 = null();
HXDLIN( 134)		bool fixed3 = null();
HXDLIN( 134)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,null(),true);
HXLINE( 135)		int length4 = null();
HXDLIN( 135)		bool fixed4 = null();
HXDLIN( 135)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,null(),true);
HXLINE( 136)		int length5 = null();
HXDLIN( 136)		bool fixed5 = null();
HXDLIN( 136)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,null(),true);
HXLINE( 137)		int length6 = null();
HXDLIN( 137)		bool fixed6 = null();
HXDLIN( 137)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,null(),true);
HXLINE( 138)		int length7 = null();
HXDLIN( 138)		bool fixed7 = null();
HXDLIN( 138)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,null(),true);
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x278047a0;
}

 ::EReg TextEngine_obj::createRestrictRegexp(::String restrict){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,declined) HXARGC(1)
            		::String _hx_run( ::EReg ereg){
            			HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_152_createRestrictRegexp)
HXLINE( 153)			::Array< ::String > declined1 = declined;
HXDLIN( 153)			int accepted1 = (int)0;
HXDLIN( 153)			::String declined2 = declined1->__get(accepted1);
HXDLIN( 153)			declined1[accepted1] = (declined2 + ereg->matched((int)1));
HXLINE( 154)			return HX_("",00,00,00,00);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_147_createRestrictRegexp)
HXLINE( 148)		 ::EReg declinedRange =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\^(.-.|.)",ee,f5,da,ba),HX_("gu",2e,5a,00,00));
HXLINE( 149)		::Array< ::String > declined = ::Array_obj< ::String >::fromData( _hx_array_data_a0887a60_3,1);
HXLINE( 151)		::String accepted = declinedRange->map(restrict, ::Dynamic(new _hx_Closure_0(declined)));
HXLINE( 157)		::Array< ::String > testRegexpParts = ::Array_obj< ::String >::__new(0);
HXLINE( 159)		if ((accepted.length > (int)0)) {
HXLINE( 161)			testRegexpParts->push(((HX_("[^",a3,4f,00,00) + restrict) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 164)		if ((declined->__get((int)0).length > (int)0)) {
HXLINE( 166)			testRegexpParts->push(((HX_("[",5b,00,00,00) + declined->__get((int)0)) + HX_("]",5d,00,00,00)));
            		}
HXLINE( 169)		return  ::EReg_obj::__alloc( HX_CTX ,((HX_("(",28,00,00,00) + testRegexpParts->join(HX_("|",7c,00,00,00))) + HX_(")",29,00,00,00)),HX_("g",67,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,createRestrictRegexp,return )

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_234_getBounds)
HXLINE( 235)		int padding;
HXDLIN( 235)		if (this->border) {
HXLINE( 235)			padding = (int)1;
            		}
            		else {
HXLINE( 235)			padding = (int)0;
            		}
HXLINE( 237)		this->bounds->width = (this->width + padding);
HXLINE( 238)		this->bounds->height = (this->height + padding);
HXLINE( 240)		Float x = this->width;
HXDLIN( 240)		Float y = this->width;
HXLINE( 242)		{
HXLINE( 242)			int _g = (int)0;
HXDLIN( 242)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 242)			while((_g < _g1->get_length())){
HXLINE( 242)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 242)				_g = (_g + (int)1);
HXLINE( 244)				if ((group->offsetX < x)) {
HXLINE( 244)					x = group->offsetX;
            				}
HXLINE( 245)				if ((group->offsetY < y)) {
HXLINE( 245)					y = group->offsetY;
            				}
            			}
            		}
HXLINE( 248)		if ((x >= this->width)) {
HXLINE( 248)			x = (int)2;
            		}
HXLINE( 249)		if ((y >= this->height)) {
HXLINE( 249)			y = (int)2;
            		}
HXLINE( 255)		 ::openfl::geom::Rectangle _hx_tmp = this->textBounds;
HXDLIN( 255)		Float _hx_tmp1 = ::Math_obj::max((x - (int)2),(int)0);
HXDLIN( 255)		Float _hx_tmp2 = ::Math_obj::max((y - (int)2),(int)0);
HXDLIN( 255)		Float _hx_tmp3 = (this->textWidth + (int)4);
HXDLIN( 255)		Float _hx_tmp4 = ::Math_obj::min(_hx_tmp3,(this->bounds->width + (int)4));
HXDLIN( 255)		Float _hx_tmp5 = (this->textHeight + (int)4);
HXDLIN( 255)		_hx_tmp->setTo(_hx_tmp1,_hx_tmp2,_hx_tmp4,::Math_obj::min(_hx_tmp5,(this->bounds->height + (int)4)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_547_getLine)
HXLINE( 548)		bool _hx_tmp;
HXDLIN( 548)		if ((index >= (int)0)) {
HXLINE( 548)			_hx_tmp = (index > (this->lineBreaks->get_length() + (int)1));
            		}
            		else {
HXLINE( 548)			_hx_tmp = true;
            		}
HXDLIN( 548)		if (_hx_tmp) {
HXLINE( 550)			return null();
            		}
HXLINE( 553)		if ((this->lineBreaks->get_length() == (int)0)) {
HXLINE( 555)			return this->text;
            		}
            		else {
HXLINE( 559)			::String _hx_tmp1 = this->text;
HXDLIN( 559)			int _hx_tmp2;
HXDLIN( 559)			if ((index > (int)0)) {
HXLINE( 559)				_hx_tmp2 = this->lineBreaks->get((index - (int)1));
            			}
            			else {
HXLINE( 559)				_hx_tmp2 = (int)0;
            			}
HXDLIN( 559)			return ::lime::text::_UTF8String::UTF8String_Impl__obj::substring(_hx_tmp1,_hx_tmp2,this->lineBreaks->get(index));
            		}
HXLINE( 553)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_564_getLineBreakIndex)
HXLINE( 565)		int cr = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\n",0a,00,00,00),startIndex);
HXLINE( 566)		int lf = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_("\r",0d,00,00,00),startIndex);
HXLINE( 568)		if ((cr == (int)-1)) {
HXLINE( 568)			return lf;
            		}
HXLINE( 569)		if ((lf == (int)-1)) {
HXLINE( 569)			return cr;
            		}
HXLINE( 570)		if ((cr < lf)) {
HXLINE( 570)			return cr;
            		}
            		else {
HXLINE( 570)			return lf;
            		}
HXDLIN( 570)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_574_getLineMeasurements)
HXLINE( 575)		this->lineAscents->set_length((int)0);
HXLINE( 576)		this->lineDescents->set_length((int)0);
HXLINE( 577)		this->lineLeadings->set_length((int)0);
HXLINE( 578)		this->lineHeights->set_length((int)0);
HXLINE( 579)		this->lineWidths->set_length((int)0);
HXLINE( 581)		Float currentLineAscent = ((Float)0.0);
HXLINE( 582)		Float currentLineDescent = ((Float)0.0);
HXLINE( 583)		 ::Dynamic currentLineLeading = null();
HXLINE( 584)		Float currentLineHeight = ((Float)0.0);
HXLINE( 585)		Float currentLineWidth = ((Float)0.0);
HXLINE( 586)		Float currentTextHeight = ((Float)0.0);
HXLINE( 588)		this->textWidth = (int)0;
HXLINE( 589)		this->textHeight = (int)0;
HXLINE( 590)		this->numLines = (int)1;
HXLINE( 591)		this->maxScrollH = (int)0;
HXLINE( 593)		{
HXLINE( 593)			int _g = (int)0;
HXDLIN( 593)			 ::openfl::_Vector::ObjectVector _g1 = this->layoutGroups;
HXDLIN( 593)			while((_g < _g1->get_length())){
HXLINE( 593)				 ::openfl::_internal::text::TextLayoutGroup group = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 593)				_g = (_g + (int)1);
HXLINE( 595)				while(true){
HXLINE( 595)					int group1 = group->lineIndex;
HXDLIN( 595)					if (!((group1 > (this->numLines - (int)1)))) {
HXLINE( 595)						goto _hx_goto_9;
            					}
HXLINE( 597)					this->lineAscents->push(currentLineAscent);
HXLINE( 598)					this->lineDescents->push(currentLineDescent);
HXLINE( 599)					{
HXLINE( 599)						Float _hx_tmp;
HXDLIN( 599)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 599)							_hx_tmp = currentLineLeading;
            						}
            						else {
HXLINE( 599)							_hx_tmp = (int)0;
            						}
HXDLIN( 599)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 600)					this->lineHeights->push(currentLineHeight);
HXLINE( 601)					this->lineWidths->push(currentLineWidth);
HXLINE( 603)					currentLineAscent = (int)0;
HXLINE( 604)					currentLineDescent = (int)0;
HXLINE( 605)					currentLineLeading = null();
HXLINE( 606)					currentLineHeight = (int)0;
HXLINE( 607)					currentLineWidth = (int)0;
HXLINE( 609)					this->numLines++;
            				}
            				_hx_goto_9:;
HXLINE( 612)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 613)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 615)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 617)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 621)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(currentLineLeading,group->leading));
            				}
HXLINE( 624)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 625)				currentLineWidth = ((group->offsetX - (int)2) + group->width);
HXLINE( 627)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 629)					this->textWidth = currentLineWidth;
            				}
HXLINE( 632)				currentTextHeight = (((group->offsetY - (int)2) + group->ascent) + group->descent);
HXLINE( 634)				if ((currentTextHeight > this->textHeight)) {
HXLINE( 636)					this->textHeight = currentTextHeight;
            				}
            			}
            		}
HXLINE( 640)		bool _hx_tmp1;
HXDLIN( 640)		bool _hx_tmp2;
HXDLIN( 640)		if ((this->textHeight == (int)0)) {
HXLINE( 640)			_hx_tmp2 = hx::IsNotNull( this->textField );
            		}
            		else {
HXLINE( 640)			_hx_tmp2 = false;
            		}
HXDLIN( 640)		if (_hx_tmp2) {
HXLINE( 640)			_hx_tmp1 = hx::IsEq( this->textField->get_type(),(int)1 );
            		}
            		else {
HXLINE( 640)			_hx_tmp1 = false;
            		}
HXDLIN( 640)		if (_hx_tmp1) {
HXLINE( 642)			 ::openfl::text::TextFormat currentFormat = this->textField->_hx___textFormat;
HXLINE( 643)			Float ascent;
HXDLIN( 643)			Float descent;
HXDLIN( 643)			 ::Dynamic leading;
HXDLIN( 643)			Float heightValue;
HXLINE( 645)			 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXLINE( 647)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE( 649)				ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXLINE( 650)				descent = (currentFormat->size * currentFormat->_hx___descent);
            			}
            			else {
HXLINE( 652)				bool _hx_tmp3;
HXDLIN( 652)				if (hx::IsNotNull( font )) {
HXLINE( 652)					_hx_tmp3 = (font->unitsPerEM != (int)0);
            				}
            				else {
HXLINE( 652)					_hx_tmp3 = false;
            				}
HXDLIN( 652)				if (_hx_tmp3) {
HXLINE( 655)					ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXLINE( 656)					descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            				}
            				else {
HXLINE( 664)					ascent = currentFormat->size;
HXLINE( 665)					descent = (currentFormat->size * ((Float)0.185));
            				}
            			}
HXLINE( 668)			leading = currentFormat->leading;
HXLINE( 670)			heightValue = ((ascent + descent) + leading);
HXLINE( 672)			currentLineAscent = ascent;
HXLINE( 673)			currentLineDescent = descent;
HXLINE( 674)			currentLineLeading = leading;
HXLINE( 676)			currentTextHeight = (ascent + descent);
HXLINE( 677)			this->textHeight = currentTextHeight;
            		}
HXLINE( 680)		this->lineAscents->push(currentLineAscent);
HXLINE( 681)		this->lineDescents->push(currentLineDescent);
HXLINE( 682)		{
HXLINE( 682)			Float _hx_tmp4;
HXDLIN( 682)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 682)				_hx_tmp4 = currentLineLeading;
            			}
            			else {
HXLINE( 682)				_hx_tmp4 = (int)0;
            			}
HXDLIN( 682)			this->lineLeadings->push(_hx_tmp4);
            		}
HXLINE( 683)		this->lineHeights->push(currentLineHeight);
HXLINE( 684)		this->lineWidths->push(currentLineWidth);
HXLINE( 686)		if ((this->numLines == (int)1)) {
HXLINE( 688)			if (hx::IsGreater( currentLineLeading,(int)0 )) {
HXLINE( 690)				 ::openfl::_internal::text::TextEngine _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 690)				_hx_tmp5->textHeight = (_hx_tmp5->textHeight + currentLineLeading);
            			}
            		}
HXLINE( 694)		if ((this->layoutGroups->get_length() > (int)0)) {
HXLINE( 696)			::Dynamic this1 = this->layoutGroups;
HXDLIN( 696)			 ::openfl::_internal::text::TextLayoutGroup group2 = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE( 698)			bool _hx_tmp6;
HXDLIN( 698)			if (hx::IsNotNull( group2 )) {
HXLINE( 698)				_hx_tmp6 = (group2->startIndex == group2->endIndex);
            			}
            			else {
HXLINE( 698)				_hx_tmp6 = false;
            			}
HXDLIN( 698)			if (_hx_tmp6) {
HXLINE( 700)				 ::openfl::_internal::text::TextEngine _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 700)				_hx_tmp7->textHeight = (_hx_tmp7->textHeight - currentLineHeight);
            			}
            		}
HXLINE( 704)		if (hx::IsNotEq( this->autoSize,(int)2 )) {
HXLINE( 706)			 ::Dynamic _g2 = this->autoSize;
HXDLIN( 706)			 ::Dynamic _hx_switch_0 = _g2;
            			if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)3) ){
HXLINE( 709)				if (!(this->wordWrap)) {
HXLINE( 711)					this->width = (this->textWidth + (int)4);
            				}
HXLINE( 714)				this->height = (this->textHeight + (int)4);
HXLINE( 715)				this->bottomScrollV = this->numLines;
HXLINE( 708)				goto _hx_goto_10;
            			}
            			/* default */{
            			}
            			_hx_goto_10:;
            		}
HXLINE( 721)		Float _hx_tmp8 = this->textWidth;
HXDLIN( 721)		if ((_hx_tmp8 > (this->width - (int)4))) {
HXLINE( 723)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + (int)4));
            		}
            		else {
HXLINE( 727)			this->maxScrollH = (int)0;
            		}
HXLINE( 730)		if ((this->scrollH > this->maxScrollH)) {
HXLINE( 730)			this->scrollH = this->maxScrollH;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_734_getLayoutGroups)
HXLINE( 733)		 ::openfl::_internal::text::TextEngine _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 735)		this->layoutGroups->set_length((int)0);
HXLINE( 737)		bool _hx_tmp;
HXDLIN( 737)		if (hx::IsNotNull( this->text )) {
HXLINE( 737)			_hx_tmp = ::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->text,HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 737)			_hx_tmp = true;
            		}
HXDLIN( 737)		if (_hx_tmp) {
HXLINE( 737)			return;
            		}
HXLINE( 739)		int rangeIndex = (int)-1;
HXLINE( 740)		 ::openfl::_internal::text::TextFormatRange formatRange = null();
HXLINE( 741)		 ::lime::text::Font font = null();
HXLINE( 743)		 ::openfl::text::TextFormat currentFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 745)		int leading = (int)0;
HXLINE( 746)		Float ascent = ((Float)0.0);
HXDLIN( 746)		Float maxAscent = ((Float)0.0);
HXLINE( 747)		Float descent = ((Float)0.0);
HXLINE( 749)		 ::openfl::_internal::text::TextLayoutGroup layoutGroup = null();
HXDLIN( 749)		::Array< ::Dynamic> positions = null();
HXLINE( 750)		Float widthValue = ((Float)0.0);
HXDLIN( 750)		int heightValue = (int)0;
HXDLIN( 750)		int maxHeightValue = (int)0;
HXLINE( 751)		int previousSpaceIndex = (int)-2;
HXLINE( 752)		int previousBreakIndex = (int)-1;
HXLINE( 753)		int spaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),null());
HXLINE( 754)		int breakIndex = this->getLineBreakIndex(null());
HXLINE( 756)		Float offsetX = ((Float)2.0);
HXLINE( 757)		Float offsetY = ((Float)2.0);
HXLINE( 758)		int textIndex = (int)0;
HXLINE( 759)		int lineIndex = (int)0;
HXLINE( 760)		 ::openfl::text::TextFormat lineFormat = null();
HXLINE(1238)		if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1238)			rangeIndex = (rangeIndex + (int)1);
HXDLIN(1238)			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1238)			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1238)			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            		}
HXLINE(1239)		{
HXLINE(1239)			if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1239)				ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1239)				descent = (currentFormat->size * currentFormat->_hx___descent);
            			}
            			else {
HXLINE(1239)				bool _hx_tmp1;
HXDLIN(1239)				if (hx::IsNotNull( font )) {
HXLINE(1239)					_hx_tmp1 = (font->unitsPerEM != (int)0);
            				}
            				else {
HXLINE(1239)					_hx_tmp1 = false;
            				}
HXDLIN(1239)				if (_hx_tmp1) {
HXLINE(1239)					ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1239)					descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            				}
            				else {
HXLINE(1239)					ascent = currentFormat->size;
HXDLIN(1239)					descent = (currentFormat->size * ((Float)0.185));
            				}
            			}
HXDLIN(1239)			leading = currentFormat->leading;
HXDLIN(1239)			heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1239)			if ((heightValue > maxHeightValue)) {
HXLINE(1239)				maxHeightValue = heightValue;
            			}
HXDLIN(1239)			if ((ascent > maxAscent)) {
HXLINE(1239)				maxAscent = ascent;
            			}
            		}
HXLINE(1241)		lineFormat = formatRange->format;
HXLINE(1242)		bool wrap;
HXLINE(1243)		int maxLoops = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) + (int)1);
HXLINE(1246)		while((textIndex < maxLoops)){
HXLINE(1248)			bool _hx_tmp2;
HXDLIN(1248)			if ((breakIndex > (int)-1)) {
HXLINE(1248)				if ((spaceIndex != (int)-1)) {
HXLINE(1248)					_hx_tmp2 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE(1248)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE(1248)				_hx_tmp2 = false;
            			}
HXDLIN(1248)			if (_hx_tmp2) {
HXLINE(1252)				if ((textIndex <= breakIndex)) {
HXLINE(1254)					if ((breakIndex <= formatRange->end)) {
HXLINE(1254)						::String text = _gthis->text;
HXDLIN(1254)						Float letterSpacing = ((Float)0.0);
HXDLIN(1254)						if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1254)							letterSpacing = formatRange->format->letterSpacing;
            						}
HXDLIN(1254)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1254)							_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN(1254)						Float width = ((Float)0.0);
HXDLIN(1254)						_gthis->_hx___textLayout->set_text(null());
HXDLIN(1254)						_gthis->_hx___textLayout->set_font(font);
HXDLIN(1254)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1254)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN(1254)						_gthis->_hx___textLayout->letterSpacing = letterSpacing;
HXDLIN(1254)						bool positions1;
HXDLIN(1254)						if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1254)							positions1 = (_gthis->sharpness < (int)400);
            						}
            						else {
HXLINE(1254)							positions1 = true;
            						}
HXDLIN(1254)						_gthis->_hx___textLayout->autoHint = positions1;
HXDLIN(1254)						 ::openfl::_internal::text::TextLayout _gthis1 = _gthis->_hx___textLayout;
HXDLIN(1254)						_gthis1->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text,textIndex,breakIndex));
HXDLIN(1254)						positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1254)						Float width1 = ((Float)0.0);
HXDLIN(1254)						{
HXLINE(1254)							int _g = (int)0;
HXDLIN(1254)							while((_g < positions->length)){
HXLINE(1254)								 ::openfl::_internal::text::GlyphPosition position = positions->__get(_g).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1254)								_g = (_g + (int)1);
HXDLIN(1254)								width1 = (width1 + position->advance->x);
            							}
            						}
HXDLIN(1254)						widthValue = width1;
            					}
            					else {
HXLINE(1254)						int tempIndex = textIndex;
HXDLIN(1254)						int tempRangeEnd = formatRange->end;
HXDLIN(1254)						int countRanges = (int)0;
HXDLIN(1254)						positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1254)						widthValue = (int)0;
HXDLIN(1254)						while(true){
HXLINE(1254)							if ((tempIndex != tempRangeEnd)) {
HXLINE(1254)								::String text1 = _gthis->text;
HXDLIN(1254)								Float letterSpacing1 = ((Float)0.0);
HXDLIN(1254)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1254)									letterSpacing1 = formatRange->format->letterSpacing;
            								}
HXDLIN(1254)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1254)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1254)								Float width2 = ((Float)0.0);
HXDLIN(1254)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1254)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1254)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1254)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1254)								_gthis->_hx___textLayout->letterSpacing = letterSpacing1;
HXDLIN(1254)								bool _hx_tmp3;
HXDLIN(1254)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1254)									_hx_tmp3 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1254)									_hx_tmp3 = true;
            								}
HXDLIN(1254)								_gthis->_hx___textLayout->autoHint = _hx_tmp3;
HXDLIN(1254)								 ::openfl::_internal::text::TextLayout _gthis2 = _gthis->_hx___textLayout;
HXDLIN(1254)								_gthis2->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text1,tempIndex,tempRangeEnd));
HXDLIN(1254)								::Array< ::Dynamic> tempPositions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1254)								positions = positions->concat(tempPositions);
            							}
HXDLIN(1254)							if ((tempRangeEnd != breakIndex)) {
HXLINE(1254)								bool _hx_tmp4;
HXDLIN(1254)								if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1254)									rangeIndex = (rangeIndex + (int)1);
HXDLIN(1254)									formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1254)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1254)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1254)									_hx_tmp4 = true;
            								}
            								else {
HXLINE(1254)									_hx_tmp4 = false;
            								}
HXDLIN(1254)								if (!(_hx_tmp4)) {
HXLINE(1254)									::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1254)									goto _hx_goto_14;
            								}
HXDLIN(1254)								tempIndex = tempRangeEnd;
HXDLIN(1254)								if ((breakIndex < formatRange->end)) {
HXLINE(1254)									tempRangeEnd = breakIndex;
            								}
            								else {
HXLINE(1254)									tempRangeEnd = formatRange->end;
            								}
HXDLIN(1254)								countRanges = (countRanges + (int)1);
            							}
            							else {
HXLINE(1254)								Float width3 = ((Float)0.0);
HXDLIN(1254)								{
HXLINE(1254)									int _g1 = (int)0;
HXDLIN(1254)									while((_g1 < positions->length)){
HXLINE(1254)										 ::openfl::_internal::text::GlyphPosition position1 = positions->__get(_g1).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1254)										_g1 = (_g1 + (int)1);
HXDLIN(1254)										width3 = (width3 + position1->advance->x);
            									}
            								}
HXDLIN(1254)								widthValue = width3;
HXDLIN(1254)								goto _hx_goto_14;
            							}
            						}
            						_hx_goto_14:;
HXDLIN(1254)						rangeIndex = (rangeIndex - (countRanges + (int)1));
HXDLIN(1254)						if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1254)							rangeIndex = (rangeIndex + (int)1);
HXDLIN(1254)							formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1254)							currentFormat->_hx___merge(formatRange->format);
HXDLIN(1254)							font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            						}
            					}
HXLINE(1255)					{
HXLINE(1255)						bool _hx_tmp5;
HXDLIN(1255)						if ((_gthis->width >= (int)4)) {
HXLINE(1255)							_hx_tmp5 = _gthis->wordWrap;
            						}
            						else {
HXLINE(1255)							_hx_tmp5 = false;
            						}
HXDLIN(1255)						if (_hx_tmp5) {
HXLINE(1255)							::Array< ::Dynamic> remainingPositions = positions;
HXDLIN(1255)							int i;
HXDLIN(1255)							int bufferCount;
HXDLIN(1255)							int placeIndex;
HXDLIN(1255)							Float positionWidth;
HXDLIN(1255)							 ::openfl::_internal::text::GlyphPosition currentPosition;
HXDLIN(1255)							Float width4 = ((Float)0.0);
HXDLIN(1255)							{
HXLINE(1255)								int _g2 = (int)0;
HXDLIN(1255)								while((_g2 < remainingPositions->length)){
HXLINE(1255)									 ::openfl::_internal::text::GlyphPosition position2 = remainingPositions->__get(_g2).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)									_g2 = (_g2 + (int)1);
HXDLIN(1255)									width4 = (width4 + position2->advance->x);
            								}
            							}
HXDLIN(1255)							Float tempWidth = width4;
HXDLIN(1255)							while(((offsetX + tempWidth) > (_gthis->width - (int)2))){
HXLINE(1255)								bufferCount = (int)0;
HXDLIN(1255)								i = bufferCount;
HXDLIN(1255)								positionWidth = ((Float)0.0);
HXDLIN(1255)								while(((offsetX + positionWidth) < (_gthis->width - (int)2))){
HXLINE(1255)									currentPosition = remainingPositions->__get(i).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)									if ((currentPosition->advance->x == ((Float)0.0))) {
HXLINE(1255)										i = (i + (int)1);
HXDLIN(1255)										bufferCount = (bufferCount + (int)1);
            									}
            									else {
HXLINE(1255)										positionWidth = (positionWidth + currentPosition->advance->x);
HXDLIN(1255)										i = (i + (int)1);
            									}
            								}
HXDLIN(1255)								if ((positionWidth == ((Float)0.0))) {
HXLINE(1255)									goto _hx_goto_17;
            								}
            								else {
HXLINE(1255)									bool _hx_tmp6;
HXDLIN(1255)									if ((i < (int)2)) {
HXLINE(1255)										_hx_tmp6 = ((positionWidth + offsetX) > (_gthis->width - (int)2));
            									}
            									else {
HXLINE(1255)										_hx_tmp6 = false;
            									}
HXDLIN(1255)									if (_hx_tmp6) {
HXLINE(1255)										if ((((textIndex + i) - bufferCount) == breakIndex)) {
HXLINE(1255)											goto _hx_goto_17;
            										}
            									}
            									else {
HXLINE(1255)										while(((offsetX + positionWidth) > (_gthis->width - (int)2))){
HXLINE(1255)											i = (i - (int)1);
HXDLIN(1255)											if (((i - bufferCount) > (int)0)) {
HXLINE(1255)												{
HXLINE(1255)													int endIndex = ((textIndex + i) - bufferCount);
HXDLIN(1255)													if ((endIndex <= formatRange->end)) {
HXLINE(1255)														::String text2 = _gthis->text;
HXDLIN(1255)														Float letterSpacing2 = ((Float)0.0);
HXDLIN(1255)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)															letterSpacing2 = formatRange->format->letterSpacing;
            														}
HXDLIN(1255)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1255)														Float width5 = ((Float)0.0);
HXDLIN(1255)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1255)														_gthis->_hx___textLayout->letterSpacing = letterSpacing2;
HXDLIN(1255)														bool positions2;
HXDLIN(1255)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)															positions2 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1255)															positions2 = true;
            														}
HXDLIN(1255)														_gthis->_hx___textLayout->autoHint = positions2;
HXDLIN(1255)														 ::openfl::_internal::text::TextLayout _gthis3 = _gthis->_hx___textLayout;
HXDLIN(1255)														_gthis3->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text2,textIndex,endIndex));
HXDLIN(1255)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)														Float width6 = ((Float)0.0);
HXDLIN(1255)														{
HXLINE(1255)															int _g3 = (int)0;
HXDLIN(1255)															while((_g3 < positions->length)){
HXLINE(1255)																 ::openfl::_internal::text::GlyphPosition position3 = positions->__get(_g3).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)																_g3 = (_g3 + (int)1);
HXDLIN(1255)																width6 = (width6 + position3->advance->x);
            															}
            														}
HXDLIN(1255)														widthValue = width6;
            													}
            													else {
HXLINE(1255)														int tempIndex1 = textIndex;
HXDLIN(1255)														int tempRangeEnd1 = formatRange->end;
HXDLIN(1255)														int countRanges1 = (int)0;
HXDLIN(1255)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1255)														widthValue = (int)0;
HXDLIN(1255)														while(true){
HXLINE(1255)															if ((tempIndex1 != tempRangeEnd1)) {
HXLINE(1255)																::String text3 = _gthis->text;
HXDLIN(1255)																Float letterSpacing3 = ((Float)0.0);
HXDLIN(1255)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)																	letterSpacing3 = formatRange->format->letterSpacing;
            																}
HXDLIN(1255)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1255)																Float width7 = ((Float)0.0);
HXDLIN(1255)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)																	_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																}
HXDLIN(1255)																_gthis->_hx___textLayout->letterSpacing = letterSpacing3;
HXDLIN(1255)																bool _hx_tmp7;
HXDLIN(1255)																if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)																	_hx_tmp7 = (_gthis->sharpness < (int)400);
            																}
            																else {
HXLINE(1255)																	_hx_tmp7 = true;
            																}
HXDLIN(1255)																_gthis->_hx___textLayout->autoHint = _hx_tmp7;
HXDLIN(1255)																 ::openfl::_internal::text::TextLayout _gthis4 = _gthis->_hx___textLayout;
HXDLIN(1255)																_gthis4->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text3,tempIndex1,tempRangeEnd1));
HXDLIN(1255)																::Array< ::Dynamic> tempPositions1 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)																positions = positions->concat(tempPositions1);
            															}
HXDLIN(1255)															if ((tempRangeEnd1 != endIndex)) {
HXLINE(1255)																bool _hx_tmp8;
HXDLIN(1255)																if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)																	rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)																	formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1255)																	_hx_tmp8 = true;
            																}
            																else {
HXLINE(1255)																	_hx_tmp8 = false;
            																}
HXDLIN(1255)																if (!(_hx_tmp8)) {
HXLINE(1255)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1255)																	goto _hx_goto_21;
            																}
HXDLIN(1255)																tempIndex1 = tempRangeEnd1;
HXDLIN(1255)																if ((endIndex < formatRange->end)) {
HXLINE(1255)																	tempRangeEnd1 = endIndex;
            																}
            																else {
HXLINE(1255)																	tempRangeEnd1 = formatRange->end;
            																}
HXDLIN(1255)																countRanges1 = (countRanges1 + (int)1);
            															}
            															else {
HXLINE(1255)																Float width8 = ((Float)0.0);
HXDLIN(1255)																{
HXLINE(1255)																	int _g4 = (int)0;
HXDLIN(1255)																	while((_g4 < positions->length)){
HXLINE(1255)																		 ::openfl::_internal::text::GlyphPosition position4 = positions->__get(_g4).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)																		_g4 = (_g4 + (int)1);
HXDLIN(1255)																		width8 = (width8 + position4->advance->x);
            																	}
            																}
HXDLIN(1255)																widthValue = width8;
HXDLIN(1255)																goto _hx_goto_21;
            															}
            														}
            														_hx_goto_21:;
HXDLIN(1255)														rangeIndex = (rangeIndex - (countRanges1 + (int)1));
HXDLIN(1255)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXDLIN(1255)												positionWidth = widthValue;
            											}
            											else {
HXLINE(1255)												i = (int)1;
HXDLIN(1255)												bufferCount = (int)0;
HXDLIN(1255)												{
HXLINE(1255)													int endIndex1 = (textIndex + (int)1);
HXDLIN(1255)													if ((endIndex1 <= formatRange->end)) {
HXLINE(1255)														::String text4 = _gthis->text;
HXDLIN(1255)														Float letterSpacing4 = ((Float)0.0);
HXDLIN(1255)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)															letterSpacing4 = formatRange->format->letterSpacing;
            														}
HXDLIN(1255)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1255)														Float width9 = ((Float)0.0);
HXDLIN(1255)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1255)														_gthis->_hx___textLayout->letterSpacing = letterSpacing4;
HXDLIN(1255)														bool positions3;
HXDLIN(1255)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)															positions3 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1255)															positions3 = true;
            														}
HXDLIN(1255)														_gthis->_hx___textLayout->autoHint = positions3;
HXDLIN(1255)														 ::openfl::_internal::text::TextLayout _gthis5 = _gthis->_hx___textLayout;
HXDLIN(1255)														_gthis5->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text4,textIndex,endIndex1));
HXDLIN(1255)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)														Float width10 = ((Float)0.0);
HXDLIN(1255)														{
HXLINE(1255)															int _g5 = (int)0;
HXDLIN(1255)															while((_g5 < positions->length)){
HXLINE(1255)																 ::openfl::_internal::text::GlyphPosition position5 = positions->__get(_g5).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)																_g5 = (_g5 + (int)1);
HXDLIN(1255)																width10 = (width10 + position5->advance->x);
            															}
            														}
HXDLIN(1255)														widthValue = width10;
            													}
            													else {
HXLINE(1255)														int tempIndex2 = textIndex;
HXDLIN(1255)														int tempRangeEnd2 = formatRange->end;
HXDLIN(1255)														int countRanges2 = (int)0;
HXDLIN(1255)														positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1255)														widthValue = (int)0;
HXDLIN(1255)														while(true){
HXLINE(1255)															if ((tempIndex2 != tempRangeEnd2)) {
HXLINE(1255)																::String text5 = _gthis->text;
HXDLIN(1255)																Float letterSpacing5 = ((Float)0.0);
HXDLIN(1255)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)																	letterSpacing5 = formatRange->format->letterSpacing;
            																}
HXDLIN(1255)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1255)																Float width11 = ((Float)0.0);
HXDLIN(1255)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)																	_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																}
HXDLIN(1255)																_gthis->_hx___textLayout->letterSpacing = letterSpacing5;
HXDLIN(1255)																bool _hx_tmp9;
HXDLIN(1255)																if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)																	_hx_tmp9 = (_gthis->sharpness < (int)400);
            																}
            																else {
HXLINE(1255)																	_hx_tmp9 = true;
            																}
HXDLIN(1255)																_gthis->_hx___textLayout->autoHint = _hx_tmp9;
HXDLIN(1255)																 ::openfl::_internal::text::TextLayout _gthis6 = _gthis->_hx___textLayout;
HXDLIN(1255)																_gthis6->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text5,tempIndex2,tempRangeEnd2));
HXDLIN(1255)																::Array< ::Dynamic> tempPositions2 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)																positions = positions->concat(tempPositions2);
            															}
HXDLIN(1255)															if ((tempRangeEnd2 != endIndex1)) {
HXLINE(1255)																bool _hx_tmp10;
HXDLIN(1255)																if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)																	rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)																	formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1255)																	_hx_tmp10 = true;
            																}
            																else {
HXLINE(1255)																	_hx_tmp10 = false;
            																}
HXDLIN(1255)																if (!(_hx_tmp10)) {
HXLINE(1255)																	::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1255)																	goto _hx_goto_24;
            																}
HXDLIN(1255)																tempIndex2 = tempRangeEnd2;
HXDLIN(1255)																if ((endIndex1 < formatRange->end)) {
HXLINE(1255)																	tempRangeEnd2 = endIndex1;
            																}
            																else {
HXLINE(1255)																	tempRangeEnd2 = formatRange->end;
            																}
HXDLIN(1255)																countRanges2 = (countRanges2 + (int)1);
            															}
            															else {
HXLINE(1255)																Float width12 = ((Float)0.0);
HXDLIN(1255)																{
HXLINE(1255)																	int _g6 = (int)0;
HXDLIN(1255)																	while((_g6 < positions->length)){
HXLINE(1255)																		 ::openfl::_internal::text::GlyphPosition position6 = positions->__get(_g6).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)																		_g6 = (_g6 + (int)1);
HXDLIN(1255)																		width12 = (width12 + position6->advance->x);
            																	}
            																}
HXDLIN(1255)																widthValue = width12;
HXDLIN(1255)																goto _hx_goto_24;
            															}
            														}
            														_hx_goto_24:;
HXDLIN(1255)														rangeIndex = (rangeIndex - (countRanges2 + (int)1));
HXDLIN(1255)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
            													}
            												}
HXDLIN(1255)												positionWidth = (int)0;
            											}
            										}
            									}
            								}
HXDLIN(1255)								placeIndex = ((textIndex + i) - bufferCount);
HXDLIN(1255)								{
HXLINE(1255)									if ((placeIndex <= formatRange->end)) {
HXLINE(1255)										::String text6 = _gthis->text;
HXDLIN(1255)										Float letterSpacing6 = ((Float)0.0);
HXDLIN(1255)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)											letterSpacing6 = formatRange->format->letterSpacing;
            										}
HXDLIN(1255)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1255)										Float width13 = ((Float)0.0);
HXDLIN(1255)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1255)										_gthis->_hx___textLayout->letterSpacing = letterSpacing6;
HXDLIN(1255)										bool positions4;
HXDLIN(1255)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)											positions4 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1255)											positions4 = true;
            										}
HXDLIN(1255)										_gthis->_hx___textLayout->autoHint = positions4;
HXDLIN(1255)										 ::openfl::_internal::text::TextLayout _gthis7 = _gthis->_hx___textLayout;
HXDLIN(1255)										_gthis7->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text6,textIndex,placeIndex));
HXDLIN(1255)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)										Float width14 = ((Float)0.0);
HXDLIN(1255)										{
HXLINE(1255)											int _g7 = (int)0;
HXDLIN(1255)											while((_g7 < positions->length)){
HXLINE(1255)												 ::openfl::_internal::text::GlyphPosition position7 = positions->__get(_g7).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)												_g7 = (_g7 + (int)1);
HXDLIN(1255)												width14 = (width14 + position7->advance->x);
            											}
            										}
HXDLIN(1255)										widthValue = width14;
HXDLIN(1255)										bool _hx_tmp11;
HXDLIN(1255)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1255)											_hx_tmp11 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1255)											_hx_tmp11 = true;
            										}
HXDLIN(1255)										if (_hx_tmp11) {
HXLINE(1255)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex);
HXDLIN(1255)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1255)											layoutGroup->format = formatRange->format;
HXDLIN(1255)											layoutGroup->startIndex = textIndex;
HXDLIN(1255)											layoutGroup->endIndex = placeIndex;
            										}
HXDLIN(1255)										layoutGroup->positions = positions;
HXDLIN(1255)										layoutGroup->offsetX = offsetX;
HXDLIN(1255)										layoutGroup->ascent = ascent;
HXDLIN(1255)										layoutGroup->descent = descent;
HXDLIN(1255)										layoutGroup->leading = leading;
HXDLIN(1255)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1255)										layoutGroup->offsetY = offsetY;
HXDLIN(1255)										layoutGroup->width = widthValue;
HXDLIN(1255)										layoutGroup->height = heightValue;
HXDLIN(1255)										offsetX = (offsetX + widthValue);
HXDLIN(1255)										if ((placeIndex == formatRange->end)) {
HXLINE(1255)											layoutGroup = null();
HXDLIN(1255)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1255)											{
HXLINE(1255)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1255)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1255)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1255)													bool _hx_tmp12;
HXDLIN(1255)													if (hx::IsNotNull( font )) {
HXLINE(1255)														_hx_tmp12 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1255)														_hx_tmp12 = false;
            													}
HXDLIN(1255)													if (_hx_tmp12) {
HXLINE(1255)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1255)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1255)														ascent = currentFormat->size;
HXDLIN(1255)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1255)												leading = currentFormat->leading;
HXDLIN(1255)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1255)												if ((heightValue > maxHeightValue)) {
HXLINE(1255)													maxHeightValue = heightValue;
            												}
HXDLIN(1255)												if ((ascent > maxAscent)) {
HXLINE(1255)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1255)										while(true){
HXLINE(1255)											int tempRangeEnd3;
HXDLIN(1255)											if ((placeIndex < formatRange->end)) {
HXLINE(1255)												tempRangeEnd3 = placeIndex;
            											}
            											else {
HXLINE(1255)												tempRangeEnd3 = formatRange->end;
            											}
HXDLIN(1255)											if ((textIndex != tempRangeEnd3)) {
HXLINE(1255)												::String text7 = _gthis->text;
HXDLIN(1255)												Float letterSpacing7 = ((Float)0.0);
HXDLIN(1255)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)													letterSpacing7 = formatRange->format->letterSpacing;
            												}
HXDLIN(1255)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1255)												Float width15 = ((Float)0.0);
HXDLIN(1255)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1255)												_gthis->_hx___textLayout->letterSpacing = letterSpacing7;
HXDLIN(1255)												bool positions5;
HXDLIN(1255)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)													positions5 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1255)													positions5 = true;
            												}
HXDLIN(1255)												_gthis->_hx___textLayout->autoHint = positions5;
HXDLIN(1255)												 ::openfl::_internal::text::TextLayout _gthis8 = _gthis->_hx___textLayout;
HXDLIN(1255)												_gthis8->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text7,textIndex,tempRangeEnd3));
HXDLIN(1255)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)												Float width16 = ((Float)0.0);
HXDLIN(1255)												{
HXLINE(1255)													int _g8 = (int)0;
HXDLIN(1255)													while((_g8 < positions->length)){
HXLINE(1255)														 ::openfl::_internal::text::GlyphPosition position8 = positions->__get(_g8).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)														_g8 = (_g8 + (int)1);
HXDLIN(1255)														width16 = (width16 + position8->advance->x);
            													}
            												}
HXDLIN(1255)												widthValue = width16;
HXDLIN(1255)												bool _hx_tmp13;
HXDLIN(1255)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1255)													_hx_tmp13 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1255)													_hx_tmp13 = true;
            												}
HXDLIN(1255)												if (_hx_tmp13) {
HXLINE(1255)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd3);
HXDLIN(1255)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1255)													layoutGroup->format = formatRange->format;
HXDLIN(1255)													layoutGroup->startIndex = textIndex;
HXDLIN(1255)													layoutGroup->endIndex = tempRangeEnd3;
            												}
HXDLIN(1255)												layoutGroup->positions = positions;
HXDLIN(1255)												layoutGroup->offsetX = offsetX;
HXDLIN(1255)												layoutGroup->ascent = ascent;
HXDLIN(1255)												layoutGroup->descent = descent;
HXDLIN(1255)												layoutGroup->leading = leading;
HXDLIN(1255)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1255)												layoutGroup->offsetY = offsetY;
HXDLIN(1255)												layoutGroup->width = widthValue;
HXDLIN(1255)												layoutGroup->height = heightValue;
HXDLIN(1255)												offsetX = (offsetX + widthValue);
HXDLIN(1255)												textIndex = tempRangeEnd3;
            											}
HXDLIN(1255)											if ((tempRangeEnd3 == formatRange->end)) {
HXLINE(1255)												layoutGroup = null();
            											}
HXDLIN(1255)											if ((tempRangeEnd3 == placeIndex)) {
HXLINE(1255)												goto _hx_goto_27;
            											}
HXDLIN(1255)											bool _hx_tmp14;
HXDLIN(1255)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1255)												_hx_tmp14 = true;
            											}
            											else {
HXLINE(1255)												_hx_tmp14 = false;
            											}
HXDLIN(1255)											if (!(_hx_tmp14)) {
HXLINE(1255)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1255)												goto _hx_goto_27;
            											}
HXDLIN(1255)											{
HXLINE(1255)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1255)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1255)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1255)													bool _hx_tmp15;
HXDLIN(1255)													if (hx::IsNotNull( font )) {
HXLINE(1255)														_hx_tmp15 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1255)														_hx_tmp15 = false;
            													}
HXDLIN(1255)													if (_hx_tmp15) {
HXLINE(1255)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1255)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1255)														ascent = currentFormat->size;
HXDLIN(1255)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1255)												leading = currentFormat->leading;
HXDLIN(1255)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1255)												if ((heightValue > maxHeightValue)) {
HXLINE(1255)													maxHeightValue = heightValue;
            												}
HXDLIN(1255)												if ((ascent > maxAscent)) {
HXLINE(1255)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_27:;
            									}
HXDLIN(1255)									textIndex = placeIndex;
            								}
HXDLIN(1255)								{
HXLINE(1255)									{
HXLINE(1255)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1255)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1255)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1255)											bool _hx_tmp16;
HXDLIN(1255)											if (hx::IsNotNull( font )) {
HXLINE(1255)												_hx_tmp16 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1255)												_hx_tmp16 = false;
            											}
HXDLIN(1255)											if (_hx_tmp16) {
HXLINE(1255)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1255)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1255)												ascent = currentFormat->size;
HXDLIN(1255)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1255)										leading = currentFormat->leading;
HXDLIN(1255)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1255)										if ((heightValue > maxHeightValue)) {
HXLINE(1255)											maxHeightValue = heightValue;
            										}
HXDLIN(1255)										if ((ascent > maxAscent)) {
HXLINE(1255)											maxAscent = ascent;
            										}
            									}
HXDLIN(1255)									int i1 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1255)									while(true){
HXLINE(1255)										i1 = (i1 - (int)1);
HXDLIN(1255)										if (!((i1 > (int)-1))) {
HXLINE(1255)											goto _hx_goto_29;
            										}
HXDLIN(1255)										 ::openfl::_internal::text::TextLayoutGroup lg = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i1)) );
HXDLIN(1255)										if ((lg->lineIndex < lineIndex)) {
HXLINE(1255)											goto _hx_goto_29;
            										}
HXDLIN(1255)										if ((lg->lineIndex > lineIndex)) {
HXLINE(1255)											continue;
            										}
HXDLIN(1255)										lg->ascent = maxAscent;
HXDLIN(1255)										lg->height = maxHeightValue;
            									}
            									_hx_goto_29:;
HXDLIN(1255)									offsetY = (offsetY + maxHeightValue);
HXDLIN(1255)									maxAscent = ((Float)0.0);
HXDLIN(1255)									maxHeightValue = (int)0;
HXDLIN(1255)									lineIndex = (lineIndex + (int)1);
HXDLIN(1255)									offsetX = (int)2;
            								}
HXDLIN(1255)								if ((breakIndex <= formatRange->end)) {
HXLINE(1255)									::String text8 = _gthis->text;
HXDLIN(1255)									Float letterSpacing8 = ((Float)0.0);
HXDLIN(1255)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)										letterSpacing8 = formatRange->format->letterSpacing;
            									}
HXDLIN(1255)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1255)									Float width17 = ((Float)0.0);
HXDLIN(1255)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1255)									_gthis->_hx___textLayout->letterSpacing = letterSpacing8;
HXDLIN(1255)									bool positions6;
HXDLIN(1255)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)										positions6 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1255)										positions6 = true;
            									}
HXDLIN(1255)									_gthis->_hx___textLayout->autoHint = positions6;
HXDLIN(1255)									 ::openfl::_internal::text::TextLayout _gthis9 = _gthis->_hx___textLayout;
HXDLIN(1255)									_gthis9->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text8,placeIndex,breakIndex));
HXDLIN(1255)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)									Float width18 = ((Float)0.0);
HXDLIN(1255)									{
HXLINE(1255)										int _g9 = (int)0;
HXDLIN(1255)										while((_g9 < positions->length)){
HXLINE(1255)											 ::openfl::_internal::text::GlyphPosition position9 = positions->__get(_g9).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)											_g9 = (_g9 + (int)1);
HXDLIN(1255)											width18 = (width18 + position9->advance->x);
            										}
            									}
HXDLIN(1255)									widthValue = width18;
            								}
            								else {
HXLINE(1255)									int tempIndex3 = placeIndex;
HXDLIN(1255)									int tempRangeEnd4 = formatRange->end;
HXDLIN(1255)									int countRanges3 = (int)0;
HXDLIN(1255)									positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1255)									widthValue = (int)0;
HXDLIN(1255)									while(true){
HXLINE(1255)										if ((tempIndex3 != tempRangeEnd4)) {
HXLINE(1255)											::String text9 = _gthis->text;
HXDLIN(1255)											Float letterSpacing9 = ((Float)0.0);
HXDLIN(1255)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)												letterSpacing9 = formatRange->format->letterSpacing;
            											}
HXDLIN(1255)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1255)											Float width19 = ((Float)0.0);
HXDLIN(1255)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1255)											_gthis->_hx___textLayout->letterSpacing = letterSpacing9;
HXDLIN(1255)											bool _hx_tmp17;
HXDLIN(1255)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)												_hx_tmp17 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1255)												_hx_tmp17 = true;
            											}
HXDLIN(1255)											_gthis->_hx___textLayout->autoHint = _hx_tmp17;
HXDLIN(1255)											 ::openfl::_internal::text::TextLayout _gthis10 = _gthis->_hx___textLayout;
HXDLIN(1255)											_gthis10->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text9,tempIndex3,tempRangeEnd4));
HXDLIN(1255)											::Array< ::Dynamic> tempPositions3 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)											positions = positions->concat(tempPositions3);
            										}
HXDLIN(1255)										if ((tempRangeEnd4 != breakIndex)) {
HXLINE(1255)											bool _hx_tmp18;
HXDLIN(1255)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1255)												_hx_tmp18 = true;
            											}
            											else {
HXLINE(1255)												_hx_tmp18 = false;
            											}
HXDLIN(1255)											if (!(_hx_tmp18)) {
HXLINE(1255)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1255)												goto _hx_goto_31;
            											}
HXDLIN(1255)											tempIndex3 = tempRangeEnd4;
HXDLIN(1255)											if ((breakIndex < formatRange->end)) {
HXLINE(1255)												tempRangeEnd4 = breakIndex;
            											}
            											else {
HXLINE(1255)												tempRangeEnd4 = formatRange->end;
            											}
HXDLIN(1255)											countRanges3 = (countRanges3 + (int)1);
            										}
            										else {
HXLINE(1255)											Float width20 = ((Float)0.0);
HXDLIN(1255)											{
HXLINE(1255)												int _g10 = (int)0;
HXDLIN(1255)												while((_g10 < positions->length)){
HXLINE(1255)													 ::openfl::_internal::text::GlyphPosition position10 = positions->__get(_g10).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)													_g10 = (_g10 + (int)1);
HXDLIN(1255)													width20 = (width20 + position10->advance->x);
            												}
            											}
HXDLIN(1255)											widthValue = width20;
HXDLIN(1255)											goto _hx_goto_31;
            										}
            									}
            									_hx_goto_31:;
HXDLIN(1255)									rangeIndex = (rangeIndex - (countRanges3 + (int)1));
HXDLIN(1255)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
            								}
HXDLIN(1255)								remainingPositions = positions;
HXDLIN(1255)								tempWidth = widthValue;
            							}
            							_hx_goto_17:;
            						}
HXDLIN(1255)						{
HXLINE(1255)							if ((breakIndex <= formatRange->end)) {
HXLINE(1255)								::String text10 = _gthis->text;
HXDLIN(1255)								Float letterSpacing10 = ((Float)0.0);
HXDLIN(1255)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)									letterSpacing10 = formatRange->format->letterSpacing;
            								}
HXDLIN(1255)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1255)								Float width21 = ((Float)0.0);
HXDLIN(1255)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1255)								_gthis->_hx___textLayout->letterSpacing = letterSpacing10;
HXDLIN(1255)								bool positions7;
HXDLIN(1255)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)									positions7 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1255)									positions7 = true;
            								}
HXDLIN(1255)								_gthis->_hx___textLayout->autoHint = positions7;
HXDLIN(1255)								 ::openfl::_internal::text::TextLayout _gthis11 = _gthis->_hx___textLayout;
HXDLIN(1255)								_gthis11->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text10,textIndex,breakIndex));
HXDLIN(1255)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)								Float width22 = ((Float)0.0);
HXDLIN(1255)								{
HXLINE(1255)									int _g11 = (int)0;
HXDLIN(1255)									while((_g11 < positions->length)){
HXLINE(1255)										 ::openfl::_internal::text::GlyphPosition position11 = positions->__get(_g11).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)										_g11 = (_g11 + (int)1);
HXDLIN(1255)										width22 = (width22 + position11->advance->x);
            									}
            								}
HXDLIN(1255)								widthValue = width22;
HXDLIN(1255)								bool _hx_tmp19;
HXDLIN(1255)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1255)									_hx_tmp19 = (layoutGroup->startIndex != layoutGroup->endIndex);
            								}
            								else {
HXLINE(1255)									_hx_tmp19 = true;
            								}
HXDLIN(1255)								if (_hx_tmp19) {
HXLINE(1255)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXDLIN(1255)									::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            								}
            								else {
HXLINE(1255)									layoutGroup->format = formatRange->format;
HXDLIN(1255)									layoutGroup->startIndex = textIndex;
HXDLIN(1255)									layoutGroup->endIndex = breakIndex;
            								}
HXDLIN(1255)								layoutGroup->positions = positions;
HXDLIN(1255)								layoutGroup->offsetX = offsetX;
HXDLIN(1255)								layoutGroup->ascent = ascent;
HXDLIN(1255)								layoutGroup->descent = descent;
HXDLIN(1255)								layoutGroup->leading = leading;
HXDLIN(1255)								layoutGroup->lineIndex = lineIndex;
HXDLIN(1255)								layoutGroup->offsetY = offsetY;
HXDLIN(1255)								layoutGroup->width = widthValue;
HXDLIN(1255)								layoutGroup->height = heightValue;
HXDLIN(1255)								offsetX = (offsetX + widthValue);
HXDLIN(1255)								if ((breakIndex == formatRange->end)) {
HXLINE(1255)									layoutGroup = null();
HXDLIN(1255)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            									}
HXDLIN(1255)									{
HXLINE(1255)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1255)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1255)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1255)											bool _hx_tmp20;
HXDLIN(1255)											if (hx::IsNotNull( font )) {
HXLINE(1255)												_hx_tmp20 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1255)												_hx_tmp20 = false;
            											}
HXDLIN(1255)											if (_hx_tmp20) {
HXLINE(1255)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1255)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1255)												ascent = currentFormat->size;
HXDLIN(1255)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1255)										leading = currentFormat->leading;
HXDLIN(1255)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1255)										if ((heightValue > maxHeightValue)) {
HXLINE(1255)											maxHeightValue = heightValue;
            										}
HXDLIN(1255)										if ((ascent > maxAscent)) {
HXLINE(1255)											maxAscent = ascent;
            										}
            									}
            								}
            							}
            							else {
HXLINE(1255)								while(true){
HXLINE(1255)									int tempRangeEnd5;
HXDLIN(1255)									if ((breakIndex < formatRange->end)) {
HXLINE(1255)										tempRangeEnd5 = breakIndex;
            									}
            									else {
HXLINE(1255)										tempRangeEnd5 = formatRange->end;
            									}
HXDLIN(1255)									if ((textIndex != tempRangeEnd5)) {
HXLINE(1255)										::String text11 = _gthis->text;
HXDLIN(1255)										Float letterSpacing11 = ((Float)0.0);
HXDLIN(1255)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1255)											letterSpacing11 = formatRange->format->letterSpacing;
            										}
HXDLIN(1255)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1255)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1255)										Float width23 = ((Float)0.0);
HXDLIN(1255)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1255)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1255)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1255)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1255)										_gthis->_hx___textLayout->letterSpacing = letterSpacing11;
HXDLIN(1255)										bool positions8;
HXDLIN(1255)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1255)											positions8 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1255)											positions8 = true;
            										}
HXDLIN(1255)										_gthis->_hx___textLayout->autoHint = positions8;
HXDLIN(1255)										 ::openfl::_internal::text::TextLayout _gthis12 = _gthis->_hx___textLayout;
HXDLIN(1255)										_gthis12->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text11,textIndex,tempRangeEnd5));
HXDLIN(1255)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1255)										Float width24 = ((Float)0.0);
HXDLIN(1255)										{
HXLINE(1255)											int _g12 = (int)0;
HXDLIN(1255)											while((_g12 < positions->length)){
HXLINE(1255)												 ::openfl::_internal::text::GlyphPosition position12 = positions->__get(_g12).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1255)												_g12 = (_g12 + (int)1);
HXDLIN(1255)												width24 = (width24 + position12->advance->x);
            											}
            										}
HXDLIN(1255)										widthValue = width24;
HXDLIN(1255)										bool _hx_tmp21;
HXDLIN(1255)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1255)											_hx_tmp21 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1255)											_hx_tmp21 = true;
            										}
HXDLIN(1255)										if (_hx_tmp21) {
HXLINE(1255)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd5);
HXDLIN(1255)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1255)											layoutGroup->format = formatRange->format;
HXDLIN(1255)											layoutGroup->startIndex = textIndex;
HXDLIN(1255)											layoutGroup->endIndex = tempRangeEnd5;
            										}
HXDLIN(1255)										layoutGroup->positions = positions;
HXDLIN(1255)										layoutGroup->offsetX = offsetX;
HXDLIN(1255)										layoutGroup->ascent = ascent;
HXDLIN(1255)										layoutGroup->descent = descent;
HXDLIN(1255)										layoutGroup->leading = leading;
HXDLIN(1255)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1255)										layoutGroup->offsetY = offsetY;
HXDLIN(1255)										layoutGroup->width = widthValue;
HXDLIN(1255)										layoutGroup->height = heightValue;
HXDLIN(1255)										offsetX = (offsetX + widthValue);
HXDLIN(1255)										textIndex = tempRangeEnd5;
            									}
HXDLIN(1255)									if ((tempRangeEnd5 == formatRange->end)) {
HXLINE(1255)										layoutGroup = null();
            									}
HXDLIN(1255)									if ((tempRangeEnd5 == breakIndex)) {
HXLINE(1255)										goto _hx_goto_34;
            									}
HXDLIN(1255)									bool _hx_tmp22;
HXDLIN(1255)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1255)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1255)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1255)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1255)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1255)										_hx_tmp22 = true;
            									}
            									else {
HXLINE(1255)										_hx_tmp22 = false;
            									}
HXDLIN(1255)									if (!(_hx_tmp22)) {
HXLINE(1255)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1255)										goto _hx_goto_34;
            									}
HXDLIN(1255)									{
HXLINE(1255)										if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1255)											ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1255)											descent = (currentFormat->size * currentFormat->_hx___descent);
            										}
            										else {
HXLINE(1255)											bool _hx_tmp23;
HXDLIN(1255)											if (hx::IsNotNull( font )) {
HXLINE(1255)												_hx_tmp23 = (font->unitsPerEM != (int)0);
            											}
            											else {
HXLINE(1255)												_hx_tmp23 = false;
            											}
HXDLIN(1255)											if (_hx_tmp23) {
HXLINE(1255)												ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1255)												descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            											}
            											else {
HXLINE(1255)												ascent = currentFormat->size;
HXDLIN(1255)												descent = (currentFormat->size * ((Float)0.185));
            											}
            										}
HXDLIN(1255)										leading = currentFormat->leading;
HXDLIN(1255)										heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1255)										if ((heightValue > maxHeightValue)) {
HXLINE(1255)											maxHeightValue = heightValue;
            										}
HXDLIN(1255)										if ((ascent > maxAscent)) {
HXLINE(1255)											maxAscent = ascent;
            										}
            									}
            								}
            								_hx_goto_34:;
            							}
HXDLIN(1255)							textIndex = breakIndex;
            						}
            					}
HXLINE(1257)					layoutGroup = null();
            				}
            				else {
HXLINE(1259)					bool _hx_tmp24;
HXDLIN(1259)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1259)						_hx_tmp24 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1259)						_hx_tmp24 = false;
            					}
HXDLIN(1259)					if (_hx_tmp24) {
HXLINE(1262)						if ((layoutGroup->endIndex == spaceIndex)) {
HXLINE(1264)							 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN(1264)							int index = (layoutGroup->positions->length - (int)1);
HXDLIN(1264)							Float _hx_tmp25;
HXDLIN(1264)							bool _hx_tmp26;
HXDLIN(1264)							if ((index >= (int)0)) {
HXLINE(1264)								_hx_tmp26 = (index < layoutGroup->positions->length);
            							}
            							else {
HXLINE(1264)								_hx_tmp26 = false;
            							}
HXDLIN(1264)							if (_hx_tmp26) {
HXLINE(1264)								_hx_tmp25 = layoutGroup->positions->__get(index).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            							}
            							else {
HXLINE(1264)								_hx_tmp25 = (int)0;
            							}
HXDLIN(1264)							layoutGroup1->width = (layoutGroup1->width - _hx_tmp25);
            						}
HXLINE(1267)						layoutGroup = null();
            					}
            				}
HXLINE(1270)				if ((formatRange->end == breakIndex)) {
HXLINE(1272)					if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1272)						rangeIndex = (rangeIndex + (int)1);
HXDLIN(1272)						formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1272)						currentFormat->_hx___merge(formatRange->format);
HXDLIN(1272)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            					}
HXLINE(1273)					{
HXLINE(1273)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1273)							ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1273)							descent = (currentFormat->size * currentFormat->_hx___descent);
            						}
            						else {
HXLINE(1273)							bool _hx_tmp27;
HXDLIN(1273)							if (hx::IsNotNull( font )) {
HXLINE(1273)								_hx_tmp27 = (font->unitsPerEM != (int)0);
            							}
            							else {
HXLINE(1273)								_hx_tmp27 = false;
            							}
HXDLIN(1273)							if (_hx_tmp27) {
HXLINE(1273)								ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1273)								descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            							}
            							else {
HXLINE(1273)								ascent = currentFormat->size;
HXDLIN(1273)								descent = (currentFormat->size * ((Float)0.185));
            							}
            						}
HXDLIN(1273)						leading = currentFormat->leading;
HXDLIN(1273)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1273)						if ((heightValue > maxHeightValue)) {
HXLINE(1273)							maxHeightValue = heightValue;
            						}
HXDLIN(1273)						if ((ascent > maxAscent)) {
HXLINE(1273)							maxAscent = ascent;
            						}
            					}
HXLINE(1274)					lineFormat = formatRange->format;
            				}
HXLINE(1277)				{
HXLINE(1277)					{
HXLINE(1277)						if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1277)							ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1277)							descent = (currentFormat->size * currentFormat->_hx___descent);
            						}
            						else {
HXLINE(1277)							bool _hx_tmp28;
HXDLIN(1277)							if (hx::IsNotNull( font )) {
HXLINE(1277)								_hx_tmp28 = (font->unitsPerEM != (int)0);
            							}
            							else {
HXLINE(1277)								_hx_tmp28 = false;
            							}
HXDLIN(1277)							if (_hx_tmp28) {
HXLINE(1277)								ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1277)								descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            							}
            							else {
HXLINE(1277)								ascent = currentFormat->size;
HXDLIN(1277)								descent = (currentFormat->size * ((Float)0.185));
            							}
            						}
HXDLIN(1277)						leading = currentFormat->leading;
HXDLIN(1277)						heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1277)						if ((heightValue > maxHeightValue)) {
HXLINE(1277)							maxHeightValue = heightValue;
            						}
HXDLIN(1277)						if ((ascent > maxAscent)) {
HXLINE(1277)							maxAscent = ascent;
            						}
            					}
HXDLIN(1277)					int i2 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1277)					while(true){
HXLINE(1277)						i2 = (i2 - (int)1);
HXDLIN(1277)						if (!((i2 > (int)-1))) {
HXLINE(1277)							goto _hx_goto_36;
            						}
HXDLIN(1277)						 ::openfl::_internal::text::TextLayoutGroup lg1 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i2)) );
HXDLIN(1277)						if ((lg1->lineIndex < lineIndex)) {
HXLINE(1277)							goto _hx_goto_36;
            						}
HXDLIN(1277)						if ((lg1->lineIndex > lineIndex)) {
HXLINE(1277)							continue;
            						}
HXDLIN(1277)						lg1->ascent = maxAscent;
HXDLIN(1277)						lg1->height = maxHeightValue;
            					}
            					_hx_goto_36:;
HXDLIN(1277)					offsetY = (offsetY + maxHeightValue);
HXDLIN(1277)					maxAscent = ((Float)0.0);
HXDLIN(1277)					maxHeightValue = (int)0;
HXDLIN(1277)					lineIndex = (lineIndex + (int)1);
HXDLIN(1277)					offsetX = (int)2;
            				}
HXLINE(1279)				textIndex = (breakIndex + (int)1);
HXLINE(1280)				previousBreakIndex = breakIndex;
HXLINE(1281)				breakIndex = this->getLineBreakIndex(textIndex);
            			}
            			else {
HXLINE(1283)				if ((spaceIndex > (int)-1)) {
HXLINE(1287)					bool _hx_tmp29;
HXDLIN(1287)					if (hx::IsNotNull( layoutGroup )) {
HXLINE(1287)						_hx_tmp29 = (layoutGroup->startIndex != layoutGroup->endIndex);
            					}
            					else {
HXLINE(1287)						_hx_tmp29 = false;
            					}
HXDLIN(1287)					if (_hx_tmp29) {
HXLINE(1289)						layoutGroup = null();
            					}
HXLINE(1292)					wrap = false;
HXLINE(1294)					while((textIndex < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))){
HXLINE(1298)						int endIndex2 = (int)-1;
HXLINE(1300)						if ((spaceIndex == (int)-1)) {
HXLINE(1302)							endIndex2 = breakIndex;
            						}
            						else {
HXLINE(1306)							endIndex2 = (spaceIndex + (int)1);
HXLINE(1308)							bool _hx_tmp30;
HXDLIN(1308)							if ((breakIndex > (int)-1)) {
HXLINE(1308)								_hx_tmp30 = (breakIndex < endIndex2);
            							}
            							else {
HXLINE(1308)								_hx_tmp30 = false;
            							}
HXDLIN(1308)							if (_hx_tmp30) {
HXLINE(1310)								endIndex2 = breakIndex;
            							}
            						}
HXLINE(1314)						if ((endIndex2 == (int)-1)) {
HXLINE(1316)							endIndex2 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
            						}
HXLINE(1319)						if ((endIndex2 <= formatRange->end)) {
HXLINE(1319)							::String text12 = _gthis->text;
HXDLIN(1319)							Float letterSpacing12 = ((Float)0.0);
HXDLIN(1319)							if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1319)								letterSpacing12 = formatRange->format->letterSpacing;
            							}
HXDLIN(1319)							if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1319)								_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            							}
HXDLIN(1319)							Float width25 = ((Float)0.0);
HXDLIN(1319)							_gthis->_hx___textLayout->set_text(null());
HXDLIN(1319)							_gthis->_hx___textLayout->set_font(font);
HXDLIN(1319)							if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1319)								_gthis->_hx___textLayout->set_size(formatRange->format->size);
            							}
HXDLIN(1319)							_gthis->_hx___textLayout->letterSpacing = letterSpacing12;
HXDLIN(1319)							bool positions9;
HXDLIN(1319)							if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1319)								positions9 = (_gthis->sharpness < (int)400);
            							}
            							else {
HXLINE(1319)								positions9 = true;
            							}
HXDLIN(1319)							_gthis->_hx___textLayout->autoHint = positions9;
HXDLIN(1319)							 ::openfl::_internal::text::TextLayout _gthis13 = _gthis->_hx___textLayout;
HXDLIN(1319)							_gthis13->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text12,textIndex,endIndex2));
HXDLIN(1319)							positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1319)							Float width26 = ((Float)0.0);
HXDLIN(1319)							{
HXLINE(1319)								int _g13 = (int)0;
HXDLIN(1319)								while((_g13 < positions->length)){
HXLINE(1319)									 ::openfl::_internal::text::GlyphPosition position13 = positions->__get(_g13).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1319)									_g13 = (_g13 + (int)1);
HXDLIN(1319)									width26 = (width26 + position13->advance->x);
            								}
            							}
HXDLIN(1319)							widthValue = width26;
            						}
            						else {
HXLINE(1319)							int tempIndex4 = textIndex;
HXDLIN(1319)							int tempRangeEnd6 = formatRange->end;
HXDLIN(1319)							int countRanges4 = (int)0;
HXDLIN(1319)							positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1319)							widthValue = (int)0;
HXDLIN(1319)							while(true){
HXLINE(1319)								if ((tempIndex4 != tempRangeEnd6)) {
HXLINE(1319)									::String text13 = _gthis->text;
HXDLIN(1319)									Float letterSpacing13 = ((Float)0.0);
HXDLIN(1319)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1319)										letterSpacing13 = formatRange->format->letterSpacing;
            									}
HXDLIN(1319)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1319)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1319)									Float width27 = ((Float)0.0);
HXDLIN(1319)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1319)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1319)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1319)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1319)									_gthis->_hx___textLayout->letterSpacing = letterSpacing13;
HXDLIN(1319)									bool _hx_tmp31;
HXDLIN(1319)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1319)										_hx_tmp31 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1319)										_hx_tmp31 = true;
            									}
HXDLIN(1319)									_gthis->_hx___textLayout->autoHint = _hx_tmp31;
HXDLIN(1319)									 ::openfl::_internal::text::TextLayout _gthis14 = _gthis->_hx___textLayout;
HXDLIN(1319)									_gthis14->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text13,tempIndex4,tempRangeEnd6));
HXDLIN(1319)									::Array< ::Dynamic> tempPositions4 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1319)									positions = positions->concat(tempPositions4);
            								}
HXDLIN(1319)								if ((tempRangeEnd6 != endIndex2)) {
HXLINE(1319)									bool _hx_tmp32;
HXDLIN(1319)									if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1319)										rangeIndex = (rangeIndex + (int)1);
HXDLIN(1319)										formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1319)										currentFormat->_hx___merge(formatRange->format);
HXDLIN(1319)										font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1319)										_hx_tmp32 = true;
            									}
            									else {
HXLINE(1319)										_hx_tmp32 = false;
            									}
HXDLIN(1319)									if (!(_hx_tmp32)) {
HXLINE(1319)										::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1319)										goto _hx_goto_39;
            									}
HXDLIN(1319)									tempIndex4 = tempRangeEnd6;
HXDLIN(1319)									if ((endIndex2 < formatRange->end)) {
HXLINE(1319)										tempRangeEnd6 = endIndex2;
            									}
            									else {
HXLINE(1319)										tempRangeEnd6 = formatRange->end;
            									}
HXDLIN(1319)									countRanges4 = (countRanges4 + (int)1);
            								}
            								else {
HXLINE(1319)									Float width28 = ((Float)0.0);
HXDLIN(1319)									{
HXLINE(1319)										int _g14 = (int)0;
HXDLIN(1319)										while((_g14 < positions->length)){
HXLINE(1319)											 ::openfl::_internal::text::GlyphPosition position14 = positions->__get(_g14).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1319)											_g14 = (_g14 + (int)1);
HXDLIN(1319)											width28 = (width28 + position14->advance->x);
            										}
            									}
HXDLIN(1319)									widthValue = width28;
HXDLIN(1319)									goto _hx_goto_39;
            								}
            							}
            							_hx_goto_39:;
HXDLIN(1319)							rangeIndex = (rangeIndex - (countRanges4 + (int)1));
HXDLIN(1319)							if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1319)								rangeIndex = (rangeIndex + (int)1);
HXDLIN(1319)								formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1319)								currentFormat->_hx___merge(formatRange->format);
HXDLIN(1319)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            							}
            						}
HXLINE(1321)						if (hx::IsEq( lineFormat->align,(int)2 )) {
HXLINE(1323)							bool _hx_tmp33;
HXDLIN(1323)							if ((positions->length > (int)0)) {
HXLINE(1323)								_hx_tmp33 = (textIndex == previousSpaceIndex);
            							}
            							else {
HXLINE(1323)								_hx_tmp33 = false;
            							}
HXDLIN(1323)							if (_hx_tmp33) {
HXLINE(1326)								textIndex = (textIndex + (int)1);
HXLINE(1328)								Float spaceWidth = positions->shift().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1329)								widthValue = (widthValue - spaceWidth);
HXLINE(1330)								offsetX = (offsetX + spaceWidth);
            							}
HXLINE(1333)							bool _hx_tmp34;
HXDLIN(1333)							if ((positions->length > (int)0)) {
HXLINE(1333)								_hx_tmp34 = (endIndex2 == (spaceIndex + (int)1));
            							}
            							else {
HXLINE(1333)								_hx_tmp34 = false;
            							}
HXDLIN(1333)							if (_hx_tmp34) {
HXLINE(1336)								endIndex2 = (endIndex2 - (int)1);
HXLINE(1338)								Float spaceWidth1 = positions->pop().StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
HXLINE(1339)								widthValue = (widthValue - spaceWidth1);
            							}
            						}
HXLINE(1343)						if (this->wordWrap) {
HXLINE(1345)							if (((offsetX + widthValue) > (this->width - (int)2))) {
HXLINE(1347)								wrap = true;
HXLINE(1349)								bool _hx_tmp35;
HXDLIN(1349)								if ((positions->length > (int)0)) {
HXLINE(1349)									_hx_tmp35 = (endIndex2 == (spaceIndex + (int)1));
            								}
            								else {
HXLINE(1349)									_hx_tmp35 = false;
            								}
HXDLIN(1349)								if (_hx_tmp35) {
HXLINE(1354)									 ::openfl::_internal::text::GlyphPosition lastPosition = positions->__get((positions->length - (int)1)).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXLINE(1355)									Float spaceWidth2 = lastPosition->advance->x;
HXLINE(1357)									if ((((offsetX + widthValue) - spaceWidth2) <= (this->width - (int)2))) {
HXLINE(1359)										wrap = false;
            									}
            								}
            							}
            						}
HXLINE(1365)						if (wrap) {
HXLINE(1367)							bool _hx_tmp36;
HXDLIN(1367)							if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1367)								if (hx::IsNull( layoutGroup )) {
HXLINE(1367)									_hx_tmp36 = (this->layoutGroups->get_length() > (int)0);
            								}
            								else {
HXLINE(1367)									_hx_tmp36 = true;
            								}
            							}
            							else {
HXLINE(1367)								_hx_tmp36 = false;
            							}
HXDLIN(1367)							if (_hx_tmp36) {
HXLINE(1369)								 ::openfl::_internal::text::TextLayoutGroup previous = layoutGroup;
HXLINE(1370)								if (hx::IsNull( previous )) {
HXLINE(1372)									::Dynamic this1 = this->layoutGroups;
HXDLIN(1372)									previous = ( ( ::openfl::_Vector::ObjectVector)(this1) )->get((this->layoutGroups->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            								}
HXLINE(1376)								 ::openfl::_internal::text::TextLayoutGroup previous1 = previous;
HXDLIN(1376)								int index1 = (previous->positions->length - (int)1);
HXDLIN(1376)								Float _hx_tmp37;
HXDLIN(1376)								bool _hx_tmp38;
HXDLIN(1376)								if ((index1 >= (int)0)) {
HXLINE(1376)									_hx_tmp38 = (index1 < previous->positions->length);
            								}
            								else {
HXLINE(1376)									_hx_tmp38 = false;
            								}
HXDLIN(1376)								if (_hx_tmp38) {
HXLINE(1376)									_hx_tmp37 = previous->positions->__get(index1).StaticCast<  ::openfl::_internal::text::GlyphPosition >()->advance->x;
            								}
            								else {
HXLINE(1376)									_hx_tmp37 = (int)0;
            								}
HXDLIN(1376)								previous1->width = (previous1->width - _hx_tmp37);
HXLINE(1377)								previous->endIndex--;
            							}
HXLINE(1380)							int i3 = (this->layoutGroups->get_length() - (int)1);
HXLINE(1381)							int offsetCount = (int)0;
HXLINE(1383)							while(true){
HXLINE(1385)								layoutGroup = this->layoutGroups->get(i3).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1387)								bool _hx_tmp39;
HXDLIN(1387)								if ((i3 > (int)0)) {
HXLINE(1387)									_hx_tmp39 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE(1387)									_hx_tmp39 = false;
            								}
HXDLIN(1387)								if (_hx_tmp39) {
HXLINE(1389)									offsetCount = (offsetCount + (int)1);
            								}
            								else {
HXLINE(1393)									goto _hx_goto_41;
            								}
HXLINE(1396)								i3 = (i3 - (int)1);
            							}
            							_hx_goto_41:;
HXLINE(1399)							if ((textIndex == (previousSpaceIndex + (int)1))) {
HXLINE(1401)								{
HXLINE(1401)									if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1401)										ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1401)										descent = (currentFormat->size * currentFormat->_hx___descent);
            									}
            									else {
HXLINE(1401)										bool _hx_tmp40;
HXDLIN(1401)										if (hx::IsNotNull( font )) {
HXLINE(1401)											_hx_tmp40 = (font->unitsPerEM != (int)0);
            										}
            										else {
HXLINE(1401)											_hx_tmp40 = false;
            										}
HXDLIN(1401)										if (_hx_tmp40) {
HXLINE(1401)											ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1401)											descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            										}
            										else {
HXLINE(1401)											ascent = currentFormat->size;
HXDLIN(1401)											descent = (currentFormat->size * ((Float)0.185));
            										}
            									}
HXDLIN(1401)									leading = currentFormat->leading;
HXDLIN(1401)									heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1401)									if ((heightValue > maxHeightValue)) {
HXLINE(1401)										maxHeightValue = heightValue;
            									}
HXDLIN(1401)									if ((ascent > maxAscent)) {
HXLINE(1401)										maxAscent = ascent;
            									}
            								}
HXDLIN(1401)								int i4 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1401)								while(true){
HXLINE(1401)									i4 = (i4 - (int)1);
HXDLIN(1401)									if (!((i4 > (int)-1))) {
HXLINE(1401)										goto _hx_goto_42;
            									}
HXDLIN(1401)									 ::openfl::_internal::text::TextLayoutGroup lg2 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i4)) );
HXDLIN(1401)									if ((lg2->lineIndex < lineIndex)) {
HXLINE(1401)										goto _hx_goto_42;
            									}
HXDLIN(1401)									if ((lg2->lineIndex > lineIndex)) {
HXLINE(1401)										continue;
            									}
HXDLIN(1401)									lg2->ascent = maxAscent;
HXDLIN(1401)									lg2->height = maxHeightValue;
            								}
            								_hx_goto_42:;
HXDLIN(1401)								offsetY = (offsetY + maxHeightValue);
HXDLIN(1401)								maxAscent = ((Float)0.0);
HXDLIN(1401)								maxHeightValue = (int)0;
HXDLIN(1401)								lineIndex = (lineIndex + (int)1);
HXDLIN(1401)								offsetX = (int)2;
            							}
HXLINE(1404)							offsetX = (int)2;
HXLINE(1406)							if ((offsetCount > (int)0)) {
HXLINE(1408)								::Dynamic this2 = this->layoutGroups;
HXDLIN(1408)								Float bumpX = ( ( ::openfl::_Vector::ObjectVector)(this2) )->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE(1410)								{
HXLINE(1410)									int _g15 = (this->layoutGroups->get_length() - offsetCount);
HXDLIN(1410)									int _g16 = this->layoutGroups->get_length();
HXDLIN(1410)									while((_g15 < _g16)){
HXLINE(1410)										_g15 = (_g15 + (int)1);
HXDLIN(1410)										int i5 = (_g15 - (int)1);
HXLINE(1412)										layoutGroup = this->layoutGroups->get(i5).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1413)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup2 = layoutGroup;
HXDLIN(1413)										layoutGroup2->offsetX = (layoutGroup2->offsetX - bumpX);
HXLINE(1414)										layoutGroup->offsetY = offsetY;
HXLINE(1415)										layoutGroup->lineIndex = lineIndex;
HXLINE(1416)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE(1420)							{
HXLINE(1420)								bool _hx_tmp41;
HXDLIN(1420)								if ((_gthis->width >= (int)4)) {
HXLINE(1420)									_hx_tmp41 = _gthis->wordWrap;
            								}
            								else {
HXLINE(1420)									_hx_tmp41 = false;
            								}
HXDLIN(1420)								if (_hx_tmp41) {
HXLINE(1420)									::Array< ::Dynamic> remainingPositions1 = positions;
HXDLIN(1420)									int i6;
HXDLIN(1420)									int bufferCount1;
HXDLIN(1420)									int placeIndex1;
HXDLIN(1420)									Float positionWidth1;
HXDLIN(1420)									 ::openfl::_internal::text::GlyphPosition currentPosition1;
HXDLIN(1420)									Float width29 = ((Float)0.0);
HXDLIN(1420)									{
HXLINE(1420)										int _g17 = (int)0;
HXDLIN(1420)										while((_g17 < remainingPositions1->length)){
HXLINE(1420)											 ::openfl::_internal::text::GlyphPosition position15 = remainingPositions1->__get(_g17).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)											_g17 = (_g17 + (int)1);
HXDLIN(1420)											width29 = (width29 + position15->advance->x);
            										}
            									}
HXDLIN(1420)									Float tempWidth1 = width29;
HXDLIN(1420)									while(((offsetX + tempWidth1) > (_gthis->width - (int)2))){
HXLINE(1420)										bufferCount1 = (int)0;
HXDLIN(1420)										i6 = bufferCount1;
HXDLIN(1420)										positionWidth1 = ((Float)0.0);
HXDLIN(1420)										while(((offsetX + positionWidth1) < (_gthis->width - (int)2))){
HXLINE(1420)											currentPosition1 = remainingPositions1->__get(i6).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)											if ((currentPosition1->advance->x == ((Float)0.0))) {
HXLINE(1420)												i6 = (i6 + (int)1);
HXDLIN(1420)												bufferCount1 = (bufferCount1 + (int)1);
            											}
            											else {
HXLINE(1420)												positionWidth1 = (positionWidth1 + currentPosition1->advance->x);
HXDLIN(1420)												i6 = (i6 + (int)1);
            											}
            										}
HXDLIN(1420)										if ((positionWidth1 == ((Float)0.0))) {
HXLINE(1420)											goto _hx_goto_45;
            										}
            										else {
HXLINE(1420)											bool _hx_tmp42;
HXDLIN(1420)											if ((i6 < (int)2)) {
HXLINE(1420)												_hx_tmp42 = ((positionWidth1 + offsetX) > (_gthis->width - (int)2));
            											}
            											else {
HXLINE(1420)												_hx_tmp42 = false;
            											}
HXDLIN(1420)											if (_hx_tmp42) {
HXLINE(1420)												if ((((textIndex + i6) - bufferCount1) == endIndex2)) {
HXLINE(1420)													goto _hx_goto_45;
            												}
            											}
            											else {
HXLINE(1420)												while(((offsetX + positionWidth1) > (_gthis->width - (int)2))){
HXLINE(1420)													i6 = (i6 - (int)1);
HXDLIN(1420)													if (((i6 - bufferCount1) > (int)0)) {
HXLINE(1420)														{
HXLINE(1420)															int endIndex3 = ((textIndex + i6) - bufferCount1);
HXDLIN(1420)															if ((endIndex3 <= formatRange->end)) {
HXLINE(1420)																::String text14 = _gthis->text;
HXDLIN(1420)																Float letterSpacing14 = ((Float)0.0);
HXDLIN(1420)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)																	letterSpacing14 = formatRange->format->letterSpacing;
            																}
HXDLIN(1420)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1420)																Float width30 = ((Float)0.0);
HXDLIN(1420)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)																	_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																}
HXDLIN(1420)																_gthis->_hx___textLayout->letterSpacing = letterSpacing14;
HXDLIN(1420)																bool positions10;
HXDLIN(1420)																if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)																	positions10 = (_gthis->sharpness < (int)400);
            																}
            																else {
HXLINE(1420)																	positions10 = true;
            																}
HXDLIN(1420)																_gthis->_hx___textLayout->autoHint = positions10;
HXDLIN(1420)																 ::openfl::_internal::text::TextLayout _gthis15 = _gthis->_hx___textLayout;
HXDLIN(1420)																_gthis15->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text14,textIndex,endIndex3));
HXDLIN(1420)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)																Float width31 = ((Float)0.0);
HXDLIN(1420)																{
HXLINE(1420)																	int _g18 = (int)0;
HXDLIN(1420)																	while((_g18 < positions->length)){
HXLINE(1420)																		 ::openfl::_internal::text::GlyphPosition position16 = positions->__get(_g18).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)																		_g18 = (_g18 + (int)1);
HXDLIN(1420)																		width31 = (width31 + position16->advance->x);
            																	}
            																}
HXDLIN(1420)																widthValue = width31;
            															}
            															else {
HXLINE(1420)																int tempIndex5 = textIndex;
HXDLIN(1420)																int tempRangeEnd7 = formatRange->end;
HXDLIN(1420)																int countRanges5 = (int)0;
HXDLIN(1420)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1420)																widthValue = (int)0;
HXDLIN(1420)																while(true){
HXLINE(1420)																	if ((tempIndex5 != tempRangeEnd7)) {
HXLINE(1420)																		::String text15 = _gthis->text;
HXDLIN(1420)																		Float letterSpacing15 = ((Float)0.0);
HXDLIN(1420)																		if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)																			letterSpacing15 = formatRange->format->letterSpacing;
            																		}
HXDLIN(1420)																		if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)																			_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1420)																		Float width32 = ((Float)0.0);
HXDLIN(1420)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)																		if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)																			_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																		}
HXDLIN(1420)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing15;
HXDLIN(1420)																		bool _hx_tmp43;
HXDLIN(1420)																		if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)																			_hx_tmp43 = (_gthis->sharpness < (int)400);
            																		}
            																		else {
HXLINE(1420)																			_hx_tmp43 = true;
            																		}
HXDLIN(1420)																		_gthis->_hx___textLayout->autoHint = _hx_tmp43;
HXDLIN(1420)																		 ::openfl::_internal::text::TextLayout _gthis16 = _gthis->_hx___textLayout;
HXDLIN(1420)																		_gthis16->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text15,tempIndex5,tempRangeEnd7));
HXDLIN(1420)																		::Array< ::Dynamic> tempPositions5 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)																		positions = positions->concat(tempPositions5);
            																	}
HXDLIN(1420)																	if ((tempRangeEnd7 != endIndex3)) {
HXLINE(1420)																		bool _hx_tmp44;
HXDLIN(1420)																		if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)																			rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)																			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)																			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)																			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1420)																			_hx_tmp44 = true;
            																		}
            																		else {
HXLINE(1420)																			_hx_tmp44 = false;
            																		}
HXDLIN(1420)																		if (!(_hx_tmp44)) {
HXLINE(1420)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1420)																			goto _hx_goto_49;
            																		}
HXDLIN(1420)																		tempIndex5 = tempRangeEnd7;
HXDLIN(1420)																		if ((endIndex3 < formatRange->end)) {
HXLINE(1420)																			tempRangeEnd7 = endIndex3;
            																		}
            																		else {
HXLINE(1420)																			tempRangeEnd7 = formatRange->end;
            																		}
HXDLIN(1420)																		countRanges5 = (countRanges5 + (int)1);
            																	}
            																	else {
HXLINE(1420)																		Float width33 = ((Float)0.0);
HXDLIN(1420)																		{
HXLINE(1420)																			int _g19 = (int)0;
HXDLIN(1420)																			while((_g19 < positions->length)){
HXLINE(1420)																				 ::openfl::_internal::text::GlyphPosition position17 = positions->__get(_g19).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)																				_g19 = (_g19 + (int)1);
HXDLIN(1420)																				width33 = (width33 + position17->advance->x);
            																			}
            																		}
HXDLIN(1420)																		widthValue = width33;
HXDLIN(1420)																		goto _hx_goto_49;
            																	}
            																}
            																_hx_goto_49:;
HXDLIN(1420)																rangeIndex = (rangeIndex - (countRanges5 + (int)1));
HXDLIN(1420)																if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)																	rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)																	formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXDLIN(1420)														positionWidth1 = widthValue;
            													}
            													else {
HXLINE(1420)														i6 = (int)1;
HXDLIN(1420)														bufferCount1 = (int)0;
HXDLIN(1420)														{
HXLINE(1420)															int endIndex4 = (textIndex + (int)1);
HXDLIN(1420)															if ((endIndex4 <= formatRange->end)) {
HXLINE(1420)																::String text16 = _gthis->text;
HXDLIN(1420)																Float letterSpacing16 = ((Float)0.0);
HXDLIN(1420)																if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)																	letterSpacing16 = formatRange->format->letterSpacing;
            																}
HXDLIN(1420)																if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)																	_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																}
HXDLIN(1420)																Float width34 = ((Float)0.0);
HXDLIN(1420)																_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)																_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)																if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)																	_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																}
HXDLIN(1420)																_gthis->_hx___textLayout->letterSpacing = letterSpacing16;
HXDLIN(1420)																bool positions11;
HXDLIN(1420)																if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)																	positions11 = (_gthis->sharpness < (int)400);
            																}
            																else {
HXLINE(1420)																	positions11 = true;
            																}
HXDLIN(1420)																_gthis->_hx___textLayout->autoHint = positions11;
HXDLIN(1420)																 ::openfl::_internal::text::TextLayout _gthis17 = _gthis->_hx___textLayout;
HXDLIN(1420)																_gthis17->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text16,textIndex,endIndex4));
HXDLIN(1420)																positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)																Float width35 = ((Float)0.0);
HXDLIN(1420)																{
HXLINE(1420)																	int _g20 = (int)0;
HXDLIN(1420)																	while((_g20 < positions->length)){
HXLINE(1420)																		 ::openfl::_internal::text::GlyphPosition position18 = positions->__get(_g20).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)																		_g20 = (_g20 + (int)1);
HXDLIN(1420)																		width35 = (width35 + position18->advance->x);
            																	}
            																}
HXDLIN(1420)																widthValue = width35;
            															}
            															else {
HXLINE(1420)																int tempIndex6 = textIndex;
HXDLIN(1420)																int tempRangeEnd8 = formatRange->end;
HXDLIN(1420)																int countRanges6 = (int)0;
HXDLIN(1420)																positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1420)																widthValue = (int)0;
HXDLIN(1420)																while(true){
HXLINE(1420)																	if ((tempIndex6 != tempRangeEnd8)) {
HXLINE(1420)																		::String text17 = _gthis->text;
HXDLIN(1420)																		Float letterSpacing17 = ((Float)0.0);
HXDLIN(1420)																		if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)																			letterSpacing17 = formatRange->format->letterSpacing;
            																		}
HXDLIN(1420)																		if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)																			_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																		}
HXDLIN(1420)																		Float width36 = ((Float)0.0);
HXDLIN(1420)																		_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)																		_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)																		if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)																			_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																		}
HXDLIN(1420)																		_gthis->_hx___textLayout->letterSpacing = letterSpacing17;
HXDLIN(1420)																		bool _hx_tmp45;
HXDLIN(1420)																		if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)																			_hx_tmp45 = (_gthis->sharpness < (int)400);
            																		}
            																		else {
HXLINE(1420)																			_hx_tmp45 = true;
            																		}
HXDLIN(1420)																		_gthis->_hx___textLayout->autoHint = _hx_tmp45;
HXDLIN(1420)																		 ::openfl::_internal::text::TextLayout _gthis18 = _gthis->_hx___textLayout;
HXDLIN(1420)																		_gthis18->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text17,tempIndex6,tempRangeEnd8));
HXDLIN(1420)																		::Array< ::Dynamic> tempPositions6 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)																		positions = positions->concat(tempPositions6);
            																	}
HXDLIN(1420)																	if ((tempRangeEnd8 != endIndex4)) {
HXLINE(1420)																		bool _hx_tmp46;
HXDLIN(1420)																		if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)																			rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)																			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)																			currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)																			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1420)																			_hx_tmp46 = true;
            																		}
            																		else {
HXLINE(1420)																			_hx_tmp46 = false;
            																		}
HXDLIN(1420)																		if (!(_hx_tmp46)) {
HXLINE(1420)																			::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1420)																			goto _hx_goto_52;
            																		}
HXDLIN(1420)																		tempIndex6 = tempRangeEnd8;
HXDLIN(1420)																		if ((endIndex4 < formatRange->end)) {
HXLINE(1420)																			tempRangeEnd8 = endIndex4;
            																		}
            																		else {
HXLINE(1420)																			tempRangeEnd8 = formatRange->end;
            																		}
HXDLIN(1420)																		countRanges6 = (countRanges6 + (int)1);
            																	}
            																	else {
HXLINE(1420)																		Float width37 = ((Float)0.0);
HXDLIN(1420)																		{
HXLINE(1420)																			int _g21 = (int)0;
HXDLIN(1420)																			while((_g21 < positions->length)){
HXLINE(1420)																				 ::openfl::_internal::text::GlyphPosition position19 = positions->__get(_g21).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)																				_g21 = (_g21 + (int)1);
HXDLIN(1420)																				width37 = (width37 + position19->advance->x);
            																			}
            																		}
HXDLIN(1420)																		widthValue = width37;
HXDLIN(1420)																		goto _hx_goto_52;
            																	}
            																}
            																_hx_goto_52:;
HXDLIN(1420)																rangeIndex = (rangeIndex - (countRanges6 + (int)1));
HXDLIN(1420)																if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)																	rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)																	formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)																	currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)																	font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																}
            															}
            														}
HXDLIN(1420)														positionWidth1 = (int)0;
            													}
            												}
            											}
            										}
HXDLIN(1420)										placeIndex1 = ((textIndex + i6) - bufferCount1);
HXDLIN(1420)										{
HXLINE(1420)											if ((placeIndex1 <= formatRange->end)) {
HXLINE(1420)												::String text18 = _gthis->text;
HXDLIN(1420)												Float letterSpacing18 = ((Float)0.0);
HXDLIN(1420)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)													letterSpacing18 = formatRange->format->letterSpacing;
            												}
HXDLIN(1420)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1420)												Float width38 = ((Float)0.0);
HXDLIN(1420)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1420)												_gthis->_hx___textLayout->letterSpacing = letterSpacing18;
HXDLIN(1420)												bool positions12;
HXDLIN(1420)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)													positions12 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1420)													positions12 = true;
            												}
HXDLIN(1420)												_gthis->_hx___textLayout->autoHint = positions12;
HXDLIN(1420)												 ::openfl::_internal::text::TextLayout _gthis19 = _gthis->_hx___textLayout;
HXDLIN(1420)												_gthis19->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text18,textIndex,placeIndex1));
HXDLIN(1420)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)												Float width39 = ((Float)0.0);
HXDLIN(1420)												{
HXLINE(1420)													int _g22 = (int)0;
HXDLIN(1420)													while((_g22 < positions->length)){
HXLINE(1420)														 ::openfl::_internal::text::GlyphPosition position20 = positions->__get(_g22).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)														_g22 = (_g22 + (int)1);
HXDLIN(1420)														width39 = (width39 + position20->advance->x);
            													}
            												}
HXDLIN(1420)												widthValue = width39;
HXDLIN(1420)												bool _hx_tmp47;
HXDLIN(1420)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1420)													_hx_tmp47 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1420)													_hx_tmp47 = true;
            												}
HXDLIN(1420)												if (_hx_tmp47) {
HXLINE(1420)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex1);
HXDLIN(1420)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1420)													layoutGroup->format = formatRange->format;
HXDLIN(1420)													layoutGroup->startIndex = textIndex;
HXDLIN(1420)													layoutGroup->endIndex = placeIndex1;
            												}
HXDLIN(1420)												layoutGroup->positions = positions;
HXDLIN(1420)												layoutGroup->offsetX = offsetX;
HXDLIN(1420)												layoutGroup->ascent = ascent;
HXDLIN(1420)												layoutGroup->descent = descent;
HXDLIN(1420)												layoutGroup->leading = leading;
HXDLIN(1420)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1420)												layoutGroup->offsetY = offsetY;
HXDLIN(1420)												layoutGroup->width = widthValue;
HXDLIN(1420)												layoutGroup->height = heightValue;
HXDLIN(1420)												offsetX = (offsetX + widthValue);
HXDLIN(1420)												if ((placeIndex1 == formatRange->end)) {
HXLINE(1420)													layoutGroup = null();
HXDLIN(1420)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1420)													{
HXLINE(1420)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1420)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1420)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1420)															bool _hx_tmp48;
HXDLIN(1420)															if (hx::IsNotNull( font )) {
HXLINE(1420)																_hx_tmp48 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1420)																_hx_tmp48 = false;
            															}
HXDLIN(1420)															if (_hx_tmp48) {
HXLINE(1420)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1420)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1420)																ascent = currentFormat->size;
HXDLIN(1420)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1420)														leading = currentFormat->leading;
HXDLIN(1420)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1420)														if ((heightValue > maxHeightValue)) {
HXLINE(1420)															maxHeightValue = heightValue;
            														}
HXDLIN(1420)														if ((ascent > maxAscent)) {
HXLINE(1420)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1420)												while(true){
HXLINE(1420)													int tempRangeEnd9;
HXDLIN(1420)													if ((placeIndex1 < formatRange->end)) {
HXLINE(1420)														tempRangeEnd9 = placeIndex1;
            													}
            													else {
HXLINE(1420)														tempRangeEnd9 = formatRange->end;
            													}
HXDLIN(1420)													if ((textIndex != tempRangeEnd9)) {
HXLINE(1420)														::String text19 = _gthis->text;
HXDLIN(1420)														Float letterSpacing19 = ((Float)0.0);
HXDLIN(1420)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)															letterSpacing19 = formatRange->format->letterSpacing;
            														}
HXDLIN(1420)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1420)														Float width40 = ((Float)0.0);
HXDLIN(1420)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1420)														_gthis->_hx___textLayout->letterSpacing = letterSpacing19;
HXDLIN(1420)														bool positions13;
HXDLIN(1420)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)															positions13 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1420)															positions13 = true;
            														}
HXDLIN(1420)														_gthis->_hx___textLayout->autoHint = positions13;
HXDLIN(1420)														 ::openfl::_internal::text::TextLayout _gthis20 = _gthis->_hx___textLayout;
HXDLIN(1420)														_gthis20->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text19,textIndex,tempRangeEnd9));
HXDLIN(1420)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)														Float width41 = ((Float)0.0);
HXDLIN(1420)														{
HXLINE(1420)															int _g23 = (int)0;
HXDLIN(1420)															while((_g23 < positions->length)){
HXLINE(1420)																 ::openfl::_internal::text::GlyphPosition position21 = positions->__get(_g23).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)																_g23 = (_g23 + (int)1);
HXDLIN(1420)																width41 = (width41 + position21->advance->x);
            															}
            														}
HXDLIN(1420)														widthValue = width41;
HXDLIN(1420)														bool _hx_tmp49;
HXDLIN(1420)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1420)															_hx_tmp49 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1420)															_hx_tmp49 = true;
            														}
HXDLIN(1420)														if (_hx_tmp49) {
HXLINE(1420)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd9);
HXDLIN(1420)															::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            														}
            														else {
HXLINE(1420)															layoutGroup->format = formatRange->format;
HXDLIN(1420)															layoutGroup->startIndex = textIndex;
HXDLIN(1420)															layoutGroup->endIndex = tempRangeEnd9;
            														}
HXDLIN(1420)														layoutGroup->positions = positions;
HXDLIN(1420)														layoutGroup->offsetX = offsetX;
HXDLIN(1420)														layoutGroup->ascent = ascent;
HXDLIN(1420)														layoutGroup->descent = descent;
HXDLIN(1420)														layoutGroup->leading = leading;
HXDLIN(1420)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1420)														layoutGroup->offsetY = offsetY;
HXDLIN(1420)														layoutGroup->width = widthValue;
HXDLIN(1420)														layoutGroup->height = heightValue;
HXDLIN(1420)														offsetX = (offsetX + widthValue);
HXDLIN(1420)														textIndex = tempRangeEnd9;
            													}
HXDLIN(1420)													if ((tempRangeEnd9 == formatRange->end)) {
HXLINE(1420)														layoutGroup = null();
            													}
HXDLIN(1420)													if ((tempRangeEnd9 == placeIndex1)) {
HXLINE(1420)														goto _hx_goto_55;
            													}
HXDLIN(1420)													bool _hx_tmp50;
HXDLIN(1420)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1420)														_hx_tmp50 = true;
            													}
            													else {
HXLINE(1420)														_hx_tmp50 = false;
            													}
HXDLIN(1420)													if (!(_hx_tmp50)) {
HXLINE(1420)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1420)														goto _hx_goto_55;
            													}
HXDLIN(1420)													{
HXLINE(1420)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1420)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1420)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1420)															bool _hx_tmp51;
HXDLIN(1420)															if (hx::IsNotNull( font )) {
HXLINE(1420)																_hx_tmp51 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1420)																_hx_tmp51 = false;
            															}
HXDLIN(1420)															if (_hx_tmp51) {
HXLINE(1420)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1420)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1420)																ascent = currentFormat->size;
HXDLIN(1420)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1420)														leading = currentFormat->leading;
HXDLIN(1420)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1420)														if ((heightValue > maxHeightValue)) {
HXLINE(1420)															maxHeightValue = heightValue;
            														}
HXDLIN(1420)														if ((ascent > maxAscent)) {
HXLINE(1420)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_55:;
            											}
HXDLIN(1420)											textIndex = placeIndex1;
            										}
HXDLIN(1420)										{
HXLINE(1420)											{
HXLINE(1420)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1420)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1420)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1420)													bool _hx_tmp52;
HXDLIN(1420)													if (hx::IsNotNull( font )) {
HXLINE(1420)														_hx_tmp52 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1420)														_hx_tmp52 = false;
            													}
HXDLIN(1420)													if (_hx_tmp52) {
HXLINE(1420)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1420)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1420)														ascent = currentFormat->size;
HXDLIN(1420)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1420)												leading = currentFormat->leading;
HXDLIN(1420)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1420)												if ((heightValue > maxHeightValue)) {
HXLINE(1420)													maxHeightValue = heightValue;
            												}
HXDLIN(1420)												if ((ascent > maxAscent)) {
HXLINE(1420)													maxAscent = ascent;
            												}
            											}
HXDLIN(1420)											int i7 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1420)											while(true){
HXLINE(1420)												i7 = (i7 - (int)1);
HXDLIN(1420)												if (!((i7 > (int)-1))) {
HXLINE(1420)													goto _hx_goto_57;
            												}
HXDLIN(1420)												 ::openfl::_internal::text::TextLayoutGroup lg3 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i7)) );
HXDLIN(1420)												if ((lg3->lineIndex < lineIndex)) {
HXLINE(1420)													goto _hx_goto_57;
            												}
HXDLIN(1420)												if ((lg3->lineIndex > lineIndex)) {
HXLINE(1420)													continue;
            												}
HXDLIN(1420)												lg3->ascent = maxAscent;
HXDLIN(1420)												lg3->height = maxHeightValue;
            											}
            											_hx_goto_57:;
HXDLIN(1420)											offsetY = (offsetY + maxHeightValue);
HXDLIN(1420)											maxAscent = ((Float)0.0);
HXDLIN(1420)											maxHeightValue = (int)0;
HXDLIN(1420)											lineIndex = (lineIndex + (int)1);
HXDLIN(1420)											offsetX = (int)2;
            										}
HXDLIN(1420)										if ((endIndex2 <= formatRange->end)) {
HXLINE(1420)											::String text20 = _gthis->text;
HXDLIN(1420)											Float letterSpacing20 = ((Float)0.0);
HXDLIN(1420)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)												letterSpacing20 = formatRange->format->letterSpacing;
            											}
HXDLIN(1420)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1420)											Float width42 = ((Float)0.0);
HXDLIN(1420)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1420)											_gthis->_hx___textLayout->letterSpacing = letterSpacing20;
HXDLIN(1420)											bool positions14;
HXDLIN(1420)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)												positions14 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1420)												positions14 = true;
            											}
HXDLIN(1420)											_gthis->_hx___textLayout->autoHint = positions14;
HXDLIN(1420)											 ::openfl::_internal::text::TextLayout _gthis21 = _gthis->_hx___textLayout;
HXDLIN(1420)											_gthis21->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text20,placeIndex1,endIndex2));
HXDLIN(1420)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)											Float width43 = ((Float)0.0);
HXDLIN(1420)											{
HXLINE(1420)												int _g24 = (int)0;
HXDLIN(1420)												while((_g24 < positions->length)){
HXLINE(1420)													 ::openfl::_internal::text::GlyphPosition position22 = positions->__get(_g24).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)													_g24 = (_g24 + (int)1);
HXDLIN(1420)													width43 = (width43 + position22->advance->x);
            												}
            											}
HXDLIN(1420)											widthValue = width43;
            										}
            										else {
HXLINE(1420)											int tempIndex7 = placeIndex1;
HXDLIN(1420)											int tempRangeEnd10 = formatRange->end;
HXDLIN(1420)											int countRanges7 = (int)0;
HXDLIN(1420)											positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1420)											widthValue = (int)0;
HXDLIN(1420)											while(true){
HXLINE(1420)												if ((tempIndex7 != tempRangeEnd10)) {
HXLINE(1420)													::String text21 = _gthis->text;
HXDLIN(1420)													Float letterSpacing21 = ((Float)0.0);
HXDLIN(1420)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)														letterSpacing21 = formatRange->format->letterSpacing;
            													}
HXDLIN(1420)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1420)													Float width44 = ((Float)0.0);
HXDLIN(1420)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1420)													_gthis->_hx___textLayout->letterSpacing = letterSpacing21;
HXDLIN(1420)													bool _hx_tmp53;
HXDLIN(1420)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)														_hx_tmp53 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1420)														_hx_tmp53 = true;
            													}
HXDLIN(1420)													_gthis->_hx___textLayout->autoHint = _hx_tmp53;
HXDLIN(1420)													 ::openfl::_internal::text::TextLayout _gthis22 = _gthis->_hx___textLayout;
HXDLIN(1420)													_gthis22->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text21,tempIndex7,tempRangeEnd10));
HXDLIN(1420)													::Array< ::Dynamic> tempPositions7 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)													positions = positions->concat(tempPositions7);
            												}
HXDLIN(1420)												if ((tempRangeEnd10 != endIndex2)) {
HXLINE(1420)													bool _hx_tmp54;
HXDLIN(1420)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1420)														_hx_tmp54 = true;
            													}
            													else {
HXLINE(1420)														_hx_tmp54 = false;
            													}
HXDLIN(1420)													if (!(_hx_tmp54)) {
HXLINE(1420)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1420)														goto _hx_goto_59;
            													}
HXDLIN(1420)													tempIndex7 = tempRangeEnd10;
HXDLIN(1420)													if ((endIndex2 < formatRange->end)) {
HXLINE(1420)														tempRangeEnd10 = endIndex2;
            													}
            													else {
HXLINE(1420)														tempRangeEnd10 = formatRange->end;
            													}
HXDLIN(1420)													countRanges7 = (countRanges7 + (int)1);
            												}
            												else {
HXLINE(1420)													Float width45 = ((Float)0.0);
HXDLIN(1420)													{
HXLINE(1420)														int _g25 = (int)0;
HXDLIN(1420)														while((_g25 < positions->length)){
HXLINE(1420)															 ::openfl::_internal::text::GlyphPosition position23 = positions->__get(_g25).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)															_g25 = (_g25 + (int)1);
HXDLIN(1420)															width45 = (width45 + position23->advance->x);
            														}
            													}
HXDLIN(1420)													widthValue = width45;
HXDLIN(1420)													goto _hx_goto_59;
            												}
            											}
            											_hx_goto_59:;
HXDLIN(1420)											rangeIndex = (rangeIndex - (countRanges7 + (int)1));
HXDLIN(1420)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
            										}
HXDLIN(1420)										remainingPositions1 = positions;
HXDLIN(1420)										tempWidth1 = widthValue;
            									}
            									_hx_goto_45:;
            								}
HXDLIN(1420)								{
HXLINE(1420)									if ((endIndex2 <= formatRange->end)) {
HXLINE(1420)										::String text22 = _gthis->text;
HXDLIN(1420)										Float letterSpacing22 = ((Float)0.0);
HXDLIN(1420)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)											letterSpacing22 = formatRange->format->letterSpacing;
            										}
HXDLIN(1420)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1420)										Float width46 = ((Float)0.0);
HXDLIN(1420)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1420)										_gthis->_hx___textLayout->letterSpacing = letterSpacing22;
HXDLIN(1420)										bool positions15;
HXDLIN(1420)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)											positions15 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1420)											positions15 = true;
            										}
HXDLIN(1420)										_gthis->_hx___textLayout->autoHint = positions15;
HXDLIN(1420)										 ::openfl::_internal::text::TextLayout _gthis23 = _gthis->_hx___textLayout;
HXDLIN(1420)										_gthis23->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text22,textIndex,endIndex2));
HXDLIN(1420)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)										Float width47 = ((Float)0.0);
HXDLIN(1420)										{
HXLINE(1420)											int _g26 = (int)0;
HXDLIN(1420)											while((_g26 < positions->length)){
HXLINE(1420)												 ::openfl::_internal::text::GlyphPosition position24 = positions->__get(_g26).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)												_g26 = (_g26 + (int)1);
HXDLIN(1420)												width47 = (width47 + position24->advance->x);
            											}
            										}
HXDLIN(1420)										widthValue = width47;
HXDLIN(1420)										bool _hx_tmp55;
HXDLIN(1420)										if (hx::IsNotNull( layoutGroup )) {
HXLINE(1420)											_hx_tmp55 = (layoutGroup->startIndex != layoutGroup->endIndex);
            										}
            										else {
HXLINE(1420)											_hx_tmp55 = true;
            										}
HXDLIN(1420)										if (_hx_tmp55) {
HXLINE(1420)											layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1420)											::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            										}
            										else {
HXLINE(1420)											layoutGroup->format = formatRange->format;
HXDLIN(1420)											layoutGroup->startIndex = textIndex;
HXDLIN(1420)											layoutGroup->endIndex = endIndex2;
            										}
HXDLIN(1420)										layoutGroup->positions = positions;
HXDLIN(1420)										layoutGroup->offsetX = offsetX;
HXDLIN(1420)										layoutGroup->ascent = ascent;
HXDLIN(1420)										layoutGroup->descent = descent;
HXDLIN(1420)										layoutGroup->leading = leading;
HXDLIN(1420)										layoutGroup->lineIndex = lineIndex;
HXDLIN(1420)										layoutGroup->offsetY = offsetY;
HXDLIN(1420)										layoutGroup->width = widthValue;
HXDLIN(1420)										layoutGroup->height = heightValue;
HXDLIN(1420)										offsetX = (offsetX + widthValue);
HXDLIN(1420)										if ((endIndex2 == formatRange->end)) {
HXLINE(1420)											layoutGroup = null();
HXDLIN(1420)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            											}
HXDLIN(1420)											{
HXLINE(1420)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1420)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1420)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1420)													bool _hx_tmp56;
HXDLIN(1420)													if (hx::IsNotNull( font )) {
HXLINE(1420)														_hx_tmp56 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1420)														_hx_tmp56 = false;
            													}
HXDLIN(1420)													if (_hx_tmp56) {
HXLINE(1420)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1420)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1420)														ascent = currentFormat->size;
HXDLIN(1420)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1420)												leading = currentFormat->leading;
HXDLIN(1420)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1420)												if ((heightValue > maxHeightValue)) {
HXLINE(1420)													maxHeightValue = heightValue;
            												}
HXDLIN(1420)												if ((ascent > maxAscent)) {
HXLINE(1420)													maxAscent = ascent;
            												}
            											}
            										}
            									}
            									else {
HXLINE(1420)										while(true){
HXLINE(1420)											int tempRangeEnd11;
HXDLIN(1420)											if ((endIndex2 < formatRange->end)) {
HXLINE(1420)												tempRangeEnd11 = endIndex2;
            											}
            											else {
HXLINE(1420)												tempRangeEnd11 = formatRange->end;
            											}
HXDLIN(1420)											if ((textIndex != tempRangeEnd11)) {
HXLINE(1420)												::String text23 = _gthis->text;
HXDLIN(1420)												Float letterSpacing23 = ((Float)0.0);
HXDLIN(1420)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1420)													letterSpacing23 = formatRange->format->letterSpacing;
            												}
HXDLIN(1420)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1420)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1420)												Float width48 = ((Float)0.0);
HXDLIN(1420)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1420)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1420)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1420)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1420)												_gthis->_hx___textLayout->letterSpacing = letterSpacing23;
HXDLIN(1420)												bool positions16;
HXDLIN(1420)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1420)													positions16 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1420)													positions16 = true;
            												}
HXDLIN(1420)												_gthis->_hx___textLayout->autoHint = positions16;
HXDLIN(1420)												 ::openfl::_internal::text::TextLayout _gthis24 = _gthis->_hx___textLayout;
HXDLIN(1420)												_gthis24->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text23,textIndex,tempRangeEnd11));
HXDLIN(1420)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1420)												Float width49 = ((Float)0.0);
HXDLIN(1420)												{
HXLINE(1420)													int _g27 = (int)0;
HXDLIN(1420)													while((_g27 < positions->length)){
HXLINE(1420)														 ::openfl::_internal::text::GlyphPosition position25 = positions->__get(_g27).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1420)														_g27 = (_g27 + (int)1);
HXDLIN(1420)														width49 = (width49 + position25->advance->x);
            													}
            												}
HXDLIN(1420)												widthValue = width49;
HXDLIN(1420)												bool _hx_tmp57;
HXDLIN(1420)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1420)													_hx_tmp57 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1420)													_hx_tmp57 = true;
            												}
HXDLIN(1420)												if (_hx_tmp57) {
HXLINE(1420)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd11);
HXDLIN(1420)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1420)													layoutGroup->format = formatRange->format;
HXDLIN(1420)													layoutGroup->startIndex = textIndex;
HXDLIN(1420)													layoutGroup->endIndex = tempRangeEnd11;
            												}
HXDLIN(1420)												layoutGroup->positions = positions;
HXDLIN(1420)												layoutGroup->offsetX = offsetX;
HXDLIN(1420)												layoutGroup->ascent = ascent;
HXDLIN(1420)												layoutGroup->descent = descent;
HXDLIN(1420)												layoutGroup->leading = leading;
HXDLIN(1420)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1420)												layoutGroup->offsetY = offsetY;
HXDLIN(1420)												layoutGroup->width = widthValue;
HXDLIN(1420)												layoutGroup->height = heightValue;
HXDLIN(1420)												offsetX = (offsetX + widthValue);
HXDLIN(1420)												textIndex = tempRangeEnd11;
            											}
HXDLIN(1420)											if ((tempRangeEnd11 == formatRange->end)) {
HXLINE(1420)												layoutGroup = null();
            											}
HXDLIN(1420)											if ((tempRangeEnd11 == endIndex2)) {
HXLINE(1420)												goto _hx_goto_62;
            											}
HXDLIN(1420)											bool _hx_tmp58;
HXDLIN(1420)											if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1420)												rangeIndex = (rangeIndex + (int)1);
HXDLIN(1420)												formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1420)												currentFormat->_hx___merge(formatRange->format);
HXDLIN(1420)												font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1420)												_hx_tmp58 = true;
            											}
            											else {
HXLINE(1420)												_hx_tmp58 = false;
            											}
HXDLIN(1420)											if (!(_hx_tmp58)) {
HXLINE(1420)												::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1420)												goto _hx_goto_62;
            											}
HXDLIN(1420)											{
HXLINE(1420)												if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1420)													ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1420)													descent = (currentFormat->size * currentFormat->_hx___descent);
            												}
            												else {
HXLINE(1420)													bool _hx_tmp59;
HXDLIN(1420)													if (hx::IsNotNull( font )) {
HXLINE(1420)														_hx_tmp59 = (font->unitsPerEM != (int)0);
            													}
            													else {
HXLINE(1420)														_hx_tmp59 = false;
            													}
HXDLIN(1420)													if (_hx_tmp59) {
HXLINE(1420)														ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1420)														descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            													}
            													else {
HXLINE(1420)														ascent = currentFormat->size;
HXDLIN(1420)														descent = (currentFormat->size * ((Float)0.185));
            													}
            												}
HXDLIN(1420)												leading = currentFormat->leading;
HXDLIN(1420)												heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1420)												if ((heightValue > maxHeightValue)) {
HXLINE(1420)													maxHeightValue = heightValue;
            												}
HXDLIN(1420)												if ((ascent > maxAscent)) {
HXLINE(1420)													maxAscent = ascent;
            												}
            											}
            										}
            										_hx_goto_62:;
            									}
HXDLIN(1420)									textIndex = endIndex2;
            								}
            							}
HXLINE(1422)							wrap = false;
            						}
            						else {
HXLINE(1426)							bool _hx_tmp60;
HXDLIN(1426)							if (hx::IsNotNull( layoutGroup )) {
HXLINE(1426)								_hx_tmp60 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE(1426)								_hx_tmp60 = false;
            							}
HXDLIN(1426)							if (_hx_tmp60) {
HXLINE(1429)								if (hx::IsNotEq( lineFormat->align,(int)2 )) {
HXLINE(1431)									layoutGroup->endIndex = spaceIndex;
HXLINE(1432)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1433)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1433)									layoutGroup3->width = (layoutGroup3->width + widthValue);
            								}
HXLINE(1436)								offsetX = (offsetX + widthValue);
HXLINE(1438)								textIndex = endIndex2;
            							}
            							else {
HXLINE(1440)								bool _hx_tmp61;
HXDLIN(1440)								if (hx::IsNotNull( layoutGroup )) {
HXLINE(1440)									_hx_tmp61 = hx::IsEq( lineFormat->align,(int)2 );
            								}
            								else {
HXLINE(1440)									_hx_tmp61 = true;
            								}
HXDLIN(1440)								if (_hx_tmp61) {
HXLINE(1442)									bool _hx_tmp62;
HXDLIN(1442)									if ((_gthis->width >= (int)4)) {
HXLINE(1442)										_hx_tmp62 = _gthis->wordWrap;
            									}
            									else {
HXLINE(1442)										_hx_tmp62 = false;
            									}
HXDLIN(1442)									if (_hx_tmp62) {
HXLINE(1442)										::Array< ::Dynamic> remainingPositions2 = positions;
HXDLIN(1442)										int i8;
HXDLIN(1442)										int bufferCount2;
HXDLIN(1442)										int placeIndex2;
HXDLIN(1442)										Float positionWidth2;
HXDLIN(1442)										 ::openfl::_internal::text::GlyphPosition currentPosition2;
HXDLIN(1442)										Float width50 = ((Float)0.0);
HXDLIN(1442)										{
HXLINE(1442)											int _g28 = (int)0;
HXDLIN(1442)											while((_g28 < remainingPositions2->length)){
HXLINE(1442)												 ::openfl::_internal::text::GlyphPosition position26 = remainingPositions2->__get(_g28).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)												_g28 = (_g28 + (int)1);
HXDLIN(1442)												width50 = (width50 + position26->advance->x);
            											}
            										}
HXDLIN(1442)										Float tempWidth2 = width50;
HXDLIN(1442)										while(((offsetX + tempWidth2) > (_gthis->width - (int)2))){
HXLINE(1442)											bufferCount2 = (int)0;
HXDLIN(1442)											i8 = bufferCount2;
HXDLIN(1442)											positionWidth2 = ((Float)0.0);
HXDLIN(1442)											while(((offsetX + positionWidth2) < (_gthis->width - (int)2))){
HXLINE(1442)												currentPosition2 = remainingPositions2->__get(i8).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)												if ((currentPosition2->advance->x == ((Float)0.0))) {
HXLINE(1442)													i8 = (i8 + (int)1);
HXDLIN(1442)													bufferCount2 = (bufferCount2 + (int)1);
            												}
            												else {
HXLINE(1442)													positionWidth2 = (positionWidth2 + currentPosition2->advance->x);
HXDLIN(1442)													i8 = (i8 + (int)1);
            												}
            											}
HXDLIN(1442)											if ((positionWidth2 == ((Float)0.0))) {
HXLINE(1442)												goto _hx_goto_65;
            											}
            											else {
HXLINE(1442)												bool _hx_tmp63;
HXDLIN(1442)												if ((i8 < (int)2)) {
HXLINE(1442)													_hx_tmp63 = ((positionWidth2 + offsetX) > (_gthis->width - (int)2));
            												}
            												else {
HXLINE(1442)													_hx_tmp63 = false;
            												}
HXDLIN(1442)												if (_hx_tmp63) {
HXLINE(1442)													if ((((textIndex + i8) - bufferCount2) == endIndex2)) {
HXLINE(1442)														goto _hx_goto_65;
            													}
            												}
            												else {
HXLINE(1442)													while(((offsetX + positionWidth2) > (_gthis->width - (int)2))){
HXLINE(1442)														i8 = (i8 - (int)1);
HXDLIN(1442)														if (((i8 - bufferCount2) > (int)0)) {
HXLINE(1442)															{
HXLINE(1442)																int endIndex5 = ((textIndex + i8) - bufferCount2);
HXDLIN(1442)																if ((endIndex5 <= formatRange->end)) {
HXLINE(1442)																	::String text24 = _gthis->text;
HXDLIN(1442)																	Float letterSpacing24 = ((Float)0.0);
HXDLIN(1442)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)																		letterSpacing24 = formatRange->format->letterSpacing;
            																	}
HXDLIN(1442)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1442)																	Float width51 = ((Float)0.0);
HXDLIN(1442)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)																		_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																	}
HXDLIN(1442)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing24;
HXDLIN(1442)																	bool positions17;
HXDLIN(1442)																	if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)																		positions17 = (_gthis->sharpness < (int)400);
            																	}
            																	else {
HXLINE(1442)																		positions17 = true;
            																	}
HXDLIN(1442)																	_gthis->_hx___textLayout->autoHint = positions17;
HXDLIN(1442)																	 ::openfl::_internal::text::TextLayout _gthis25 = _gthis->_hx___textLayout;
HXDLIN(1442)																	_gthis25->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text24,textIndex,endIndex5));
HXDLIN(1442)																	positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)																	Float width52 = ((Float)0.0);
HXDLIN(1442)																	{
HXLINE(1442)																		int _g29 = (int)0;
HXDLIN(1442)																		while((_g29 < positions->length)){
HXLINE(1442)																			 ::openfl::_internal::text::GlyphPosition position27 = positions->__get(_g29).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)																			_g29 = (_g29 + (int)1);
HXDLIN(1442)																			width52 = (width52 + position27->advance->x);
            																		}
            																	}
HXDLIN(1442)																	widthValue = width52;
            																}
            																else {
HXLINE(1442)																	int tempIndex8 = textIndex;
HXDLIN(1442)																	int tempRangeEnd12 = formatRange->end;
HXDLIN(1442)																	int countRanges8 = (int)0;
HXDLIN(1442)																	positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1442)																	widthValue = (int)0;
HXDLIN(1442)																	while(true){
HXLINE(1442)																		if ((tempIndex8 != tempRangeEnd12)) {
HXLINE(1442)																			::String text25 = _gthis->text;
HXDLIN(1442)																			Float letterSpacing25 = ((Float)0.0);
HXDLIN(1442)																			if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)																				letterSpacing25 = formatRange->format->letterSpacing;
            																			}
HXDLIN(1442)																			if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)																				_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																			}
HXDLIN(1442)																			Float width53 = ((Float)0.0);
HXDLIN(1442)																			_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)																			_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)																			if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)																				_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																			}
HXDLIN(1442)																			_gthis->_hx___textLayout->letterSpacing = letterSpacing25;
HXDLIN(1442)																			bool _hx_tmp64;
HXDLIN(1442)																			if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)																				_hx_tmp64 = (_gthis->sharpness < (int)400);
            																			}
            																			else {
HXLINE(1442)																				_hx_tmp64 = true;
            																			}
HXDLIN(1442)																			_gthis->_hx___textLayout->autoHint = _hx_tmp64;
HXDLIN(1442)																			 ::openfl::_internal::text::TextLayout _gthis26 = _gthis->_hx___textLayout;
HXDLIN(1442)																			_gthis26->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text25,tempIndex8,tempRangeEnd12));
HXDLIN(1442)																			::Array< ::Dynamic> tempPositions8 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)																			positions = positions->concat(tempPositions8);
            																		}
HXDLIN(1442)																		if ((tempRangeEnd12 != endIndex5)) {
HXLINE(1442)																			bool _hx_tmp65;
HXDLIN(1442)																			if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)																				rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)																				formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)																				currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)																				font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1442)																				_hx_tmp65 = true;
            																			}
            																			else {
HXLINE(1442)																				_hx_tmp65 = false;
            																			}
HXDLIN(1442)																			if (!(_hx_tmp65)) {
HXLINE(1442)																				::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1442)																				goto _hx_goto_69;
            																			}
HXDLIN(1442)																			tempIndex8 = tempRangeEnd12;
HXDLIN(1442)																			if ((endIndex5 < formatRange->end)) {
HXLINE(1442)																				tempRangeEnd12 = endIndex5;
            																			}
            																			else {
HXLINE(1442)																				tempRangeEnd12 = formatRange->end;
            																			}
HXDLIN(1442)																			countRanges8 = (countRanges8 + (int)1);
            																		}
            																		else {
HXLINE(1442)																			Float width54 = ((Float)0.0);
HXDLIN(1442)																			{
HXLINE(1442)																				int _g30 = (int)0;
HXDLIN(1442)																				while((_g30 < positions->length)){
HXLINE(1442)																					 ::openfl::_internal::text::GlyphPosition position28 = positions->__get(_g30).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)																					_g30 = (_g30 + (int)1);
HXDLIN(1442)																					width54 = (width54 + position28->advance->x);
            																				}
            																			}
HXDLIN(1442)																			widthValue = width54;
HXDLIN(1442)																			goto _hx_goto_69;
            																		}
            																	}
            																	_hx_goto_69:;
HXDLIN(1442)																	rangeIndex = (rangeIndex - (countRanges8 + (int)1));
HXDLIN(1442)																	if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)																		rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)																		formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)																		currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																	}
            																}
            															}
HXDLIN(1442)															positionWidth2 = widthValue;
            														}
            														else {
HXLINE(1442)															i8 = (int)1;
HXDLIN(1442)															bufferCount2 = (int)0;
HXDLIN(1442)															{
HXLINE(1442)																int endIndex6 = (textIndex + (int)1);
HXDLIN(1442)																if ((endIndex6 <= formatRange->end)) {
HXLINE(1442)																	::String text26 = _gthis->text;
HXDLIN(1442)																	Float letterSpacing26 = ((Float)0.0);
HXDLIN(1442)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)																		letterSpacing26 = formatRange->format->letterSpacing;
            																	}
HXDLIN(1442)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1442)																	Float width55 = ((Float)0.0);
HXDLIN(1442)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)																		_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																	}
HXDLIN(1442)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing26;
HXDLIN(1442)																	bool positions18;
HXDLIN(1442)																	if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)																		positions18 = (_gthis->sharpness < (int)400);
            																	}
            																	else {
HXLINE(1442)																		positions18 = true;
            																	}
HXDLIN(1442)																	_gthis->_hx___textLayout->autoHint = positions18;
HXDLIN(1442)																	 ::openfl::_internal::text::TextLayout _gthis27 = _gthis->_hx___textLayout;
HXDLIN(1442)																	_gthis27->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text26,textIndex,endIndex6));
HXDLIN(1442)																	positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)																	Float width56 = ((Float)0.0);
HXDLIN(1442)																	{
HXLINE(1442)																		int _g31 = (int)0;
HXDLIN(1442)																		while((_g31 < positions->length)){
HXLINE(1442)																			 ::openfl::_internal::text::GlyphPosition position29 = positions->__get(_g31).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)																			_g31 = (_g31 + (int)1);
HXDLIN(1442)																			width56 = (width56 + position29->advance->x);
            																		}
            																	}
HXDLIN(1442)																	widthValue = width56;
            																}
            																else {
HXLINE(1442)																	int tempIndex9 = textIndex;
HXDLIN(1442)																	int tempRangeEnd13 = formatRange->end;
HXDLIN(1442)																	int countRanges9 = (int)0;
HXDLIN(1442)																	positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1442)																	widthValue = (int)0;
HXDLIN(1442)																	while(true){
HXLINE(1442)																		if ((tempIndex9 != tempRangeEnd13)) {
HXLINE(1442)																			::String text27 = _gthis->text;
HXDLIN(1442)																			Float letterSpacing27 = ((Float)0.0);
HXDLIN(1442)																			if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)																				letterSpacing27 = formatRange->format->letterSpacing;
            																			}
HXDLIN(1442)																			if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)																				_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																			}
HXDLIN(1442)																			Float width57 = ((Float)0.0);
HXDLIN(1442)																			_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)																			_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)																			if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)																				_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																			}
HXDLIN(1442)																			_gthis->_hx___textLayout->letterSpacing = letterSpacing27;
HXDLIN(1442)																			bool _hx_tmp66;
HXDLIN(1442)																			if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)																				_hx_tmp66 = (_gthis->sharpness < (int)400);
            																			}
            																			else {
HXLINE(1442)																				_hx_tmp66 = true;
            																			}
HXDLIN(1442)																			_gthis->_hx___textLayout->autoHint = _hx_tmp66;
HXDLIN(1442)																			 ::openfl::_internal::text::TextLayout _gthis28 = _gthis->_hx___textLayout;
HXDLIN(1442)																			_gthis28->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text27,tempIndex9,tempRangeEnd13));
HXDLIN(1442)																			::Array< ::Dynamic> tempPositions9 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)																			positions = positions->concat(tempPositions9);
            																		}
HXDLIN(1442)																		if ((tempRangeEnd13 != endIndex6)) {
HXLINE(1442)																			bool _hx_tmp67;
HXDLIN(1442)																			if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)																				rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)																				formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)																				currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)																				font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1442)																				_hx_tmp67 = true;
            																			}
            																			else {
HXLINE(1442)																				_hx_tmp67 = false;
            																			}
HXDLIN(1442)																			if (!(_hx_tmp67)) {
HXLINE(1442)																				::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1442)																				goto _hx_goto_72;
            																			}
HXDLIN(1442)																			tempIndex9 = tempRangeEnd13;
HXDLIN(1442)																			if ((endIndex6 < formatRange->end)) {
HXLINE(1442)																				tempRangeEnd13 = endIndex6;
            																			}
            																			else {
HXLINE(1442)																				tempRangeEnd13 = formatRange->end;
            																			}
HXDLIN(1442)																			countRanges9 = (countRanges9 + (int)1);
            																		}
            																		else {
HXLINE(1442)																			Float width58 = ((Float)0.0);
HXDLIN(1442)																			{
HXLINE(1442)																				int _g32 = (int)0;
HXDLIN(1442)																				while((_g32 < positions->length)){
HXLINE(1442)																					 ::openfl::_internal::text::GlyphPosition position30 = positions->__get(_g32).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)																					_g32 = (_g32 + (int)1);
HXDLIN(1442)																					width58 = (width58 + position30->advance->x);
            																				}
            																			}
HXDLIN(1442)																			widthValue = width58;
HXDLIN(1442)																			goto _hx_goto_72;
            																		}
            																	}
            																	_hx_goto_72:;
HXDLIN(1442)																	rangeIndex = (rangeIndex - (countRanges9 + (int)1));
HXDLIN(1442)																	if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)																		rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)																		formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)																		currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            																	}
            																}
            															}
HXDLIN(1442)															positionWidth2 = (int)0;
            														}
            													}
            												}
            											}
HXDLIN(1442)											placeIndex2 = ((textIndex + i8) - bufferCount2);
HXDLIN(1442)											{
HXLINE(1442)												if ((placeIndex2 <= formatRange->end)) {
HXLINE(1442)													::String text28 = _gthis->text;
HXDLIN(1442)													Float letterSpacing28 = ((Float)0.0);
HXDLIN(1442)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)														letterSpacing28 = formatRange->format->letterSpacing;
            													}
HXDLIN(1442)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1442)													Float width59 = ((Float)0.0);
HXDLIN(1442)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1442)													_gthis->_hx___textLayout->letterSpacing = letterSpacing28;
HXDLIN(1442)													bool positions19;
HXDLIN(1442)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)														positions19 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1442)														positions19 = true;
            													}
HXDLIN(1442)													_gthis->_hx___textLayout->autoHint = positions19;
HXDLIN(1442)													 ::openfl::_internal::text::TextLayout _gthis29 = _gthis->_hx___textLayout;
HXDLIN(1442)													_gthis29->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text28,textIndex,placeIndex2));
HXDLIN(1442)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)													Float width60 = ((Float)0.0);
HXDLIN(1442)													{
HXLINE(1442)														int _g33 = (int)0;
HXDLIN(1442)														while((_g33 < positions->length)){
HXLINE(1442)															 ::openfl::_internal::text::GlyphPosition position31 = positions->__get(_g33).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)															_g33 = (_g33 + (int)1);
HXDLIN(1442)															width60 = (width60 + position31->advance->x);
            														}
            													}
HXDLIN(1442)													widthValue = width60;
HXDLIN(1442)													bool _hx_tmp68;
HXDLIN(1442)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1442)														_hx_tmp68 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1442)														_hx_tmp68 = true;
            													}
HXDLIN(1442)													if (_hx_tmp68) {
HXLINE(1442)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex2);
HXDLIN(1442)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1442)														layoutGroup->format = formatRange->format;
HXDLIN(1442)														layoutGroup->startIndex = textIndex;
HXDLIN(1442)														layoutGroup->endIndex = placeIndex2;
            													}
HXDLIN(1442)													layoutGroup->positions = positions;
HXDLIN(1442)													layoutGroup->offsetX = offsetX;
HXDLIN(1442)													layoutGroup->ascent = ascent;
HXDLIN(1442)													layoutGroup->descent = descent;
HXDLIN(1442)													layoutGroup->leading = leading;
HXDLIN(1442)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1442)													layoutGroup->offsetY = offsetY;
HXDLIN(1442)													layoutGroup->width = widthValue;
HXDLIN(1442)													layoutGroup->height = heightValue;
HXDLIN(1442)													offsetX = (offsetX + widthValue);
HXDLIN(1442)													if ((placeIndex2 == formatRange->end)) {
HXLINE(1442)														layoutGroup = null();
HXDLIN(1442)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            														}
HXDLIN(1442)														{
HXLINE(1442)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1442)																ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1442)																descent = (currentFormat->size * currentFormat->_hx___descent);
            															}
            															else {
HXLINE(1442)																bool _hx_tmp69;
HXDLIN(1442)																if (hx::IsNotNull( font )) {
HXLINE(1442)																	_hx_tmp69 = (font->unitsPerEM != (int)0);
            																}
            																else {
HXLINE(1442)																	_hx_tmp69 = false;
            																}
HXDLIN(1442)																if (_hx_tmp69) {
HXLINE(1442)																	ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1442)																	descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            																}
            																else {
HXLINE(1442)																	ascent = currentFormat->size;
HXDLIN(1442)																	descent = (currentFormat->size * ((Float)0.185));
            																}
            															}
HXDLIN(1442)															leading = currentFormat->leading;
HXDLIN(1442)															heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1442)															if ((heightValue > maxHeightValue)) {
HXLINE(1442)																maxHeightValue = heightValue;
            															}
HXDLIN(1442)															if ((ascent > maxAscent)) {
HXLINE(1442)																maxAscent = ascent;
            															}
            														}
            													}
            												}
            												else {
HXLINE(1442)													while(true){
HXLINE(1442)														int tempRangeEnd14;
HXDLIN(1442)														if ((placeIndex2 < formatRange->end)) {
HXLINE(1442)															tempRangeEnd14 = placeIndex2;
            														}
            														else {
HXLINE(1442)															tempRangeEnd14 = formatRange->end;
            														}
HXDLIN(1442)														if ((textIndex != tempRangeEnd14)) {
HXLINE(1442)															::String text29 = _gthis->text;
HXDLIN(1442)															Float letterSpacing29 = ((Float)0.0);
HXDLIN(1442)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)																letterSpacing29 = formatRange->format->letterSpacing;
            															}
HXDLIN(1442)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1442)															Float width61 = ((Float)0.0);
HXDLIN(1442)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1442)															_gthis->_hx___textLayout->letterSpacing = letterSpacing29;
HXDLIN(1442)															bool positions20;
HXDLIN(1442)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)																positions20 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1442)																positions20 = true;
            															}
HXDLIN(1442)															_gthis->_hx___textLayout->autoHint = positions20;
HXDLIN(1442)															 ::openfl::_internal::text::TextLayout _gthis30 = _gthis->_hx___textLayout;
HXDLIN(1442)															_gthis30->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text29,textIndex,tempRangeEnd14));
HXDLIN(1442)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)															Float width62 = ((Float)0.0);
HXDLIN(1442)															{
HXLINE(1442)																int _g34 = (int)0;
HXDLIN(1442)																while((_g34 < positions->length)){
HXLINE(1442)																	 ::openfl::_internal::text::GlyphPosition position32 = positions->__get(_g34).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)																	_g34 = (_g34 + (int)1);
HXDLIN(1442)																	width62 = (width62 + position32->advance->x);
            																}
            															}
HXDLIN(1442)															widthValue = width62;
HXDLIN(1442)															bool _hx_tmp70;
HXDLIN(1442)															if (hx::IsNotNull( layoutGroup )) {
HXLINE(1442)																_hx_tmp70 = (layoutGroup->startIndex != layoutGroup->endIndex);
            															}
            															else {
HXLINE(1442)																_hx_tmp70 = true;
            															}
HXDLIN(1442)															if (_hx_tmp70) {
HXLINE(1442)																layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd14);
HXDLIN(1442)																::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            															}
            															else {
HXLINE(1442)																layoutGroup->format = formatRange->format;
HXDLIN(1442)																layoutGroup->startIndex = textIndex;
HXDLIN(1442)																layoutGroup->endIndex = tempRangeEnd14;
            															}
HXDLIN(1442)															layoutGroup->positions = positions;
HXDLIN(1442)															layoutGroup->offsetX = offsetX;
HXDLIN(1442)															layoutGroup->ascent = ascent;
HXDLIN(1442)															layoutGroup->descent = descent;
HXDLIN(1442)															layoutGroup->leading = leading;
HXDLIN(1442)															layoutGroup->lineIndex = lineIndex;
HXDLIN(1442)															layoutGroup->offsetY = offsetY;
HXDLIN(1442)															layoutGroup->width = widthValue;
HXDLIN(1442)															layoutGroup->height = heightValue;
HXDLIN(1442)															offsetX = (offsetX + widthValue);
HXDLIN(1442)															textIndex = tempRangeEnd14;
            														}
HXDLIN(1442)														if ((tempRangeEnd14 == formatRange->end)) {
HXLINE(1442)															layoutGroup = null();
            														}
HXDLIN(1442)														if ((tempRangeEnd14 == placeIndex2)) {
HXLINE(1442)															goto _hx_goto_75;
            														}
HXDLIN(1442)														bool _hx_tmp71;
HXDLIN(1442)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1442)															_hx_tmp71 = true;
            														}
            														else {
HXLINE(1442)															_hx_tmp71 = false;
            														}
HXDLIN(1442)														if (!(_hx_tmp71)) {
HXLINE(1442)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1442)															goto _hx_goto_75;
            														}
HXDLIN(1442)														{
HXLINE(1442)															if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1442)																ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1442)																descent = (currentFormat->size * currentFormat->_hx___descent);
            															}
            															else {
HXLINE(1442)																bool _hx_tmp72;
HXDLIN(1442)																if (hx::IsNotNull( font )) {
HXLINE(1442)																	_hx_tmp72 = (font->unitsPerEM != (int)0);
            																}
            																else {
HXLINE(1442)																	_hx_tmp72 = false;
            																}
HXDLIN(1442)																if (_hx_tmp72) {
HXLINE(1442)																	ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1442)																	descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            																}
            																else {
HXLINE(1442)																	ascent = currentFormat->size;
HXDLIN(1442)																	descent = (currentFormat->size * ((Float)0.185));
            																}
            															}
HXDLIN(1442)															leading = currentFormat->leading;
HXDLIN(1442)															heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1442)															if ((heightValue > maxHeightValue)) {
HXLINE(1442)																maxHeightValue = heightValue;
            															}
HXDLIN(1442)															if ((ascent > maxAscent)) {
HXLINE(1442)																maxAscent = ascent;
            															}
            														}
            													}
            													_hx_goto_75:;
            												}
HXDLIN(1442)												textIndex = placeIndex2;
            											}
HXDLIN(1442)											{
HXLINE(1442)												{
HXLINE(1442)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1442)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1442)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1442)														bool _hx_tmp73;
HXDLIN(1442)														if (hx::IsNotNull( font )) {
HXLINE(1442)															_hx_tmp73 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1442)															_hx_tmp73 = false;
            														}
HXDLIN(1442)														if (_hx_tmp73) {
HXLINE(1442)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1442)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1442)															ascent = currentFormat->size;
HXDLIN(1442)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1442)													leading = currentFormat->leading;
HXDLIN(1442)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1442)													if ((heightValue > maxHeightValue)) {
HXLINE(1442)														maxHeightValue = heightValue;
            													}
HXDLIN(1442)													if ((ascent > maxAscent)) {
HXLINE(1442)														maxAscent = ascent;
            													}
            												}
HXDLIN(1442)												int i9 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1442)												while(true){
HXLINE(1442)													i9 = (i9 - (int)1);
HXDLIN(1442)													if (!((i9 > (int)-1))) {
HXLINE(1442)														goto _hx_goto_77;
            													}
HXDLIN(1442)													 ::openfl::_internal::text::TextLayoutGroup lg4 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i9)) );
HXDLIN(1442)													if ((lg4->lineIndex < lineIndex)) {
HXLINE(1442)														goto _hx_goto_77;
            													}
HXDLIN(1442)													if ((lg4->lineIndex > lineIndex)) {
HXLINE(1442)														continue;
            													}
HXDLIN(1442)													lg4->ascent = maxAscent;
HXDLIN(1442)													lg4->height = maxHeightValue;
            												}
            												_hx_goto_77:;
HXDLIN(1442)												offsetY = (offsetY + maxHeightValue);
HXDLIN(1442)												maxAscent = ((Float)0.0);
HXDLIN(1442)												maxHeightValue = (int)0;
HXDLIN(1442)												lineIndex = (lineIndex + (int)1);
HXDLIN(1442)												offsetX = (int)2;
            											}
HXDLIN(1442)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1442)												::String text30 = _gthis->text;
HXDLIN(1442)												Float letterSpacing30 = ((Float)0.0);
HXDLIN(1442)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)													letterSpacing30 = formatRange->format->letterSpacing;
            												}
HXDLIN(1442)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1442)												Float width63 = ((Float)0.0);
HXDLIN(1442)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1442)												_gthis->_hx___textLayout->letterSpacing = letterSpacing30;
HXDLIN(1442)												bool positions21;
HXDLIN(1442)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)													positions21 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1442)													positions21 = true;
            												}
HXDLIN(1442)												_gthis->_hx___textLayout->autoHint = positions21;
HXDLIN(1442)												 ::openfl::_internal::text::TextLayout _gthis31 = _gthis->_hx___textLayout;
HXDLIN(1442)												_gthis31->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text30,placeIndex2,endIndex2));
HXDLIN(1442)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)												Float width64 = ((Float)0.0);
HXDLIN(1442)												{
HXLINE(1442)													int _g35 = (int)0;
HXDLIN(1442)													while((_g35 < positions->length)){
HXLINE(1442)														 ::openfl::_internal::text::GlyphPosition position33 = positions->__get(_g35).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)														_g35 = (_g35 + (int)1);
HXDLIN(1442)														width64 = (width64 + position33->advance->x);
            													}
            												}
HXDLIN(1442)												widthValue = width64;
            											}
            											else {
HXLINE(1442)												int tempIndex10 = placeIndex2;
HXDLIN(1442)												int tempRangeEnd15 = formatRange->end;
HXDLIN(1442)												int countRanges10 = (int)0;
HXDLIN(1442)												positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1442)												widthValue = (int)0;
HXDLIN(1442)												while(true){
HXLINE(1442)													if ((tempIndex10 != tempRangeEnd15)) {
HXLINE(1442)														::String text31 = _gthis->text;
HXDLIN(1442)														Float letterSpacing31 = ((Float)0.0);
HXDLIN(1442)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)															letterSpacing31 = formatRange->format->letterSpacing;
            														}
HXDLIN(1442)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1442)														Float width65 = ((Float)0.0);
HXDLIN(1442)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1442)														_gthis->_hx___textLayout->letterSpacing = letterSpacing31;
HXDLIN(1442)														bool _hx_tmp74;
HXDLIN(1442)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)															_hx_tmp74 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1442)															_hx_tmp74 = true;
            														}
HXDLIN(1442)														_gthis->_hx___textLayout->autoHint = _hx_tmp74;
HXDLIN(1442)														 ::openfl::_internal::text::TextLayout _gthis32 = _gthis->_hx___textLayout;
HXDLIN(1442)														_gthis32->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text31,tempIndex10,tempRangeEnd15));
HXDLIN(1442)														::Array< ::Dynamic> tempPositions10 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)														positions = positions->concat(tempPositions10);
            													}
HXDLIN(1442)													if ((tempRangeEnd15 != endIndex2)) {
HXLINE(1442)														bool _hx_tmp75;
HXDLIN(1442)														if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)															rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)															formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)															currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)															font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1442)															_hx_tmp75 = true;
            														}
            														else {
HXLINE(1442)															_hx_tmp75 = false;
            														}
HXDLIN(1442)														if (!(_hx_tmp75)) {
HXLINE(1442)															::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1442)															goto _hx_goto_79;
            														}
HXDLIN(1442)														tempIndex10 = tempRangeEnd15;
HXDLIN(1442)														if ((endIndex2 < formatRange->end)) {
HXLINE(1442)															tempRangeEnd15 = endIndex2;
            														}
            														else {
HXLINE(1442)															tempRangeEnd15 = formatRange->end;
            														}
HXDLIN(1442)														countRanges10 = (countRanges10 + (int)1);
            													}
            													else {
HXLINE(1442)														Float width66 = ((Float)0.0);
HXDLIN(1442)														{
HXLINE(1442)															int _g36 = (int)0;
HXDLIN(1442)															while((_g36 < positions->length)){
HXLINE(1442)																 ::openfl::_internal::text::GlyphPosition position34 = positions->__get(_g36).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)																_g36 = (_g36 + (int)1);
HXDLIN(1442)																width66 = (width66 + position34->advance->x);
            															}
            														}
HXDLIN(1442)														widthValue = width66;
HXDLIN(1442)														goto _hx_goto_79;
            													}
            												}
            												_hx_goto_79:;
HXDLIN(1442)												rangeIndex = (rangeIndex - (countRanges10 + (int)1));
HXDLIN(1442)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
            											}
HXDLIN(1442)											remainingPositions2 = positions;
HXDLIN(1442)											tempWidth2 = widthValue;
            										}
            										_hx_goto_65:;
            									}
HXDLIN(1442)									{
HXLINE(1442)										if ((endIndex2 <= formatRange->end)) {
HXLINE(1442)											::String text32 = _gthis->text;
HXDLIN(1442)											Float letterSpacing32 = ((Float)0.0);
HXDLIN(1442)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)												letterSpacing32 = formatRange->format->letterSpacing;
            											}
HXDLIN(1442)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1442)											Float width67 = ((Float)0.0);
HXDLIN(1442)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1442)											_gthis->_hx___textLayout->letterSpacing = letterSpacing32;
HXDLIN(1442)											bool positions22;
HXDLIN(1442)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)												positions22 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1442)												positions22 = true;
            											}
HXDLIN(1442)											_gthis->_hx___textLayout->autoHint = positions22;
HXDLIN(1442)											 ::openfl::_internal::text::TextLayout _gthis33 = _gthis->_hx___textLayout;
HXDLIN(1442)											_gthis33->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text32,textIndex,endIndex2));
HXDLIN(1442)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)											Float width68 = ((Float)0.0);
HXDLIN(1442)											{
HXLINE(1442)												int _g37 = (int)0;
HXDLIN(1442)												while((_g37 < positions->length)){
HXLINE(1442)													 ::openfl::_internal::text::GlyphPosition position35 = positions->__get(_g37).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)													_g37 = (_g37 + (int)1);
HXDLIN(1442)													width68 = (width68 + position35->advance->x);
            												}
            											}
HXDLIN(1442)											widthValue = width68;
HXDLIN(1442)											bool _hx_tmp76;
HXDLIN(1442)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1442)												_hx_tmp76 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1442)												_hx_tmp76 = true;
            											}
HXDLIN(1442)											if (_hx_tmp76) {
HXLINE(1442)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1442)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1442)												layoutGroup->format = formatRange->format;
HXDLIN(1442)												layoutGroup->startIndex = textIndex;
HXDLIN(1442)												layoutGroup->endIndex = endIndex2;
            											}
HXDLIN(1442)											layoutGroup->positions = positions;
HXDLIN(1442)											layoutGroup->offsetX = offsetX;
HXDLIN(1442)											layoutGroup->ascent = ascent;
HXDLIN(1442)											layoutGroup->descent = descent;
HXDLIN(1442)											layoutGroup->leading = leading;
HXDLIN(1442)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1442)											layoutGroup->offsetY = offsetY;
HXDLIN(1442)											layoutGroup->width = widthValue;
HXDLIN(1442)											layoutGroup->height = heightValue;
HXDLIN(1442)											offsetX = (offsetX + widthValue);
HXDLIN(1442)											if ((endIndex2 == formatRange->end)) {
HXLINE(1442)												layoutGroup = null();
HXDLIN(1442)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1442)												{
HXLINE(1442)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1442)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1442)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1442)														bool _hx_tmp77;
HXDLIN(1442)														if (hx::IsNotNull( font )) {
HXLINE(1442)															_hx_tmp77 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1442)															_hx_tmp77 = false;
            														}
HXDLIN(1442)														if (_hx_tmp77) {
HXLINE(1442)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1442)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1442)															ascent = currentFormat->size;
HXDLIN(1442)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1442)													leading = currentFormat->leading;
HXDLIN(1442)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1442)													if ((heightValue > maxHeightValue)) {
HXLINE(1442)														maxHeightValue = heightValue;
            													}
HXDLIN(1442)													if ((ascent > maxAscent)) {
HXLINE(1442)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1442)											while(true){
HXLINE(1442)												int tempRangeEnd16;
HXDLIN(1442)												if ((endIndex2 < formatRange->end)) {
HXLINE(1442)													tempRangeEnd16 = endIndex2;
            												}
            												else {
HXLINE(1442)													tempRangeEnd16 = formatRange->end;
            												}
HXDLIN(1442)												if ((textIndex != tempRangeEnd16)) {
HXLINE(1442)													::String text33 = _gthis->text;
HXDLIN(1442)													Float letterSpacing33 = ((Float)0.0);
HXDLIN(1442)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1442)														letterSpacing33 = formatRange->format->letterSpacing;
            													}
HXDLIN(1442)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1442)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1442)													Float width69 = ((Float)0.0);
HXDLIN(1442)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1442)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1442)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1442)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1442)													_gthis->_hx___textLayout->letterSpacing = letterSpacing33;
HXDLIN(1442)													bool positions23;
HXDLIN(1442)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1442)														positions23 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1442)														positions23 = true;
            													}
HXDLIN(1442)													_gthis->_hx___textLayout->autoHint = positions23;
HXDLIN(1442)													 ::openfl::_internal::text::TextLayout _gthis34 = _gthis->_hx___textLayout;
HXDLIN(1442)													_gthis34->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text33,textIndex,tempRangeEnd16));
HXDLIN(1442)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1442)													Float width70 = ((Float)0.0);
HXDLIN(1442)													{
HXLINE(1442)														int _g38 = (int)0;
HXDLIN(1442)														while((_g38 < positions->length)){
HXLINE(1442)															 ::openfl::_internal::text::GlyphPosition position36 = positions->__get(_g38).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1442)															_g38 = (_g38 + (int)1);
HXDLIN(1442)															width70 = (width70 + position36->advance->x);
            														}
            													}
HXDLIN(1442)													widthValue = width70;
HXDLIN(1442)													bool _hx_tmp78;
HXDLIN(1442)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1442)														_hx_tmp78 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1442)														_hx_tmp78 = true;
            													}
HXDLIN(1442)													if (_hx_tmp78) {
HXLINE(1442)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd16);
HXDLIN(1442)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1442)														layoutGroup->format = formatRange->format;
HXDLIN(1442)														layoutGroup->startIndex = textIndex;
HXDLIN(1442)														layoutGroup->endIndex = tempRangeEnd16;
            													}
HXDLIN(1442)													layoutGroup->positions = positions;
HXDLIN(1442)													layoutGroup->offsetX = offsetX;
HXDLIN(1442)													layoutGroup->ascent = ascent;
HXDLIN(1442)													layoutGroup->descent = descent;
HXDLIN(1442)													layoutGroup->leading = leading;
HXDLIN(1442)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1442)													layoutGroup->offsetY = offsetY;
HXDLIN(1442)													layoutGroup->width = widthValue;
HXDLIN(1442)													layoutGroup->height = heightValue;
HXDLIN(1442)													offsetX = (offsetX + widthValue);
HXDLIN(1442)													textIndex = tempRangeEnd16;
            												}
HXDLIN(1442)												if ((tempRangeEnd16 == formatRange->end)) {
HXLINE(1442)													layoutGroup = null();
            												}
HXDLIN(1442)												if ((tempRangeEnd16 == endIndex2)) {
HXLINE(1442)													goto _hx_goto_82;
            												}
HXDLIN(1442)												bool _hx_tmp79;
HXDLIN(1442)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1442)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1442)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1442)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1442)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1442)													_hx_tmp79 = true;
            												}
            												else {
HXLINE(1442)													_hx_tmp79 = false;
            												}
HXDLIN(1442)												if (!(_hx_tmp79)) {
HXLINE(1442)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1442)													goto _hx_goto_82;
            												}
HXDLIN(1442)												{
HXLINE(1442)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1442)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1442)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1442)														bool _hx_tmp80;
HXDLIN(1442)														if (hx::IsNotNull( font )) {
HXLINE(1442)															_hx_tmp80 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1442)															_hx_tmp80 = false;
            														}
HXDLIN(1442)														if (_hx_tmp80) {
HXLINE(1442)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1442)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1442)															ascent = currentFormat->size;
HXDLIN(1442)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1442)													leading = currentFormat->leading;
HXDLIN(1442)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1442)													if ((heightValue > maxHeightValue)) {
HXLINE(1442)														maxHeightValue = heightValue;
            													}
HXDLIN(1442)													if ((ascent > maxAscent)) {
HXLINE(1442)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_82:;
            										}
HXDLIN(1442)										textIndex = endIndex2;
            									}
            								}
            								else {
HXLINE(1446)									int tempRangeEnd17;
HXDLIN(1446)									if ((endIndex2 < formatRange->end)) {
HXLINE(1446)										tempRangeEnd17 = endIndex2;
            									}
            									else {
HXLINE(1446)										tempRangeEnd17 = formatRange->end;
            									}
HXLINE(1448)									if ((tempRangeEnd17 < endIndex2)) {
HXLINE(1450)										::String text34 = this->text;
HXDLIN(1450)										Float letterSpacing34 = ((Float)0.0);
HXDLIN(1450)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1450)											letterSpacing34 = formatRange->format->letterSpacing;
            										}
HXDLIN(1450)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1450)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1450)										Float width71 = ((Float)0.0);
HXDLIN(1450)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1450)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1450)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1450)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1450)										_gthis->_hx___textLayout->letterSpacing = letterSpacing34;
HXDLIN(1450)										bool positions24;
HXDLIN(1450)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1450)											positions24 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1450)											positions24 = true;
            										}
HXDLIN(1450)										_gthis->_hx___textLayout->autoHint = positions24;
HXDLIN(1450)										 ::openfl::_internal::text::TextLayout _gthis35 = _gthis->_hx___textLayout;
HXDLIN(1450)										_gthis35->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text34,textIndex,tempRangeEnd17));
HXDLIN(1450)										positions = _gthis->_hx___textLayout->get_positions();
HXLINE(1451)										Float width72 = ((Float)0.0);
HXDLIN(1451)										{
HXLINE(1451)											int _g39 = (int)0;
HXDLIN(1451)											while((_g39 < positions->length)){
HXLINE(1451)												 ::openfl::_internal::text::GlyphPosition position37 = positions->__get(_g39).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1451)												_g39 = (_g39 + (int)1);
HXDLIN(1451)												width72 = (width72 + position37->advance->x);
            											}
            										}
HXDLIN(1451)										widthValue = width72;
            									}
HXLINE(1454)									layoutGroup->endIndex = tempRangeEnd17;
HXLINE(1455)									layoutGroup->positions = layoutGroup->positions->concat(positions);
HXLINE(1456)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup4 = layoutGroup;
HXDLIN(1456)									layoutGroup4->width = (layoutGroup4->width + widthValue);
HXLINE(1458)									offsetX = (offsetX + widthValue);
HXLINE(1460)									if ((tempRangeEnd17 == formatRange->end)) {
HXLINE(1462)										layoutGroup = null();
HXLINE(1463)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1463)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1463)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1463)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1463)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXLINE(1464)										{
HXLINE(1464)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1464)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1464)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1464)												bool _hx_tmp81;
HXDLIN(1464)												if (hx::IsNotNull( font )) {
HXLINE(1464)													_hx_tmp81 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1464)													_hx_tmp81 = false;
            												}
HXDLIN(1464)												if (_hx_tmp81) {
HXLINE(1464)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1464)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1464)													ascent = currentFormat->size;
HXDLIN(1464)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1464)											leading = currentFormat->leading;
HXDLIN(1464)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1464)											if ((heightValue > maxHeightValue)) {
HXLINE(1464)												maxHeightValue = heightValue;
            											}
HXDLIN(1464)											if ((ascent > maxAscent)) {
HXLINE(1464)												maxAscent = ascent;
            											}
            										}
HXLINE(1466)										textIndex = tempRangeEnd17;
HXLINE(1468)										if ((tempRangeEnd17 != endIndex2)) {
HXLINE(1470)											if ((endIndex2 <= formatRange->end)) {
HXLINE(1470)												::String text35 = _gthis->text;
HXDLIN(1470)												Float letterSpacing35 = ((Float)0.0);
HXDLIN(1470)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1470)													letterSpacing35 = formatRange->format->letterSpacing;
            												}
HXDLIN(1470)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1470)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1470)												Float width73 = ((Float)0.0);
HXDLIN(1470)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1470)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1470)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1470)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1470)												_gthis->_hx___textLayout->letterSpacing = letterSpacing35;
HXDLIN(1470)												bool positions25;
HXDLIN(1470)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1470)													positions25 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1470)													positions25 = true;
            												}
HXDLIN(1470)												_gthis->_hx___textLayout->autoHint = positions25;
HXDLIN(1470)												 ::openfl::_internal::text::TextLayout _gthis36 = _gthis->_hx___textLayout;
HXDLIN(1470)												_gthis36->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text35,textIndex,endIndex2));
HXDLIN(1470)												positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1470)												Float width74 = ((Float)0.0);
HXDLIN(1470)												{
HXLINE(1470)													int _g40 = (int)0;
HXDLIN(1470)													while((_g40 < positions->length)){
HXLINE(1470)														 ::openfl::_internal::text::GlyphPosition position38 = positions->__get(_g40).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1470)														_g40 = (_g40 + (int)1);
HXDLIN(1470)														width74 = (width74 + position38->advance->x);
            													}
            												}
HXDLIN(1470)												widthValue = width74;
HXDLIN(1470)												bool _hx_tmp82;
HXDLIN(1470)												if (hx::IsNotNull( layoutGroup )) {
HXLINE(1470)													_hx_tmp82 = (layoutGroup->startIndex != layoutGroup->endIndex);
            												}
            												else {
HXLINE(1470)													_hx_tmp82 = true;
            												}
HXDLIN(1470)												if (_hx_tmp82) {
HXLINE(1470)													layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex2);
HXDLIN(1470)													::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            												}
            												else {
HXLINE(1470)													layoutGroup->format = formatRange->format;
HXDLIN(1470)													layoutGroup->startIndex = textIndex;
HXDLIN(1470)													layoutGroup->endIndex = endIndex2;
            												}
HXDLIN(1470)												layoutGroup->positions = positions;
HXDLIN(1470)												layoutGroup->offsetX = offsetX;
HXDLIN(1470)												layoutGroup->ascent = ascent;
HXDLIN(1470)												layoutGroup->descent = descent;
HXDLIN(1470)												layoutGroup->leading = leading;
HXDLIN(1470)												layoutGroup->lineIndex = lineIndex;
HXDLIN(1470)												layoutGroup->offsetY = offsetY;
HXDLIN(1470)												layoutGroup->width = widthValue;
HXDLIN(1470)												layoutGroup->height = heightValue;
HXDLIN(1470)												offsetX = (offsetX + widthValue);
HXDLIN(1470)												if ((endIndex2 == formatRange->end)) {
HXLINE(1470)													layoutGroup = null();
HXDLIN(1470)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1470)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1470)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1470)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1470)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            													}
HXDLIN(1470)													{
HXLINE(1470)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1470)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1470)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1470)															bool _hx_tmp83;
HXDLIN(1470)															if (hx::IsNotNull( font )) {
HXLINE(1470)																_hx_tmp83 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1470)																_hx_tmp83 = false;
            															}
HXDLIN(1470)															if (_hx_tmp83) {
HXLINE(1470)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1470)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1470)																ascent = currentFormat->size;
HXDLIN(1470)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1470)														leading = currentFormat->leading;
HXDLIN(1470)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1470)														if ((heightValue > maxHeightValue)) {
HXLINE(1470)															maxHeightValue = heightValue;
            														}
HXDLIN(1470)														if ((ascent > maxAscent)) {
HXLINE(1470)															maxAscent = ascent;
            														}
            													}
            												}
            											}
            											else {
HXLINE(1470)												while(true){
HXLINE(1470)													int tempRangeEnd18;
HXDLIN(1470)													if ((endIndex2 < formatRange->end)) {
HXLINE(1470)														tempRangeEnd18 = endIndex2;
            													}
            													else {
HXLINE(1470)														tempRangeEnd18 = formatRange->end;
            													}
HXDLIN(1470)													if ((textIndex != tempRangeEnd18)) {
HXLINE(1470)														::String text36 = _gthis->text;
HXDLIN(1470)														Float letterSpacing36 = ((Float)0.0);
HXDLIN(1470)														if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1470)															letterSpacing36 = formatRange->format->letterSpacing;
            														}
HXDLIN(1470)														if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1470)															_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            														}
HXDLIN(1470)														Float width75 = ((Float)0.0);
HXDLIN(1470)														_gthis->_hx___textLayout->set_text(null());
HXDLIN(1470)														_gthis->_hx___textLayout->set_font(font);
HXDLIN(1470)														if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1470)															_gthis->_hx___textLayout->set_size(formatRange->format->size);
            														}
HXDLIN(1470)														_gthis->_hx___textLayout->letterSpacing = letterSpacing36;
HXDLIN(1470)														bool positions26;
HXDLIN(1470)														if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1470)															positions26 = (_gthis->sharpness < (int)400);
            														}
            														else {
HXLINE(1470)															positions26 = true;
            														}
HXDLIN(1470)														_gthis->_hx___textLayout->autoHint = positions26;
HXDLIN(1470)														 ::openfl::_internal::text::TextLayout _gthis37 = _gthis->_hx___textLayout;
HXDLIN(1470)														_gthis37->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text36,textIndex,tempRangeEnd18));
HXDLIN(1470)														positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1470)														Float width76 = ((Float)0.0);
HXDLIN(1470)														{
HXLINE(1470)															int _g41 = (int)0;
HXDLIN(1470)															while((_g41 < positions->length)){
HXLINE(1470)																 ::openfl::_internal::text::GlyphPosition position39 = positions->__get(_g41).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1470)																_g41 = (_g41 + (int)1);
HXDLIN(1470)																width76 = (width76 + position39->advance->x);
            															}
            														}
HXDLIN(1470)														widthValue = width76;
HXDLIN(1470)														bool _hx_tmp84;
HXDLIN(1470)														if (hx::IsNotNull( layoutGroup )) {
HXLINE(1470)															_hx_tmp84 = (layoutGroup->startIndex != layoutGroup->endIndex);
            														}
            														else {
HXLINE(1470)															_hx_tmp84 = true;
            														}
HXDLIN(1470)														if (_hx_tmp84) {
HXLINE(1470)															layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd18);
HXDLIN(1470)															::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            														}
            														else {
HXLINE(1470)															layoutGroup->format = formatRange->format;
HXDLIN(1470)															layoutGroup->startIndex = textIndex;
HXDLIN(1470)															layoutGroup->endIndex = tempRangeEnd18;
            														}
HXDLIN(1470)														layoutGroup->positions = positions;
HXDLIN(1470)														layoutGroup->offsetX = offsetX;
HXDLIN(1470)														layoutGroup->ascent = ascent;
HXDLIN(1470)														layoutGroup->descent = descent;
HXDLIN(1470)														layoutGroup->leading = leading;
HXDLIN(1470)														layoutGroup->lineIndex = lineIndex;
HXDLIN(1470)														layoutGroup->offsetY = offsetY;
HXDLIN(1470)														layoutGroup->width = widthValue;
HXDLIN(1470)														layoutGroup->height = heightValue;
HXDLIN(1470)														offsetX = (offsetX + widthValue);
HXDLIN(1470)														textIndex = tempRangeEnd18;
            													}
HXDLIN(1470)													if ((tempRangeEnd18 == formatRange->end)) {
HXLINE(1470)														layoutGroup = null();
            													}
HXDLIN(1470)													if ((tempRangeEnd18 == endIndex2)) {
HXLINE(1470)														goto _hx_goto_86;
            													}
HXDLIN(1470)													bool _hx_tmp85;
HXDLIN(1470)													if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1470)														rangeIndex = (rangeIndex + (int)1);
HXDLIN(1470)														formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1470)														currentFormat->_hx___merge(formatRange->format);
HXDLIN(1470)														font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1470)														_hx_tmp85 = true;
            													}
            													else {
HXLINE(1470)														_hx_tmp85 = false;
            													}
HXDLIN(1470)													if (!(_hx_tmp85)) {
HXLINE(1470)														::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1470)														goto _hx_goto_86;
            													}
HXDLIN(1470)													{
HXLINE(1470)														if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1470)															ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1470)															descent = (currentFormat->size * currentFormat->_hx___descent);
            														}
            														else {
HXLINE(1470)															bool _hx_tmp86;
HXDLIN(1470)															if (hx::IsNotNull( font )) {
HXLINE(1470)																_hx_tmp86 = (font->unitsPerEM != (int)0);
            															}
            															else {
HXLINE(1470)																_hx_tmp86 = false;
            															}
HXDLIN(1470)															if (_hx_tmp86) {
HXLINE(1470)																ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1470)																descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            															}
            															else {
HXLINE(1470)																ascent = currentFormat->size;
HXDLIN(1470)																descent = (currentFormat->size * ((Float)0.185));
            															}
            														}
HXDLIN(1470)														leading = currentFormat->leading;
HXDLIN(1470)														heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1470)														if ((heightValue > maxHeightValue)) {
HXLINE(1470)															maxHeightValue = heightValue;
            														}
HXDLIN(1470)														if ((ascent > maxAscent)) {
HXLINE(1470)															maxAscent = ascent;
            														}
            													}
            												}
            												_hx_goto_86:;
            											}
HXDLIN(1470)											textIndex = endIndex2;
            										}
            									}
HXLINE(1476)									if ((breakIndex == endIndex2)) {
HXLINE(1476)										endIndex2 = (endIndex2 + (int)1);
            									}
HXLINE(1478)									textIndex = endIndex2;
            								}
            							}
            						}
HXLINE(1482)						int nextSpaceIndex = ::lime::text::_UTF8String::UTF8String_Impl__obj::indexOf(this->text,HX_(" ",20,00,00,00),textIndex);
HXLINE(1487)						if ((breakIndex == previousSpaceIndex)) {
HXLINE(1489)							layoutGroup->endIndex = breakIndex;
HXLINE(1491)							if ((((breakIndex - layoutGroup->startIndex) - layoutGroup->positions->length) < (int)0)) {
HXLINE(1494)								layoutGroup->positions->push(null());
            							}
HXLINE(1497)							textIndex = (breakIndex + (int)1);
            						}
HXLINE(1500)						previousSpaceIndex = spaceIndex;
HXLINE(1501)						spaceIndex = nextSpaceIndex;
HXLINE(1503)						bool _hx_tmp87;
HXDLIN(1503)						bool _hx_tmp88;
HXDLIN(1503)						bool _hx_tmp89;
HXDLIN(1503)						if ((breakIndex > (int)-1)) {
HXLINE(1503)							_hx_tmp89 = (breakIndex <= textIndex);
            						}
            						else {
HXLINE(1503)							_hx_tmp89 = false;
            						}
HXDLIN(1503)						if (_hx_tmp89) {
HXLINE(1503)							if ((spaceIndex <= breakIndex)) {
HXLINE(1503)								_hx_tmp88 = (spaceIndex == (int)-1);
            							}
            							else {
HXLINE(1503)								_hx_tmp88 = true;
            							}
            						}
            						else {
HXLINE(1503)							_hx_tmp88 = false;
            						}
HXDLIN(1503)						if (!(_hx_tmp88)) {
HXLINE(1503)							_hx_tmp87 = (textIndex > ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text));
            						}
            						else {
HXLINE(1503)							_hx_tmp87 = true;
            						}
HXDLIN(1503)						if (_hx_tmp87) {
HXLINE(1506)							goto _hx_goto_37;
            						}
            					}
            					_hx_goto_37:;
            				}
            				else {
HXLINE(1512)					if ((textIndex < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1516)						{
HXLINE(1516)							int endIndex7 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
HXDLIN(1516)							if ((endIndex7 <= formatRange->end)) {
HXLINE(1516)								::String text37 = _gthis->text;
HXDLIN(1516)								Float letterSpacing37 = ((Float)0.0);
HXDLIN(1516)								if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1516)									letterSpacing37 = formatRange->format->letterSpacing;
            								}
HXDLIN(1516)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1516)									_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1516)								Float width77 = ((Float)0.0);
HXDLIN(1516)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1516)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1516)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1516)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1516)								_gthis->_hx___textLayout->letterSpacing = letterSpacing37;
HXDLIN(1516)								bool positions27;
HXDLIN(1516)								if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1516)									positions27 = (_gthis->sharpness < (int)400);
            								}
            								else {
HXLINE(1516)									positions27 = true;
            								}
HXDLIN(1516)								_gthis->_hx___textLayout->autoHint = positions27;
HXDLIN(1516)								 ::openfl::_internal::text::TextLayout _gthis38 = _gthis->_hx___textLayout;
HXDLIN(1516)								_gthis38->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text37,textIndex,endIndex7));
HXDLIN(1516)								positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1516)								Float width78 = ((Float)0.0);
HXDLIN(1516)								{
HXLINE(1516)									int _g42 = (int)0;
HXDLIN(1516)									while((_g42 < positions->length)){
HXLINE(1516)										 ::openfl::_internal::text::GlyphPosition position40 = positions->__get(_g42).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1516)										_g42 = (_g42 + (int)1);
HXDLIN(1516)										width78 = (width78 + position40->advance->x);
            									}
            								}
HXDLIN(1516)								widthValue = width78;
            							}
            							else {
HXLINE(1516)								int tempIndex11 = textIndex;
HXDLIN(1516)								int tempRangeEnd19 = formatRange->end;
HXDLIN(1516)								int countRanges11 = (int)0;
HXDLIN(1516)								positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1516)								widthValue = (int)0;
HXDLIN(1516)								while(true){
HXLINE(1516)									if ((tempIndex11 != tempRangeEnd19)) {
HXLINE(1516)										::String text38 = _gthis->text;
HXDLIN(1516)										Float letterSpacing38 = ((Float)0.0);
HXDLIN(1516)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1516)											letterSpacing38 = formatRange->format->letterSpacing;
            										}
HXDLIN(1516)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1516)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1516)										Float width79 = ((Float)0.0);
HXDLIN(1516)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1516)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1516)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1516)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1516)										_gthis->_hx___textLayout->letterSpacing = letterSpacing38;
HXDLIN(1516)										bool _hx_tmp90;
HXDLIN(1516)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1516)											_hx_tmp90 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1516)											_hx_tmp90 = true;
            										}
HXDLIN(1516)										_gthis->_hx___textLayout->autoHint = _hx_tmp90;
HXDLIN(1516)										 ::openfl::_internal::text::TextLayout _gthis39 = _gthis->_hx___textLayout;
HXDLIN(1516)										_gthis39->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text38,tempIndex11,tempRangeEnd19));
HXDLIN(1516)										::Array< ::Dynamic> tempPositions11 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1516)										positions = positions->concat(tempPositions11);
            									}
HXDLIN(1516)									if ((tempRangeEnd19 != endIndex7)) {
HXLINE(1516)										bool _hx_tmp91;
HXDLIN(1516)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1516)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1516)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1516)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1516)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1516)											_hx_tmp91 = true;
            										}
            										else {
HXLINE(1516)											_hx_tmp91 = false;
            										}
HXDLIN(1516)										if (!(_hx_tmp91)) {
HXLINE(1516)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1516)											goto _hx_goto_89;
            										}
HXDLIN(1516)										tempIndex11 = tempRangeEnd19;
HXDLIN(1516)										if ((endIndex7 < formatRange->end)) {
HXLINE(1516)											tempRangeEnd19 = endIndex7;
            										}
            										else {
HXLINE(1516)											tempRangeEnd19 = formatRange->end;
            										}
HXDLIN(1516)										countRanges11 = (countRanges11 + (int)1);
            									}
            									else {
HXLINE(1516)										Float width80 = ((Float)0.0);
HXDLIN(1516)										{
HXLINE(1516)											int _g43 = (int)0;
HXDLIN(1516)											while((_g43 < positions->length)){
HXLINE(1516)												 ::openfl::_internal::text::GlyphPosition position41 = positions->__get(_g43).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1516)												_g43 = (_g43 + (int)1);
HXDLIN(1516)												width80 = (width80 + position41->advance->x);
            											}
            										}
HXDLIN(1516)										widthValue = width80;
HXDLIN(1516)										goto _hx_goto_89;
            									}
            								}
            								_hx_goto_89:;
HXDLIN(1516)								rangeIndex = (rangeIndex - (countRanges11 + (int)1));
HXDLIN(1516)								if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1516)									rangeIndex = (rangeIndex + (int)1);
HXDLIN(1516)									formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1516)									currentFormat->_hx___merge(formatRange->format);
HXDLIN(1516)									font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            								}
            							}
            						}
HXLINE(1517)						{
HXLINE(1517)							int endIndex8 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text);
HXDLIN(1517)							bool _hx_tmp92;
HXDLIN(1517)							if ((_gthis->width >= (int)4)) {
HXLINE(1517)								_hx_tmp92 = _gthis->wordWrap;
            							}
            							else {
HXLINE(1517)								_hx_tmp92 = false;
            							}
HXDLIN(1517)							if (_hx_tmp92) {
HXLINE(1517)								::Array< ::Dynamic> remainingPositions3 = positions;
HXDLIN(1517)								int i10;
HXDLIN(1517)								int bufferCount3;
HXDLIN(1517)								int placeIndex3;
HXDLIN(1517)								Float positionWidth3;
HXDLIN(1517)								 ::openfl::_internal::text::GlyphPosition currentPosition3;
HXDLIN(1517)								Float width81 = ((Float)0.0);
HXDLIN(1517)								{
HXLINE(1517)									int _g44 = (int)0;
HXDLIN(1517)									while((_g44 < remainingPositions3->length)){
HXLINE(1517)										 ::openfl::_internal::text::GlyphPosition position42 = remainingPositions3->__get(_g44).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)										_g44 = (_g44 + (int)1);
HXDLIN(1517)										width81 = (width81 + position42->advance->x);
            									}
            								}
HXDLIN(1517)								Float tempWidth3 = width81;
HXDLIN(1517)								while(((offsetX + tempWidth3) > (_gthis->width - (int)2))){
HXLINE(1517)									bufferCount3 = (int)0;
HXDLIN(1517)									i10 = bufferCount3;
HXDLIN(1517)									positionWidth3 = ((Float)0.0);
HXDLIN(1517)									while(((offsetX + positionWidth3) < (_gthis->width - (int)2))){
HXLINE(1517)										currentPosition3 = remainingPositions3->__get(i10).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)										if ((currentPosition3->advance->x == ((Float)0.0))) {
HXLINE(1517)											i10 = (i10 + (int)1);
HXDLIN(1517)											bufferCount3 = (bufferCount3 + (int)1);
            										}
            										else {
HXLINE(1517)											positionWidth3 = (positionWidth3 + currentPosition3->advance->x);
HXDLIN(1517)											i10 = (i10 + (int)1);
            										}
            									}
HXDLIN(1517)									if ((positionWidth3 == ((Float)0.0))) {
HXLINE(1517)										goto _hx_goto_92;
            									}
            									else {
HXLINE(1517)										bool _hx_tmp93;
HXDLIN(1517)										if ((i10 < (int)2)) {
HXLINE(1517)											_hx_tmp93 = ((positionWidth3 + offsetX) > (_gthis->width - (int)2));
            										}
            										else {
HXLINE(1517)											_hx_tmp93 = false;
            										}
HXDLIN(1517)										if (_hx_tmp93) {
HXLINE(1517)											if ((((textIndex + i10) - bufferCount3) == endIndex8)) {
HXLINE(1517)												goto _hx_goto_92;
            											}
            										}
            										else {
HXLINE(1517)											while(((offsetX + positionWidth3) > (_gthis->width - (int)2))){
HXLINE(1517)												i10 = (i10 - (int)1);
HXDLIN(1517)												if (((i10 - bufferCount3) > (int)0)) {
HXLINE(1517)													{
HXLINE(1517)														int endIndex9 = ((textIndex + i10) - bufferCount3);
HXDLIN(1517)														if ((endIndex9 <= formatRange->end)) {
HXLINE(1517)															::String text39 = _gthis->text;
HXDLIN(1517)															Float letterSpacing39 = ((Float)0.0);
HXDLIN(1517)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)																letterSpacing39 = formatRange->format->letterSpacing;
            															}
HXDLIN(1517)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1517)															Float width82 = ((Float)0.0);
HXDLIN(1517)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1517)															_gthis->_hx___textLayout->letterSpacing = letterSpacing39;
HXDLIN(1517)															bool positions28;
HXDLIN(1517)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)																positions28 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1517)																positions28 = true;
            															}
HXDLIN(1517)															_gthis->_hx___textLayout->autoHint = positions28;
HXDLIN(1517)															 ::openfl::_internal::text::TextLayout _gthis40 = _gthis->_hx___textLayout;
HXDLIN(1517)															_gthis40->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text39,textIndex,endIndex9));
HXDLIN(1517)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)															Float width83 = ((Float)0.0);
HXDLIN(1517)															{
HXLINE(1517)																int _g45 = (int)0;
HXDLIN(1517)																while((_g45 < positions->length)){
HXLINE(1517)																	 ::openfl::_internal::text::GlyphPosition position43 = positions->__get(_g45).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)																	_g45 = (_g45 + (int)1);
HXDLIN(1517)																	width83 = (width83 + position43->advance->x);
            																}
            															}
HXDLIN(1517)															widthValue = width83;
            														}
            														else {
HXLINE(1517)															int tempIndex12 = textIndex;
HXDLIN(1517)															int tempRangeEnd20 = formatRange->end;
HXDLIN(1517)															int countRanges12 = (int)0;
HXDLIN(1517)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1517)															widthValue = (int)0;
HXDLIN(1517)															while(true){
HXLINE(1517)																if ((tempIndex12 != tempRangeEnd20)) {
HXLINE(1517)																	::String text40 = _gthis->text;
HXDLIN(1517)																	Float letterSpacing40 = ((Float)0.0);
HXDLIN(1517)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)																		letterSpacing40 = formatRange->format->letterSpacing;
            																	}
HXDLIN(1517)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1517)																	Float width84 = ((Float)0.0);
HXDLIN(1517)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)																		_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																	}
HXDLIN(1517)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing40;
HXDLIN(1517)																	bool _hx_tmp94;
HXDLIN(1517)																	if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)																		_hx_tmp94 = (_gthis->sharpness < (int)400);
            																	}
            																	else {
HXLINE(1517)																		_hx_tmp94 = true;
            																	}
HXDLIN(1517)																	_gthis->_hx___textLayout->autoHint = _hx_tmp94;
HXDLIN(1517)																	 ::openfl::_internal::text::TextLayout _gthis41 = _gthis->_hx___textLayout;
HXDLIN(1517)																	_gthis41->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text40,tempIndex12,tempRangeEnd20));
HXDLIN(1517)																	::Array< ::Dynamic> tempPositions12 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)																	positions = positions->concat(tempPositions12);
            																}
HXDLIN(1517)																if ((tempRangeEnd20 != endIndex9)) {
HXLINE(1517)																	bool _hx_tmp95;
HXDLIN(1517)																	if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)																		rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)																		formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)																		currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1517)																		_hx_tmp95 = true;
            																	}
            																	else {
HXLINE(1517)																		_hx_tmp95 = false;
            																	}
HXDLIN(1517)																	if (!(_hx_tmp95)) {
HXLINE(1517)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1517)																		goto _hx_goto_96;
            																	}
HXDLIN(1517)																	tempIndex12 = tempRangeEnd20;
HXDLIN(1517)																	if ((endIndex9 < formatRange->end)) {
HXLINE(1517)																		tempRangeEnd20 = endIndex9;
            																	}
            																	else {
HXLINE(1517)																		tempRangeEnd20 = formatRange->end;
            																	}
HXDLIN(1517)																	countRanges12 = (countRanges12 + (int)1);
            																}
            																else {
HXLINE(1517)																	Float width85 = ((Float)0.0);
HXDLIN(1517)																	{
HXLINE(1517)																		int _g46 = (int)0;
HXDLIN(1517)																		while((_g46 < positions->length)){
HXLINE(1517)																			 ::openfl::_internal::text::GlyphPosition position44 = positions->__get(_g46).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)																			_g46 = (_g46 + (int)1);
HXDLIN(1517)																			width85 = (width85 + position44->advance->x);
            																		}
            																	}
HXDLIN(1517)																	widthValue = width85;
HXDLIN(1517)																	goto _hx_goto_96;
            																}
            															}
            															_hx_goto_96:;
HXDLIN(1517)															rangeIndex = (rangeIndex - (countRanges12 + (int)1));
HXDLIN(1517)															if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)																rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)																formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXDLIN(1517)													positionWidth3 = widthValue;
            												}
            												else {
HXLINE(1517)													i10 = (int)1;
HXDLIN(1517)													bufferCount3 = (int)0;
HXDLIN(1517)													{
HXLINE(1517)														int endIndex10 = (textIndex + (int)1);
HXDLIN(1517)														if ((endIndex10 <= formatRange->end)) {
HXLINE(1517)															::String text41 = _gthis->text;
HXDLIN(1517)															Float letterSpacing41 = ((Float)0.0);
HXDLIN(1517)															if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)																letterSpacing41 = formatRange->format->letterSpacing;
            															}
HXDLIN(1517)															if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)																_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            															}
HXDLIN(1517)															Float width86 = ((Float)0.0);
HXDLIN(1517)															_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)															_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)															if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)																_gthis->_hx___textLayout->set_size(formatRange->format->size);
            															}
HXDLIN(1517)															_gthis->_hx___textLayout->letterSpacing = letterSpacing41;
HXDLIN(1517)															bool positions29;
HXDLIN(1517)															if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)																positions29 = (_gthis->sharpness < (int)400);
            															}
            															else {
HXLINE(1517)																positions29 = true;
            															}
HXDLIN(1517)															_gthis->_hx___textLayout->autoHint = positions29;
HXDLIN(1517)															 ::openfl::_internal::text::TextLayout _gthis42 = _gthis->_hx___textLayout;
HXDLIN(1517)															_gthis42->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text41,textIndex,endIndex10));
HXDLIN(1517)															positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)															Float width87 = ((Float)0.0);
HXDLIN(1517)															{
HXLINE(1517)																int _g47 = (int)0;
HXDLIN(1517)																while((_g47 < positions->length)){
HXLINE(1517)																	 ::openfl::_internal::text::GlyphPosition position45 = positions->__get(_g47).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)																	_g47 = (_g47 + (int)1);
HXDLIN(1517)																	width87 = (width87 + position45->advance->x);
            																}
            															}
HXDLIN(1517)															widthValue = width87;
            														}
            														else {
HXLINE(1517)															int tempIndex13 = textIndex;
HXDLIN(1517)															int tempRangeEnd21 = formatRange->end;
HXDLIN(1517)															int countRanges13 = (int)0;
HXDLIN(1517)															positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1517)															widthValue = (int)0;
HXDLIN(1517)															while(true){
HXLINE(1517)																if ((tempIndex13 != tempRangeEnd21)) {
HXLINE(1517)																	::String text42 = _gthis->text;
HXDLIN(1517)																	Float letterSpacing42 = ((Float)0.0);
HXDLIN(1517)																	if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)																		letterSpacing42 = formatRange->format->letterSpacing;
            																	}
HXDLIN(1517)																	if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)																		_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            																	}
HXDLIN(1517)																	Float width88 = ((Float)0.0);
HXDLIN(1517)																	_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)																	_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)																	if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)																		_gthis->_hx___textLayout->set_size(formatRange->format->size);
            																	}
HXDLIN(1517)																	_gthis->_hx___textLayout->letterSpacing = letterSpacing42;
HXDLIN(1517)																	bool _hx_tmp96;
HXDLIN(1517)																	if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)																		_hx_tmp96 = (_gthis->sharpness < (int)400);
            																	}
            																	else {
HXLINE(1517)																		_hx_tmp96 = true;
            																	}
HXDLIN(1517)																	_gthis->_hx___textLayout->autoHint = _hx_tmp96;
HXDLIN(1517)																	 ::openfl::_internal::text::TextLayout _gthis43 = _gthis->_hx___textLayout;
HXDLIN(1517)																	_gthis43->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text42,tempIndex13,tempRangeEnd21));
HXDLIN(1517)																	::Array< ::Dynamic> tempPositions13 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)																	positions = positions->concat(tempPositions13);
            																}
HXDLIN(1517)																if ((tempRangeEnd21 != endIndex10)) {
HXLINE(1517)																	bool _hx_tmp97;
HXDLIN(1517)																	if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)																		rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)																		formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)																		currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)																		font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1517)																		_hx_tmp97 = true;
            																	}
            																	else {
HXLINE(1517)																		_hx_tmp97 = false;
            																	}
HXDLIN(1517)																	if (!(_hx_tmp97)) {
HXLINE(1517)																		::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1517)																		goto _hx_goto_99;
            																	}
HXDLIN(1517)																	tempIndex13 = tempRangeEnd21;
HXDLIN(1517)																	if ((endIndex10 < formatRange->end)) {
HXLINE(1517)																		tempRangeEnd21 = endIndex10;
            																	}
            																	else {
HXLINE(1517)																		tempRangeEnd21 = formatRange->end;
            																	}
HXDLIN(1517)																	countRanges13 = (countRanges13 + (int)1);
            																}
            																else {
HXLINE(1517)																	Float width89 = ((Float)0.0);
HXDLIN(1517)																	{
HXLINE(1517)																		int _g48 = (int)0;
HXDLIN(1517)																		while((_g48 < positions->length)){
HXLINE(1517)																			 ::openfl::_internal::text::GlyphPosition position46 = positions->__get(_g48).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)																			_g48 = (_g48 + (int)1);
HXDLIN(1517)																			width89 = (width89 + position46->advance->x);
            																		}
            																	}
HXDLIN(1517)																	widthValue = width89;
HXDLIN(1517)																	goto _hx_goto_99;
            																}
            															}
            															_hx_goto_99:;
HXDLIN(1517)															rangeIndex = (rangeIndex - (countRanges13 + (int)1));
HXDLIN(1517)															if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)																rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)																formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)																currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)																font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            															}
            														}
            													}
HXDLIN(1517)													positionWidth3 = (int)0;
            												}
            											}
            										}
            									}
HXDLIN(1517)									placeIndex3 = ((textIndex + i10) - bufferCount3);
HXDLIN(1517)									{
HXLINE(1517)										if ((placeIndex3 <= formatRange->end)) {
HXLINE(1517)											::String text43 = _gthis->text;
HXDLIN(1517)											Float letterSpacing43 = ((Float)0.0);
HXDLIN(1517)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)												letterSpacing43 = formatRange->format->letterSpacing;
            											}
HXDLIN(1517)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1517)											Float width90 = ((Float)0.0);
HXDLIN(1517)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1517)											_gthis->_hx___textLayout->letterSpacing = letterSpacing43;
HXDLIN(1517)											bool positions30;
HXDLIN(1517)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)												positions30 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1517)												positions30 = true;
            											}
HXDLIN(1517)											_gthis->_hx___textLayout->autoHint = positions30;
HXDLIN(1517)											 ::openfl::_internal::text::TextLayout _gthis44 = _gthis->_hx___textLayout;
HXDLIN(1517)											_gthis44->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text43,textIndex,placeIndex3));
HXDLIN(1517)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)											Float width91 = ((Float)0.0);
HXDLIN(1517)											{
HXLINE(1517)												int _g49 = (int)0;
HXDLIN(1517)												while((_g49 < positions->length)){
HXLINE(1517)													 ::openfl::_internal::text::GlyphPosition position47 = positions->__get(_g49).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)													_g49 = (_g49 + (int)1);
HXDLIN(1517)													width91 = (width91 + position47->advance->x);
            												}
            											}
HXDLIN(1517)											widthValue = width91;
HXDLIN(1517)											bool _hx_tmp98;
HXDLIN(1517)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1517)												_hx_tmp98 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1517)												_hx_tmp98 = true;
            											}
HXDLIN(1517)											if (_hx_tmp98) {
HXLINE(1517)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,placeIndex3);
HXDLIN(1517)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1517)												layoutGroup->format = formatRange->format;
HXDLIN(1517)												layoutGroup->startIndex = textIndex;
HXDLIN(1517)												layoutGroup->endIndex = placeIndex3;
            											}
HXDLIN(1517)											layoutGroup->positions = positions;
HXDLIN(1517)											layoutGroup->offsetX = offsetX;
HXDLIN(1517)											layoutGroup->ascent = ascent;
HXDLIN(1517)											layoutGroup->descent = descent;
HXDLIN(1517)											layoutGroup->leading = leading;
HXDLIN(1517)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1517)											layoutGroup->offsetY = offsetY;
HXDLIN(1517)											layoutGroup->width = widthValue;
HXDLIN(1517)											layoutGroup->height = heightValue;
HXDLIN(1517)											offsetX = (offsetX + widthValue);
HXDLIN(1517)											if ((placeIndex3 == formatRange->end)) {
HXLINE(1517)												layoutGroup = null();
HXDLIN(1517)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            												}
HXDLIN(1517)												{
HXLINE(1517)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1517)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1517)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1517)														bool _hx_tmp99;
HXDLIN(1517)														if (hx::IsNotNull( font )) {
HXLINE(1517)															_hx_tmp99 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1517)															_hx_tmp99 = false;
            														}
HXDLIN(1517)														if (_hx_tmp99) {
HXLINE(1517)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1517)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1517)															ascent = currentFormat->size;
HXDLIN(1517)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1517)													leading = currentFormat->leading;
HXDLIN(1517)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1517)													if ((heightValue > maxHeightValue)) {
HXLINE(1517)														maxHeightValue = heightValue;
            													}
HXDLIN(1517)													if ((ascent > maxAscent)) {
HXLINE(1517)														maxAscent = ascent;
            													}
            												}
            											}
            										}
            										else {
HXLINE(1517)											while(true){
HXLINE(1517)												int tempRangeEnd22;
HXDLIN(1517)												if ((placeIndex3 < formatRange->end)) {
HXLINE(1517)													tempRangeEnd22 = placeIndex3;
            												}
            												else {
HXLINE(1517)													tempRangeEnd22 = formatRange->end;
            												}
HXDLIN(1517)												if ((textIndex != tempRangeEnd22)) {
HXLINE(1517)													::String text44 = _gthis->text;
HXDLIN(1517)													Float letterSpacing44 = ((Float)0.0);
HXDLIN(1517)													if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)														letterSpacing44 = formatRange->format->letterSpacing;
            													}
HXDLIN(1517)													if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)														_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            													}
HXDLIN(1517)													Float width92 = ((Float)0.0);
HXDLIN(1517)													_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)													_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)													if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)														_gthis->_hx___textLayout->set_size(formatRange->format->size);
            													}
HXDLIN(1517)													_gthis->_hx___textLayout->letterSpacing = letterSpacing44;
HXDLIN(1517)													bool positions31;
HXDLIN(1517)													if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)														positions31 = (_gthis->sharpness < (int)400);
            													}
            													else {
HXLINE(1517)														positions31 = true;
            													}
HXDLIN(1517)													_gthis->_hx___textLayout->autoHint = positions31;
HXDLIN(1517)													 ::openfl::_internal::text::TextLayout _gthis45 = _gthis->_hx___textLayout;
HXDLIN(1517)													_gthis45->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text44,textIndex,tempRangeEnd22));
HXDLIN(1517)													positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)													Float width93 = ((Float)0.0);
HXDLIN(1517)													{
HXLINE(1517)														int _g50 = (int)0;
HXDLIN(1517)														while((_g50 < positions->length)){
HXLINE(1517)															 ::openfl::_internal::text::GlyphPosition position48 = positions->__get(_g50).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)															_g50 = (_g50 + (int)1);
HXDLIN(1517)															width93 = (width93 + position48->advance->x);
            														}
            													}
HXDLIN(1517)													widthValue = width93;
HXDLIN(1517)													bool _hx_tmp100;
HXDLIN(1517)													if (hx::IsNotNull( layoutGroup )) {
HXLINE(1517)														_hx_tmp100 = (layoutGroup->startIndex != layoutGroup->endIndex);
            													}
            													else {
HXLINE(1517)														_hx_tmp100 = true;
            													}
HXDLIN(1517)													if (_hx_tmp100) {
HXLINE(1517)														layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd22);
HXDLIN(1517)														::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            													}
            													else {
HXLINE(1517)														layoutGroup->format = formatRange->format;
HXDLIN(1517)														layoutGroup->startIndex = textIndex;
HXDLIN(1517)														layoutGroup->endIndex = tempRangeEnd22;
            													}
HXDLIN(1517)													layoutGroup->positions = positions;
HXDLIN(1517)													layoutGroup->offsetX = offsetX;
HXDLIN(1517)													layoutGroup->ascent = ascent;
HXDLIN(1517)													layoutGroup->descent = descent;
HXDLIN(1517)													layoutGroup->leading = leading;
HXDLIN(1517)													layoutGroup->lineIndex = lineIndex;
HXDLIN(1517)													layoutGroup->offsetY = offsetY;
HXDLIN(1517)													layoutGroup->width = widthValue;
HXDLIN(1517)													layoutGroup->height = heightValue;
HXDLIN(1517)													offsetX = (offsetX + widthValue);
HXDLIN(1517)													textIndex = tempRangeEnd22;
            												}
HXDLIN(1517)												if ((tempRangeEnd22 == formatRange->end)) {
HXLINE(1517)													layoutGroup = null();
            												}
HXDLIN(1517)												if ((tempRangeEnd22 == placeIndex3)) {
HXLINE(1517)													goto _hx_goto_102;
            												}
HXDLIN(1517)												bool _hx_tmp101;
HXDLIN(1517)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1517)													_hx_tmp101 = true;
            												}
            												else {
HXLINE(1517)													_hx_tmp101 = false;
            												}
HXDLIN(1517)												if (!(_hx_tmp101)) {
HXLINE(1517)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1517)													goto _hx_goto_102;
            												}
HXDLIN(1517)												{
HXLINE(1517)													if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1517)														ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1517)														descent = (currentFormat->size * currentFormat->_hx___descent);
            													}
            													else {
HXLINE(1517)														bool _hx_tmp102;
HXDLIN(1517)														if (hx::IsNotNull( font )) {
HXLINE(1517)															_hx_tmp102 = (font->unitsPerEM != (int)0);
            														}
            														else {
HXLINE(1517)															_hx_tmp102 = false;
            														}
HXDLIN(1517)														if (_hx_tmp102) {
HXLINE(1517)															ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1517)															descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            														}
            														else {
HXLINE(1517)															ascent = currentFormat->size;
HXDLIN(1517)															descent = (currentFormat->size * ((Float)0.185));
            														}
            													}
HXDLIN(1517)													leading = currentFormat->leading;
HXDLIN(1517)													heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1517)													if ((heightValue > maxHeightValue)) {
HXLINE(1517)														maxHeightValue = heightValue;
            													}
HXDLIN(1517)													if ((ascent > maxAscent)) {
HXLINE(1517)														maxAscent = ascent;
            													}
            												}
            											}
            											_hx_goto_102:;
            										}
HXDLIN(1517)										textIndex = placeIndex3;
            									}
HXDLIN(1517)									{
HXLINE(1517)										{
HXLINE(1517)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1517)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1517)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1517)												bool _hx_tmp103;
HXDLIN(1517)												if (hx::IsNotNull( font )) {
HXLINE(1517)													_hx_tmp103 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1517)													_hx_tmp103 = false;
            												}
HXDLIN(1517)												if (_hx_tmp103) {
HXLINE(1517)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1517)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1517)													ascent = currentFormat->size;
HXDLIN(1517)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1517)											leading = currentFormat->leading;
HXDLIN(1517)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1517)											if ((heightValue > maxHeightValue)) {
HXLINE(1517)												maxHeightValue = heightValue;
            											}
HXDLIN(1517)											if ((ascent > maxAscent)) {
HXLINE(1517)												maxAscent = ascent;
            											}
            										}
HXDLIN(1517)										int i11 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1517)										while(true){
HXLINE(1517)											i11 = (i11 - (int)1);
HXDLIN(1517)											if (!((i11 > (int)-1))) {
HXLINE(1517)												goto _hx_goto_104;
            											}
HXDLIN(1517)											 ::openfl::_internal::text::TextLayoutGroup lg5 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i11)) );
HXDLIN(1517)											if ((lg5->lineIndex < lineIndex)) {
HXLINE(1517)												goto _hx_goto_104;
            											}
HXDLIN(1517)											if ((lg5->lineIndex > lineIndex)) {
HXLINE(1517)												continue;
            											}
HXDLIN(1517)											lg5->ascent = maxAscent;
HXDLIN(1517)											lg5->height = maxHeightValue;
            										}
            										_hx_goto_104:;
HXDLIN(1517)										offsetY = (offsetY + maxHeightValue);
HXDLIN(1517)										maxAscent = ((Float)0.0);
HXDLIN(1517)										maxHeightValue = (int)0;
HXDLIN(1517)										lineIndex = (lineIndex + (int)1);
HXDLIN(1517)										offsetX = (int)2;
            									}
HXDLIN(1517)									if ((endIndex8 <= formatRange->end)) {
HXLINE(1517)										::String text45 = _gthis->text;
HXDLIN(1517)										Float letterSpacing45 = ((Float)0.0);
HXDLIN(1517)										if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)											letterSpacing45 = formatRange->format->letterSpacing;
            										}
HXDLIN(1517)										if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)											_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            										}
HXDLIN(1517)										Float width94 = ((Float)0.0);
HXDLIN(1517)										_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)										_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)										if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)											_gthis->_hx___textLayout->set_size(formatRange->format->size);
            										}
HXDLIN(1517)										_gthis->_hx___textLayout->letterSpacing = letterSpacing45;
HXDLIN(1517)										bool positions32;
HXDLIN(1517)										if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)											positions32 = (_gthis->sharpness < (int)400);
            										}
            										else {
HXLINE(1517)											positions32 = true;
            										}
HXDLIN(1517)										_gthis->_hx___textLayout->autoHint = positions32;
HXDLIN(1517)										 ::openfl::_internal::text::TextLayout _gthis46 = _gthis->_hx___textLayout;
HXDLIN(1517)										_gthis46->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text45,placeIndex3,endIndex8));
HXDLIN(1517)										positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)										Float width95 = ((Float)0.0);
HXDLIN(1517)										{
HXLINE(1517)											int _g51 = (int)0;
HXDLIN(1517)											while((_g51 < positions->length)){
HXLINE(1517)												 ::openfl::_internal::text::GlyphPosition position49 = positions->__get(_g51).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)												_g51 = (_g51 + (int)1);
HXDLIN(1517)												width95 = (width95 + position49->advance->x);
            											}
            										}
HXDLIN(1517)										widthValue = width95;
            									}
            									else {
HXLINE(1517)										int tempIndex14 = placeIndex3;
HXDLIN(1517)										int tempRangeEnd23 = formatRange->end;
HXDLIN(1517)										int countRanges14 = (int)0;
HXDLIN(1517)										positions = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1517)										widthValue = (int)0;
HXDLIN(1517)										while(true){
HXLINE(1517)											if ((tempIndex14 != tempRangeEnd23)) {
HXLINE(1517)												::String text46 = _gthis->text;
HXDLIN(1517)												Float letterSpacing46 = ((Float)0.0);
HXDLIN(1517)												if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)													letterSpacing46 = formatRange->format->letterSpacing;
            												}
HXDLIN(1517)												if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)													_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            												}
HXDLIN(1517)												Float width96 = ((Float)0.0);
HXDLIN(1517)												_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)												_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)												if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)													_gthis->_hx___textLayout->set_size(formatRange->format->size);
            												}
HXDLIN(1517)												_gthis->_hx___textLayout->letterSpacing = letterSpacing46;
HXDLIN(1517)												bool _hx_tmp104;
HXDLIN(1517)												if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)													_hx_tmp104 = (_gthis->sharpness < (int)400);
            												}
            												else {
HXLINE(1517)													_hx_tmp104 = true;
            												}
HXDLIN(1517)												_gthis->_hx___textLayout->autoHint = _hx_tmp104;
HXDLIN(1517)												 ::openfl::_internal::text::TextLayout _gthis47 = _gthis->_hx___textLayout;
HXDLIN(1517)												_gthis47->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text46,tempIndex14,tempRangeEnd23));
HXDLIN(1517)												::Array< ::Dynamic> tempPositions14 = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)												positions = positions->concat(tempPositions14);
            											}
HXDLIN(1517)											if ((tempRangeEnd23 != endIndex8)) {
HXLINE(1517)												bool _hx_tmp105;
HXDLIN(1517)												if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)													rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)													formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)													currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)													font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1517)													_hx_tmp105 = true;
            												}
            												else {
HXLINE(1517)													_hx_tmp105 = false;
            												}
HXDLIN(1517)												if (!(_hx_tmp105)) {
HXLINE(1517)													::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1008,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1517)													goto _hx_goto_106;
            												}
HXDLIN(1517)												tempIndex14 = tempRangeEnd23;
HXDLIN(1517)												if ((endIndex8 < formatRange->end)) {
HXLINE(1517)													tempRangeEnd23 = endIndex8;
            												}
            												else {
HXLINE(1517)													tempRangeEnd23 = formatRange->end;
            												}
HXDLIN(1517)												countRanges14 = (countRanges14 + (int)1);
            											}
            											else {
HXLINE(1517)												Float width97 = ((Float)0.0);
HXDLIN(1517)												{
HXLINE(1517)													int _g52 = (int)0;
HXDLIN(1517)													while((_g52 < positions->length)){
HXLINE(1517)														 ::openfl::_internal::text::GlyphPosition position50 = positions->__get(_g52).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)														_g52 = (_g52 + (int)1);
HXDLIN(1517)														width97 = (width97 + position50->advance->x);
            													}
            												}
HXDLIN(1517)												widthValue = width97;
HXDLIN(1517)												goto _hx_goto_106;
            											}
            										}
            										_hx_goto_106:;
HXDLIN(1517)										rangeIndex = (rangeIndex - (countRanges14 + (int)1));
HXDLIN(1517)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
            									}
HXDLIN(1517)									remainingPositions3 = positions;
HXDLIN(1517)									tempWidth3 = widthValue;
            								}
            								_hx_goto_92:;
            							}
HXDLIN(1517)							{
HXLINE(1517)								if ((endIndex8 <= formatRange->end)) {
HXLINE(1517)									::String text47 = _gthis->text;
HXDLIN(1517)									Float letterSpacing47 = ((Float)0.0);
HXDLIN(1517)									if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)										letterSpacing47 = formatRange->format->letterSpacing;
            									}
HXDLIN(1517)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)										_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1517)									Float width98 = ((Float)0.0);
HXDLIN(1517)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1517)									_gthis->_hx___textLayout->letterSpacing = letterSpacing47;
HXDLIN(1517)									bool positions33;
HXDLIN(1517)									if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)										positions33 = (_gthis->sharpness < (int)400);
            									}
            									else {
HXLINE(1517)										positions33 = true;
            									}
HXDLIN(1517)									_gthis->_hx___textLayout->autoHint = positions33;
HXDLIN(1517)									 ::openfl::_internal::text::TextLayout _gthis48 = _gthis->_hx___textLayout;
HXDLIN(1517)									_gthis48->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text47,textIndex,endIndex8));
HXDLIN(1517)									positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)									Float width99 = ((Float)0.0);
HXDLIN(1517)									{
HXLINE(1517)										int _g53 = (int)0;
HXDLIN(1517)										while((_g53 < positions->length)){
HXLINE(1517)											 ::openfl::_internal::text::GlyphPosition position51 = positions->__get(_g53).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)											_g53 = (_g53 + (int)1);
HXDLIN(1517)											width99 = (width99 + position51->advance->x);
            										}
            									}
HXDLIN(1517)									widthValue = width99;
HXDLIN(1517)									bool _hx_tmp106;
HXDLIN(1517)									if (hx::IsNotNull( layoutGroup )) {
HXLINE(1517)										_hx_tmp106 = (layoutGroup->startIndex != layoutGroup->endIndex);
            									}
            									else {
HXLINE(1517)										_hx_tmp106 = true;
            									}
HXDLIN(1517)									if (_hx_tmp106) {
HXLINE(1517)										layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,endIndex8);
HXDLIN(1517)										::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            									}
            									else {
HXLINE(1517)										layoutGroup->format = formatRange->format;
HXDLIN(1517)										layoutGroup->startIndex = textIndex;
HXDLIN(1517)										layoutGroup->endIndex = endIndex8;
            									}
HXDLIN(1517)									layoutGroup->positions = positions;
HXDLIN(1517)									layoutGroup->offsetX = offsetX;
HXDLIN(1517)									layoutGroup->ascent = ascent;
HXDLIN(1517)									layoutGroup->descent = descent;
HXDLIN(1517)									layoutGroup->leading = leading;
HXDLIN(1517)									layoutGroup->lineIndex = lineIndex;
HXDLIN(1517)									layoutGroup->offsetY = offsetY;
HXDLIN(1517)									layoutGroup->width = widthValue;
HXDLIN(1517)									layoutGroup->height = heightValue;
HXDLIN(1517)									offsetX = (offsetX + widthValue);
HXDLIN(1517)									if ((endIndex8 == formatRange->end)) {
HXLINE(1517)										layoutGroup = null();
HXDLIN(1517)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
            										}
HXDLIN(1517)										{
HXLINE(1517)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1517)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1517)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1517)												bool _hx_tmp107;
HXDLIN(1517)												if (hx::IsNotNull( font )) {
HXLINE(1517)													_hx_tmp107 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1517)													_hx_tmp107 = false;
            												}
HXDLIN(1517)												if (_hx_tmp107) {
HXLINE(1517)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1517)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1517)													ascent = currentFormat->size;
HXDLIN(1517)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1517)											leading = currentFormat->leading;
HXDLIN(1517)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1517)											if ((heightValue > maxHeightValue)) {
HXLINE(1517)												maxHeightValue = heightValue;
            											}
HXDLIN(1517)											if ((ascent > maxAscent)) {
HXLINE(1517)												maxAscent = ascent;
            											}
            										}
            									}
            								}
            								else {
HXLINE(1517)									while(true){
HXLINE(1517)										int tempRangeEnd24;
HXDLIN(1517)										if ((endIndex8 < formatRange->end)) {
HXLINE(1517)											tempRangeEnd24 = endIndex8;
            										}
            										else {
HXLINE(1517)											tempRangeEnd24 = formatRange->end;
            										}
HXDLIN(1517)										if ((textIndex != tempRangeEnd24)) {
HXLINE(1517)											::String text48 = _gthis->text;
HXDLIN(1517)											Float letterSpacing48 = ((Float)0.0);
HXDLIN(1517)											if (hx::IsNotNull( formatRange->format->letterSpacing )) {
HXLINE(1517)												letterSpacing48 = formatRange->format->letterSpacing;
            											}
HXDLIN(1517)											if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1517)												_gthis->_hx___textLayout =  ::openfl::_internal::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            											}
HXDLIN(1517)											Float width100 = ((Float)0.0);
HXDLIN(1517)											_gthis->_hx___textLayout->set_text(null());
HXDLIN(1517)											_gthis->_hx___textLayout->set_font(font);
HXDLIN(1517)											if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1517)												_gthis->_hx___textLayout->set_size(formatRange->format->size);
            											}
HXDLIN(1517)											_gthis->_hx___textLayout->letterSpacing = letterSpacing48;
HXDLIN(1517)											bool positions34;
HXDLIN(1517)											if (hx::IsEq( _gthis->antiAliasType,(int)0 )) {
HXLINE(1517)												positions34 = (_gthis->sharpness < (int)400);
            											}
            											else {
HXLINE(1517)												positions34 = true;
            											}
HXDLIN(1517)											_gthis->_hx___textLayout->autoHint = positions34;
HXDLIN(1517)											 ::openfl::_internal::text::TextLayout _gthis49 = _gthis->_hx___textLayout;
HXDLIN(1517)											_gthis49->set_text(::lime::text::_UTF8String::UTF8String_Impl__obj::substring(text48,textIndex,tempRangeEnd24));
HXDLIN(1517)											positions = _gthis->_hx___textLayout->get_positions();
HXDLIN(1517)											Float width101 = ((Float)0.0);
HXDLIN(1517)											{
HXLINE(1517)												int _g54 = (int)0;
HXDLIN(1517)												while((_g54 < positions->length)){
HXLINE(1517)													 ::openfl::_internal::text::GlyphPosition position52 = positions->__get(_g54).StaticCast<  ::openfl::_internal::text::GlyphPosition >();
HXDLIN(1517)													_g54 = (_g54 + (int)1);
HXDLIN(1517)													width101 = (width101 + position52->advance->x);
            												}
            											}
HXDLIN(1517)											widthValue = width101;
HXDLIN(1517)											bool _hx_tmp108;
HXDLIN(1517)											if (hx::IsNotNull( layoutGroup )) {
HXLINE(1517)												_hx_tmp108 = (layoutGroup->startIndex != layoutGroup->endIndex);
            											}
            											else {
HXLINE(1517)												_hx_tmp108 = true;
            											}
HXDLIN(1517)											if (_hx_tmp108) {
HXLINE(1517)												layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,tempRangeEnd24);
HXDLIN(1517)												::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            											}
            											else {
HXLINE(1517)												layoutGroup->format = formatRange->format;
HXDLIN(1517)												layoutGroup->startIndex = textIndex;
HXDLIN(1517)												layoutGroup->endIndex = tempRangeEnd24;
            											}
HXDLIN(1517)											layoutGroup->positions = positions;
HXDLIN(1517)											layoutGroup->offsetX = offsetX;
HXDLIN(1517)											layoutGroup->ascent = ascent;
HXDLIN(1517)											layoutGroup->descent = descent;
HXDLIN(1517)											layoutGroup->leading = leading;
HXDLIN(1517)											layoutGroup->lineIndex = lineIndex;
HXDLIN(1517)											layoutGroup->offsetY = offsetY;
HXDLIN(1517)											layoutGroup->width = widthValue;
HXDLIN(1517)											layoutGroup->height = heightValue;
HXDLIN(1517)											offsetX = (offsetX + widthValue);
HXDLIN(1517)											textIndex = tempRangeEnd24;
            										}
HXDLIN(1517)										if ((tempRangeEnd24 == formatRange->end)) {
HXLINE(1517)											layoutGroup = null();
            										}
HXDLIN(1517)										if ((tempRangeEnd24 == endIndex8)) {
HXLINE(1517)											goto _hx_goto_109;
            										}
HXDLIN(1517)										bool _hx_tmp109;
HXDLIN(1517)										if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1517)											rangeIndex = (rangeIndex + (int)1);
HXDLIN(1517)											formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1517)											currentFormat->_hx___merge(formatRange->format);
HXDLIN(1517)											font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1517)											_hx_tmp109 = true;
            										}
            										else {
HXLINE(1517)											_hx_tmp109 = false;
            										}
HXDLIN(1517)										if (!(_hx_tmp109)) {
HXLINE(1517)											::lime::utils::Log_obj::warn(HX_("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",08,e2,e2,42),hx::SourceInfo(HX_("TextEngine.hx",af,a5,03,1c),1097,HX_("openfl._internal.text.TextEngine",60,7a,88,a0),HX_("getLayoutGroups",54,f8,56,5a)));
HXDLIN(1517)											goto _hx_goto_109;
            										}
HXDLIN(1517)										{
HXLINE(1517)											if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1517)												ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1517)												descent = (currentFormat->size * currentFormat->_hx___descent);
            											}
            											else {
HXLINE(1517)												bool _hx_tmp110;
HXDLIN(1517)												if (hx::IsNotNull( font )) {
HXLINE(1517)													_hx_tmp110 = (font->unitsPerEM != (int)0);
            												}
            												else {
HXLINE(1517)													_hx_tmp110 = false;
            												}
HXDLIN(1517)												if (_hx_tmp110) {
HXLINE(1517)													ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1517)													descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            												}
            												else {
HXLINE(1517)													ascent = currentFormat->size;
HXDLIN(1517)													descent = (currentFormat->size * ((Float)0.185));
            												}
            											}
HXDLIN(1517)											leading = currentFormat->leading;
HXDLIN(1517)											heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1517)											if ((heightValue > maxHeightValue)) {
HXLINE(1517)												maxHeightValue = heightValue;
            											}
HXDLIN(1517)											if ((ascent > maxAscent)) {
HXLINE(1517)												maxAscent = ascent;
            											}
            										}
            									}
            									_hx_goto_109:;
            								}
HXDLIN(1517)								textIndex = endIndex8;
            							}
            						}
HXLINE(1519)						{
HXLINE(1519)							{
HXLINE(1519)								if (hx::IsNotNull( currentFormat->_hx___ascent )) {
HXLINE(1519)									ascent = (currentFormat->size * currentFormat->_hx___ascent);
HXDLIN(1519)									descent = (currentFormat->size * currentFormat->_hx___descent);
            								}
            								else {
HXLINE(1519)									bool _hx_tmp111;
HXDLIN(1519)									if (hx::IsNotNull( font )) {
HXLINE(1519)										_hx_tmp111 = (font->unitsPerEM != (int)0);
            									}
            									else {
HXLINE(1519)										_hx_tmp111 = false;
            									}
HXDLIN(1519)									if (_hx_tmp111) {
HXLINE(1519)										ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * currentFormat->size);
HXDLIN(1519)										descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * currentFormat->size));
            									}
            									else {
HXLINE(1519)										ascent = currentFormat->size;
HXDLIN(1519)										descent = (currentFormat->size * ((Float)0.185));
            									}
            								}
HXDLIN(1519)								leading = currentFormat->leading;
HXDLIN(1519)								heightValue = ::Math_obj::ceil(((ascent + descent) + leading));
HXDLIN(1519)								if ((heightValue > maxHeightValue)) {
HXLINE(1519)									maxHeightValue = heightValue;
            								}
HXDLIN(1519)								if ((ascent > maxAscent)) {
HXLINE(1519)									maxAscent = ascent;
            								}
            							}
HXDLIN(1519)							int i12 = ::openfl::_Vector::IVector_obj::get_length(_gthis->layoutGroups);
HXDLIN(1519)							while(true){
HXLINE(1519)								i12 = (i12 - (int)1);
HXDLIN(1519)								if (!((i12 > (int)-1))) {
HXLINE(1519)									goto _hx_goto_111;
            								}
HXDLIN(1519)								 ::openfl::_internal::text::TextLayoutGroup lg6 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(_gthis->layoutGroups,i12)) );
HXDLIN(1519)								if ((lg6->lineIndex < lineIndex)) {
HXLINE(1519)									goto _hx_goto_111;
            								}
HXDLIN(1519)								if ((lg6->lineIndex > lineIndex)) {
HXLINE(1519)									continue;
            								}
HXDLIN(1519)								lg6->ascent = maxAscent;
HXDLIN(1519)								lg6->height = maxHeightValue;
            							}
            							_hx_goto_111:;
HXDLIN(1519)							offsetY = (offsetY + maxHeightValue);
HXDLIN(1519)							maxAscent = ((Float)0.0);
HXDLIN(1519)							maxHeightValue = (int)0;
HXDLIN(1519)							lineIndex = (lineIndex + (int)1);
HXDLIN(1519)							offsetX = (int)2;
            						}
            					}
HXLINE(1522)					textIndex = (textIndex + (int)1);
            				}
            			}
            		}
HXLINE(1527)		bool _hx_tmp112;
HXDLIN(1527)		if ((previousBreakIndex == (textIndex - (int)2))) {
HXLINE(1527)			_hx_tmp112 = (previousBreakIndex > (int)-1);
            		}
            		else {
HXLINE(1527)			_hx_tmp112 = false;
            		}
HXDLIN(1527)		if (_hx_tmp112) {
HXLINE(1529)			bool _hx_tmp113;
HXDLIN(1529)			if (hx::IsNotNull( layoutGroup )) {
HXLINE(1529)				_hx_tmp113 = (layoutGroup->startIndex != layoutGroup->endIndex);
            			}
            			else {
HXLINE(1529)				_hx_tmp113 = true;
            			}
HXDLIN(1529)			if (_hx_tmp113) {
HXLINE(1529)				layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,textIndex);
HXDLIN(1529)				::openfl::_Vector::IVector_obj::push(_gthis->layoutGroups,layoutGroup);
            			}
            			else {
HXLINE(1529)				layoutGroup->format = formatRange->format;
HXDLIN(1529)				layoutGroup->startIndex = textIndex;
HXDLIN(1529)				layoutGroup->endIndex = textIndex;
            			}
HXLINE(1531)			layoutGroup->positions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1532)			layoutGroup->ascent = ascent;
HXLINE(1533)			layoutGroup->descent = descent;
HXLINE(1534)			layoutGroup->leading = leading;
HXLINE(1535)			layoutGroup->lineIndex = lineIndex;
HXLINE(1536)			layoutGroup->offsetX = (int)2;
HXLINE(1537)			layoutGroup->offsetY = offsetY;
HXLINE(1538)			layoutGroup->width = (int)0;
HXLINE(1539)			layoutGroup->height = heightValue;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

::String TextEngine_obj::restrictText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1552_restrictText)
HXLINE(1553)		if (hx::IsNull( value )) {
HXLINE(1555)			return value;
            		}
HXLINE(1558)		if (hx::IsNotNull( this->_hx___restrictRegexp )) {
HXLINE(1560)			value = this->_hx___restrictRegexp->split(value)->join(HX_("",00,00,00,00));
            		}
HXLINE(1569)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,restrictText,return )

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1573_setTextAlignment)
HXLINE(1574)		int lineIndex = (int)-1;
HXLINE(1575)		Float offsetX = ((Float)0.0);
HXLINE(1576)		Float totalWidth = (this->width - (int)4);
HXLINE(1577)		 ::openfl::_internal::text::TextLayoutGroup group;
HXDLIN(1577)		int lineLength;
HXLINE(1578)		bool lineMeasurementsDirty = false;
HXLINE(1580)		{
HXLINE(1580)			int _g1 = (int)0;
HXDLIN(1580)			int _g = this->layoutGroups->get_length();
HXDLIN(1580)			while((_g1 < _g)){
HXLINE(1580)				_g1 = (_g1 + (int)1);
HXDLIN(1580)				int i = (_g1 - (int)1);
HXLINE(1582)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1584)				if ((group->lineIndex != lineIndex)) {
HXLINE(1586)					lineIndex = group->lineIndex;
HXLINE(1588)					{
HXLINE(1588)						 ::Dynamic _g2 = group->format->align;
HXDLIN(1588)						 ::Dynamic _hx_switch_0 = _g2;
            						if (  (_hx_switch_0==(int)0) ){
HXLINE(1591)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1593)								offsetX = ::Math_obj::round(((Float)(totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )) / (Float)(int)2));
            							}
            							else {
HXLINE(1597)								offsetX = (int)0;
            							}
HXLINE(1591)							goto _hx_goto_115;
            						}
            						if (  (_hx_switch_0==(int)2) ){
HXLINE(1611)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1613)								lineLength = (int)1;
HXLINE(1615)								{
HXLINE(1615)									int _g3 = (i + (int)1);
HXDLIN(1615)									int _g21 = ::openfl::_Vector::IVector_obj::get_length(this->layoutGroups);
HXDLIN(1615)									while((_g3 < _g21)){
HXLINE(1615)										_g3 = (_g3 + (int)1);
HXDLIN(1615)										int j = (_g3 - (int)1);
HXLINE(1617)										if ((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->lineIndex == lineIndex)) {
HXLINE(1619)											bool _hx_tmp;
HXDLIN(1619)											if ((j != (int)0)) {
HXLINE(1619)												::String _hx_tmp1 = this->text;
HXDLIN(1619)												_hx_tmp = hx::IsEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp1,(( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,j)) )->startIndex - (int)1)),(int)32 );
            											}
            											else {
HXLINE(1619)												_hx_tmp = true;
            											}
HXDLIN(1619)											if (_hx_tmp) {
HXLINE(1621)												lineLength = (lineLength + (int)1);
            											}
            										}
            										else {
HXLINE(1626)											goto _hx_goto_116;
            										}
            									}
            									_hx_goto_116:;
            								}
HXLINE(1630)								if ((lineLength > (int)1)) {
HXLINE(1632)									group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,((i + lineLength) - (int)1))) );
HXLINE(1634)									 ::Dynamic endChar = ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(this->text,group->endIndex);
HXLINE(1635)									bool _hx_tmp2;
HXDLIN(1635)									bool _hx_tmp3;
HXDLIN(1635)									int group1 = group->endIndex;
HXDLIN(1635)									if ((group1 < ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text))) {
HXLINE(1635)										_hx_tmp3 = hx::IsNotEq( endChar,(int)10 );
            									}
            									else {
HXLINE(1635)										_hx_tmp3 = false;
            									}
HXDLIN(1635)									if (_hx_tmp3) {
HXLINE(1635)										_hx_tmp2 = hx::IsNotEq( endChar,(int)13 );
            									}
            									else {
HXLINE(1635)										_hx_tmp2 = false;
            									}
HXDLIN(1635)									if (_hx_tmp2) {
HXLINE(1637)										Float offsetX1 = (totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ));
HXDLIN(1637)										offsetX = ((Float)offsetX1 / (Float)(lineLength - (int)1));
HXLINE(1638)										lineMeasurementsDirty = true;
HXLINE(1640)										int j1 = (int)1;
HXLINE(1641)										while(true){
HXLINE(1650)											 ::openfl::_internal::text::TextLayoutGroup _hx_tmp4 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j1))) );
HXDLIN(1650)											_hx_tmp4->offsetX = (_hx_tmp4->offsetX + (offsetX * j1));
HXLINE(1652)											j1 = (j1 + (int)1);
HXLINE(1641)											if (!((j1 < lineLength))) {
HXLINE(1641)												goto _hx_goto_117;
            											}
            										}
            										_hx_goto_117:;
            									}
            								}
            							}
HXLINE(1657)							offsetX = (int)0;
HXLINE(1610)							goto _hx_goto_115;
            						}
            						if (  (_hx_switch_0==(int)4) ){
HXLINE(1601)							if ((( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) ) < totalWidth)) {
HXLINE(1603)								offsetX = ::Math_obj::round((totalWidth - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )));
            							}
            							else {
HXLINE(1607)								offsetX = (int)0;
            							}
HXLINE(1601)							goto _hx_goto_115;
            						}
            						/* default */{
HXLINE(1660)							offsetX = (int)0;
            						}
            						_hx_goto_115:;
            					}
            				}
HXLINE(1664)				if ((offsetX > (int)0)) {
HXLINE(1666)					 ::openfl::_internal::text::TextLayoutGroup group2 = group;
HXDLIN(1666)					group2->offsetX = (group2->offsetX + offsetX);
            				}
            			}
            		}
HXLINE(1670)		if (lineMeasurementsDirty) {
HXLINE(1674)			this->getLineMeasurements();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

::String TextEngine_obj::trimText(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1679_trimText)
HXLINE(1680)		if (hx::IsNull( value )) {
HXLINE(1682)			return value;
            		}
HXLINE(1685)		bool _hx_tmp;
HXDLIN(1685)		if ((this->maxChars > (int)0)) {
HXLINE(1685)			int _hx_tmp1 = ::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(value);
HXDLIN(1685)			_hx_tmp = (_hx_tmp1 > this->maxChars);
            		}
            		else {
HXLINE(1685)			_hx_tmp = false;
            		}
HXDLIN(1685)		if (_hx_tmp) {
HXLINE(1687)			value = ::lime::text::_UTF8String::UTF8String_Impl__obj::substr(value,(int)0,this->maxChars);
            		}
HXLINE(1690)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,trimText,return )

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1694_update)
HXLINE(1695)		bool _hx_tmp;
HXDLIN(1695)		if (hx::IsNotNull( this->text )) {
HXLINE(1695)			_hx_tmp = (this->textFormatRanges->get_length() == (int)0);
            		}
            		else {
HXLINE(1695)			_hx_tmp = true;
            		}
HXDLIN(1695)		if (_hx_tmp) {
HXLINE(1697)			this->lineAscents->set_length((int)0);
HXLINE(1698)			this->lineBreaks->set_length((int)0);
HXLINE(1699)			this->lineDescents->set_length((int)0);
HXLINE(1700)			this->lineLeadings->set_length((int)0);
HXLINE(1701)			this->lineHeights->set_length((int)0);
HXLINE(1702)			this->lineWidths->set_length((int)0);
HXLINE(1703)			this->layoutGroups->set_length((int)0);
HXLINE(1705)			this->textWidth = (int)0;
HXLINE(1706)			this->textHeight = (int)0;
HXLINE(1707)			this->numLines = (int)1;
HXLINE(1708)			this->maxScrollH = (int)0;
HXLINE(1709)			this->maxScrollV = (int)1;
HXLINE(1710)			this->bottomScrollV = (int)1;
            		}
            		else {
HXLINE(1714)			this->getLayoutGroups();
HXLINE(1715)			this->getLineMeasurements();
HXLINE(1716)			this->setTextAlignment();
            		}
HXLINE(1719)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

int TextEngine_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1726_get_bottomScrollV)
HXDLIN(1726)		bool _hx_tmp;
HXDLIN(1726)		if ((this->numLines != (int)1)) {
HXDLIN(1726)			_hx_tmp = hx::IsNull( this->lineHeights );
            		}
            		else {
HXDLIN(1726)			_hx_tmp = true;
            		}
HXDLIN(1726)		if (_hx_tmp) {
HXLINE(1728)			return (int)1;
            		}
            		else {
HXLINE(1732)			Float tempHeight = ((Float)0.0);
HXLINE(1733)			int ret = this->lineHeights->get_length();
HXLINE(1735)			{
HXLINE(1735)				int _g1 = (ret - (int)1);
HXDLIN(1735)				int _g = this->lineHeights->get_length();
HXDLIN(1735)				while((_g1 < _g)){
HXLINE(1735)					_g1 = (_g1 + (int)1);
HXDLIN(1735)					int i = (_g1 - (int)1);
HXLINE(1737)					Float _hx_tmp1 = (tempHeight + this->lineHeights->get(i));
HXDLIN(1737)					if ((_hx_tmp1 <= (this->height - (int)4))) {
HXLINE(1739)						tempHeight = (tempHeight + this->lineHeights->get(i));
            					}
            					else {
HXLINE(1743)						ret = i;
HXLINE(1744)						goto _hx_goto_121;
            					}
            				}
            				_hx_goto_121:;
            			}
HXLINE(1748)			if ((ret < (int)1)) {
HXLINE(1748)				return (int)1;
            			}
HXLINE(1749)			return ret;
            		}
HXLINE(1726)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_bottomScrollV,return )

int TextEngine_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1756_get_maxScrollV)
HXDLIN(1756)		bool _hx_tmp;
HXDLIN(1756)		if ((this->numLines != (int)1)) {
HXDLIN(1756)			_hx_tmp = hx::IsNull( this->lineHeights );
            		}
            		else {
HXDLIN(1756)			_hx_tmp = true;
            		}
HXDLIN(1756)		if (_hx_tmp) {
HXLINE(1758)			return (int)1;
            		}
            		else {
HXLINE(1762)			int i = (this->numLines - (int)1);
HXDLIN(1762)			Float tempHeight = ((Float)0.0);
HXLINE(1764)			::String _hx_tmp1 = this->text;
HXDLIN(1764)			if (hx::IsEq( ::lime::text::_UTF8String::UTF8String_Impl__obj::charCodeAt(_hx_tmp1,(::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->text) - (int)1)),(int)10 )) {
HXLINE(1764)				i = (i - (int)1);
            			}
HXLINE(1765)			int j = i;
HXLINE(1767)			while((i >= (int)0)){
HXLINE(1769)				Float _hx_tmp2 = (tempHeight + this->lineHeights->get(i));
HXDLIN(1769)				if ((_hx_tmp2 <= (this->height - (int)4))) {
HXLINE(1771)					tempHeight = (tempHeight + this->lineHeights->get(i));
HXLINE(1772)					i = (i - (int)1);
            				}
            				else {
HXLINE(1775)					goto _hx_goto_123;
            				}
            			}
            			_hx_goto_123:;
HXLINE(1778)			if ((i == j)) {
HXLINE(1778)				i = this->numLines;
            			}
            			else {
HXLINE(1780)				i = (i + (int)2);
            			}
HXLINE(1782)			if ((i < (int)1)) {
HXLINE(1782)				return (int)1;
            			}
HXLINE(1783)			return i;
            		}
HXLINE(1756)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_maxScrollV,return )

::String TextEngine_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1788_set_restrict)
HXLINE(1789)		if (::lime::text::_UTF8String::UTF8String_Impl__obj::equals(this->restrict,value)) {
HXLINE(1791)			return this->restrict;
            		}
HXLINE(1794)		this->restrict = value;
HXLINE(1796)		bool _hx_tmp;
HXDLIN(1796)		if (hx::IsNotNull( this->restrict )) {
HXLINE(1796)			_hx_tmp = (::lime::text::_UTF8String::UTF8String_Impl__obj::get_length(this->restrict) == (int)0);
            		}
            		else {
HXLINE(1796)			_hx_tmp = true;
            		}
HXDLIN(1796)		if (_hx_tmp) {
HXLINE(1798)			this->_hx___restrictRegexp = null();
            		}
            		else {
HXLINE(1802)			this->_hx___restrictRegexp = this->createRestrictRegexp(value);
            		}
HXLINE(1805)		return this->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_restrict,return )

int TextEngine_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1809_get_scrollV)
HXLINE(1810)		bool _hx_tmp;
HXDLIN(1810)		if ((this->numLines != (int)1)) {
HXLINE(1810)			_hx_tmp = hx::IsNull( this->lineHeights );
            		}
            		else {
HXLINE(1810)			_hx_tmp = true;
            		}
HXDLIN(1810)		if (_hx_tmp) {
HXLINE(1810)			return (int)1;
            		}
HXLINE(1812)		int max = this->get_maxScrollV();
HXLINE(1813)		if ((this->scrollV > max)) {
HXLINE(1813)			return max;
            		}
HXLINE(1814)		return this->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,get_scrollV,return )

int TextEngine_obj::set_scrollV(int value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1818_set_scrollV)
HXLINE(1819)		if ((value < (int)1)) {
HXLINE(1819)			value = (int)1;
            		}
HXLINE(1820)		return (this->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_scrollV,return )

::String TextEngine_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1825_set_text)
HXDLIN(1825)		return (this->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,set_text,return )

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_173_findFont)
HXLINE( 177)		{
HXLINE( 177)			int _g = (int)0;
HXDLIN( 177)			::Array< ::Dynamic> _g1 = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 177)			while((_g < _g1->length)){
HXLINE( 177)				 ::openfl::text::Font registeredFont = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 177)				_g = (_g + (int)1);
HXLINE( 179)				if (hx::IsNull( registeredFont )) {
HXLINE( 179)					continue;
            				}
HXLINE( 181)				bool _hx_tmp;
HXDLIN( 181)				if ((registeredFont->name != name)) {
HXLINE( 182)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 183)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 181)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 181)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 181)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 181)					_hx_tmp = true;
            				}
HXDLIN( 181)				if (_hx_tmp) {
HXLINE( 185)					if (registeredFont->_hx___initialize()) {
HXLINE( 187)						return registeredFont;
            					}
            				}
            			}
            		}
HXLINE( 196)		 ::openfl::text::Font font = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 198)		if (hx::IsNotNull( font )) {
HXLINE( 200)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 201)			return font;
            		}
HXLINE( 205)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

 ::openfl::text::Font TextEngine_obj::findFontVariant( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_209_findFontVariant)
HXLINE( 210)		::String fontName = format->font;
HXLINE( 211)		 ::Dynamic bold = format->bold;
HXLINE( 212)		 ::Dynamic italic = format->italic;
HXLINE( 214)		if (hx::IsNull( fontName )) {
HXLINE( 214)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 215)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 217)		bool _hx_tmp;
HXDLIN( 217)		bool _hx_tmp1;
HXDLIN( 217)		if (bold) {
HXLINE( 217)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 217)			_hx_tmp1 = false;
            		}
HXDLIN( 217)		if (_hx_tmp1) {
HXLINE( 217)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 217)			_hx_tmp = false;
            		}
HXDLIN( 217)		if (_hx_tmp) {
HXLINE( 219)			return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 221)			bool _hx_tmp2;
HXDLIN( 221)			if (bold) {
HXLINE( 221)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 221)				_hx_tmp2 = false;
            			}
HXDLIN( 221)			if (_hx_tmp2) {
HXLINE( 223)				return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 225)				bool _hx_tmp3;
HXDLIN( 225)				if (italic) {
HXLINE( 225)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 225)					_hx_tmp3 = false;
            				}
HXDLIN( 225)				if (_hx_tmp3) {
HXLINE( 227)					return ::openfl::_internal::text::TextEngine_obj::findFont((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            			}
            		}
HXLINE( 230)		return ::openfl::_internal::text::TextEngine_obj::findFont(fontName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFontVariant,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_259_getFormatHeight)
HXLINE( 260)		Float ascent;
HXDLIN( 260)		Float descent;
HXDLIN( 260)		int leading;
HXLINE( 266)		 ::openfl::text::Font font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 268)		if (hx::IsNotNull( format->_hx___ascent )) {
HXLINE( 270)			ascent = (format->size * format->_hx___ascent);
HXLINE( 271)			descent = (format->size * format->_hx___descent);
            		}
            		else {
HXLINE( 273)			bool _hx_tmp;
HXDLIN( 273)			if (hx::IsNotNull( font )) {
HXLINE( 273)				_hx_tmp = (font->unitsPerEM != (int)0);
            			}
            			else {
HXLINE( 273)				_hx_tmp = false;
            			}
HXDLIN( 273)			if (_hx_tmp) {
HXLINE( 276)				ascent = (((Float)font->ascender / (Float)font->unitsPerEM) * format->size);
HXLINE( 277)				descent = ::Math_obj::abs((((Float)font->descender / (Float)font->unitsPerEM) * format->size));
            			}
            			else {
HXLINE( 285)				ascent = format->size;
HXLINE( 286)				descent = (format->size * ((Float)0.185));
            			}
            		}
HXLINE( 289)		leading = format->leading;
HXLINE( 291)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_295_getFont)
HXLINE( 296)		::String fontName = format->font;
HXLINE( 297)		 ::Dynamic bold = format->bold;
HXLINE( 298)		 ::Dynamic italic = format->italic;
HXLINE( 300)		if (hx::IsNull( fontName )) {
HXLINE( 300)			fontName = HX_("_serif",be,66,15,76);
            		}
HXLINE( 301)		::String fontNamePrefix = ::StringTools_obj::replace(::StringTools_obj::replace(fontName,HX_(" Normal",67,be,ac,97),HX_("",00,00,00,00)),HX_(" Regular",1c,be,27,76),HX_("",00,00,00,00));
HXLINE( 303)		bool _hx_tmp;
HXDLIN( 303)		bool _hx_tmp1;
HXDLIN( 303)		if (bold) {
HXLINE( 303)			_hx_tmp1 = italic;
            		}
            		else {
HXLINE( 303)			_hx_tmp1 = false;
            		}
HXDLIN( 303)		if (_hx_tmp1) {
HXLINE( 303)			_hx_tmp = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94)));
            		}
            		else {
HXLINE( 303)			_hx_tmp = false;
            		}
HXDLIN( 303)		if (_hx_tmp) {
HXLINE( 305)			fontName = (fontNamePrefix + HX_(" Bold Italic",0b,b0,c3,94));
HXLINE( 306)			bold = false;
HXLINE( 307)			italic = false;
            		}
            		else {
HXLINE( 309)			bool _hx_tmp2;
HXDLIN( 309)			if (bold) {
HXLINE( 309)				_hx_tmp2 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Bold",c5,3d,c7,98)));
            			}
            			else {
HXLINE( 309)				_hx_tmp2 = false;
            			}
HXDLIN( 309)			if (_hx_tmp2) {
HXLINE( 311)				fontName = (fontNamePrefix + HX_(" Bold",c5,3d,c7,98));
HXLINE( 312)				bold = false;
            			}
            			else {
HXLINE( 314)				bool _hx_tmp3;
HXDLIN( 314)				if (italic) {
HXLINE( 314)					_hx_tmp3 = ::openfl::text::Font_obj::_hx___fontByName->exists((fontNamePrefix + HX_(" Italic",30,7b,a7,6d)));
            				}
            				else {
HXLINE( 314)					_hx_tmp3 = false;
            				}
HXDLIN( 314)				if (_hx_tmp3) {
HXLINE( 316)					fontName = (fontNamePrefix + HX_(" Italic",30,7b,a7,6d));
HXLINE( 317)					italic = false;
            				}
            				else {
HXLINE( 323)					bool _hx_tmp4;
HXDLIN( 323)					if (bold) {
HXLINE( 323)						if ((fontName.indexOf(HX_(" Bold ",bb,ce,8e,15),null()) <= (int)-1)) {
HXLINE( 323)							_hx_tmp4 = ::StringTools_obj::endsWith(fontName,HX_(" Bold",c5,3d,c7,98));
            						}
            						else {
HXLINE( 323)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 323)						_hx_tmp4 = false;
            					}
HXDLIN( 323)					if (_hx_tmp4) {
HXLINE( 325)						bold = false;
            					}
HXLINE( 328)					bool _hx_tmp5;
HXDLIN( 328)					if (italic) {
HXLINE( 328)						if ((fontName.indexOf(HX_(" Italic ",f0,4e,e4,84),null()) <= (int)-1)) {
HXLINE( 328)							_hx_tmp5 = ::StringTools_obj::endsWith(fontName,HX_(" Italic",30,7b,a7,6d));
            						}
            						else {
HXLINE( 328)							_hx_tmp5 = true;
            						}
            					}
            					else {
HXLINE( 328)						_hx_tmp5 = false;
            					}
HXDLIN( 328)					if (_hx_tmp5) {
HXLINE( 330)						italic = false;
            					}
            				}
            			}
            		}
HXLINE( 334)		::String font;
HXDLIN( 334)		if (italic) {
HXLINE( 334)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 334)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 335)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 336)		::String font1;
HXDLIN( 336)		if (bold) {
HXLINE( 336)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 336)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 336)		font = (font + font1);
HXLINE( 337)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 338)		font = (font + ((HX_("/",2f,00,00,00) + ((format->leading + format->size) + (int)3)) + HX_("px ",18,65,55,00)));
HXLINE( 340)		::String font2;
HXDLIN( 340)		::String _hx_switch_0 = fontName;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 340)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 340)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 340)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 340)			goto _hx_goto_133;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 340)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 340)			goto _hx_goto_133;
            		}
            		/* default */{
HXLINE( 340)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(fontName,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_133:;
HXDLIN( 340)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 348)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_352_getFontInstance)
HXLINE( 356)		 ::openfl::text::Font instance = null();
HXLINE( 357)		::Array< ::String > fontList = null();
HXLINE( 359)		bool _hx_tmp;
HXDLIN( 359)		if (hx::IsNotNull( format )) {
HXLINE( 359)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 359)			_hx_tmp = false;
            		}
HXDLIN( 359)		if (_hx_tmp) {
HXLINE( 361)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 363)				return ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font).StaticCast<  ::openfl::text::Font >();
            			}
HXLINE( 366)			instance = ::openfl::_internal::text::TextEngine_obj::findFontVariant(format);
HXLINE( 367)			if (hx::IsNotNull( instance )) {
HXLINE( 367)				return instance;
            			}
HXLINE( 369)			::String systemFontDirectory = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 371)			{
HXLINE( 371)				::String _g = format->font;
HXDLIN( 371)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 398)					fontList = ::Array_obj< ::String >::__new(8)->init(0,(systemFontDirectory + HX_("/Arial.ttf",0c,14,61,7a)))->init(1,(systemFontDirectory + HX_("/Helvetica.ttf",5a,6c,ff,0c)))->init(2,(systemFontDirectory + HX_("/Cache/Arial.ttf",5f,69,b5,54)))->init(3,(systemFontDirectory + HX_("/Cache/Helvetica.ttf",2d,67,e4,7a)))->init(4,(systemFontDirectory + HX_("/Core/Arial.ttf",ba,c6,65,25)))->init(5,(systemFontDirectory + HX_("/Core/Helvetica.ttf",08,0e,fe,0c)))->init(6,(systemFontDirectory + HX_("/CoreAddition/Arial.ttf",d6,48,2f,75)))->init(7,(systemFontDirectory + HX_("/CoreAddition/Helvetica.ttf",24,ce,e8,ab)));
HXDLIN( 398)					goto _hx_goto_135;
            				}
            				if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 416)					goto _hx_goto_135;
            				}
            				if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 445)					fontList = ::Array_obj< ::String >::__new(8)->init(0,(systemFontDirectory + HX_("/Courier New.ttf",d6,e1,80,a0)))->init(1,(systemFontDirectory + HX_("/Courier.ttf",b6,7e,38,40)))->init(2,(systemFontDirectory + HX_("/Cache/Courier New.ttf",69,77,b8,0d)))->init(3,(systemFontDirectory + HX_("/Cache/Courier.ttf",c9,0e,4b,98)))->init(4,(systemFontDirectory + HX_("/Core/Courier New.ttf",04,cb,ad,96)))->init(5,(systemFontDirectory + HX_("/Core/Courier.ttf",e4,b8,d1,3b)))->init(6,(systemFontDirectory + HX_("/CoreAddition/Courier New.ttf",20,ca,dd,d5)))->init(7,(systemFontDirectory + HX_("/CoreAddition/Courier.ttf",00,fa,94,32)));
HXDLIN( 445)					goto _hx_goto_135;
            				}
            				/* default */{
HXLINE( 464)					fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            				}
            				_hx_goto_135:;
            			}
HXLINE( 467)			if (hx::IsNotNull( fontList )) {
HXLINE( 469)				int _g1 = (int)0;
HXDLIN( 469)				while((_g1 < fontList->length)){
HXLINE( 469)					::String font = fontList->__get(_g1);
HXDLIN( 469)					_g1 = (_g1 + (int)1);
HXLINE( 471)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 473)					if (hx::IsNotNull( instance )) {
HXLINE( 475)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 476)						return instance;
            					}
            				}
            			}
HXLINE( 481)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 482)			if (hx::IsNotNull( instance )) {
HXLINE( 482)				return instance;
            			}
            		}
HXLINE( 485)		::String systemFontDirectory1 = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 511)		fontList = ::Array_obj< ::String >::__new(12)->init(0,(systemFontDirectory1 + HX_("/Georgia.ttf",67,ae,93,4b)))->init(1,(systemFontDirectory1 + HX_("/Times.ttf",0f,38,17,67)))->init(2,(systemFontDirectory1 + HX_("/Times New Roman.ttf",2c,b8,6d,0c)))->init(3,(systemFontDirectory1 + HX_("/Cache/Georgia.ttf",7a,3e,a6,a3)))->init(4,(systemFontDirectory1 + HX_("/Cache/Times.ttf",62,8d,6b,41)))->init(5,(systemFontDirectory1 + HX_("/Cache/Times New Roman.ttf",3f,13,7b,39)))->init(6,(systemFontDirectory1 + HX_("/Core/Georgia.ttf",95,e8,2c,47)))->init(7,(systemFontDirectory1 + HX_("/Core/Times.ttf",bd,ea,1b,12)))->init(8,(systemFontDirectory1 + HX_("/Core/Times New Roman.ttf",5a,d0,31,62)))->init(9,(systemFontDirectory1 + HX_("/CoreAddition/Georgia.ttf",b1,29,f0,3d)))->init(10,(systemFontDirectory1 + HX_("/CoreAddition/Times.ttf",d9,6c,e5,61)))->init(11,(systemFontDirectory1 + HX_("/CoreAddition/Times New Roman.ttf",76,8d,05,b2)));
HXLINE( 529)		{
HXLINE( 529)			int _g2 = (int)0;
HXDLIN( 529)			while((_g2 < fontList->length)){
HXLINE( 529)				::String font1 = fontList->__get(_g2);
HXDLIN( 529)				_g2 = (_g2 + (int)1);
HXLINE( 531)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 533)				if (hx::IsNotNull( instance )) {
HXLINE( 535)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 536)					return instance;
            				}
            			}
            		}
HXLINE( 540)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 543)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textBounds,"textBounds");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textBounds,"textBounds");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___restrictRegexp,"__restrictRegexp");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( inCallProp == hx::paccAlways ? get_scrollV() : scrollV ); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap ); }
		if (HX_FIELD_EQ(inName,"trimText") ) { return hx::Val( trimText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth ); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField ); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts ); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks ); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH ); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( inCallProp == hx::paccAlways ? get_maxScrollV() : maxScrollV ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable ); }
		if (HX_FIELD_EQ(inName,"textBounds") ) { return hx::Val( textBounds ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight ); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType ); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents ); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights ); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown ); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont ); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups ); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents ); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings ); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor ); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat ); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout ); }
		if (HX_FIELD_EQ(inName,"restrictText") ) { return hx::Val( restrictText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( inCallProp == hx::paccAlways ? get_bottomScrollV() : bottomScrollV ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth ); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges ); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight ); }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { return hx::Val( _hx___restrictRegexp ); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart ); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances ); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createRestrictRegexp") ) { return hx::Val( createRestrictRegexp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = ( _hx___defaultFonts ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"findFontVariant") ) { outValue = findFontVariant_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue.Cast< ::String >()) );text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue.Cast< int >()) );scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue.Cast< ::String >()) );restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textBounds") ) { textBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::openfl::_internal::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__restrictRegexp") ) { _hx___restrictRegexp=inValue.Cast<  ::EReg >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"));
	outFields->push(HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"));
	outFields->push(HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"));
	outFields->push(HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"));
	outFields->push(HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"));
	outFields->push(HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"));
	outFields->push(HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"));
	outFields->push(HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"));
	outFields->push(HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"));
	outFields->push(HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"));
	outFields->push(HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"));
	outFields->push(HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	outFields->push(HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"));
	outFields->push(HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,autoSize),HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,gridFitType),HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineAscents),HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineDescents),HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineHeights),HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineWidths),HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b")},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,textBounds),HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(TextEngine_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02")},
	{hx::fsObject /*::EReg*/ ,(int)offsetof(TextEngine_obj,_hx___restrictRegexp),HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{hx::fsObject /*::openfl::_internal::text::TextLayout*/ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(TextEngine_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"),
	HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"),
	HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"),
	HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"),
	HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"),
	HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"),
	HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"),
	HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"),
	HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"),
	HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"),
	HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"),
	HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"),
	HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"),
	HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textBounds","\x02","\x07","\x0e","\x9d"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"),
	HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"),
	HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"),
	HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"),
	HX_HCSTRING("__restrictRegexp","\x45","\x9f","\xae","\xa9"),
	HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"),
	HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("createRestrictRegexp","\x41","\xd0","\x6b","\xe1"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getLine","\xaa","\xc7","\x35","\x1a"),
	HX_HCSTRING("getLineBreakIndex","\x1d","\x16","\x36","\x36"),
	HX_HCSTRING("getLineMeasurements","\xc1","\x9f","\x81","\x56"),
	HX_HCSTRING("getLayoutGroups","\x54","\xf8","\x56","\x5a"),
	HX_HCSTRING("restrictText","\x09","\x12","\x3e","\x34"),
	HX_HCSTRING("setTextAlignment","\x74","\x0f","\x33","\x62"),
	HX_HCSTRING("trimText","\xaf","\xae","\x63","\x65"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d"),
	HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf"),
	HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7"),
	HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf"),
	HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	HX_HCSTRING("findFontVariant","\xbd","\x22","\xbb","\xb2"),
	HX_HCSTRING("getFormatHeight","\x34","\x24","\x4b","\x62"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getFontInstance","\x3a","\x76","\x96","\x9e"),
	::String(null())
};

void TextEngine_obj::__register()
{
	hx::Object *dummy = new TextEngine_obj;
	TextEngine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextEngine","\x60","\x7a","\x88","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_33_boot)
HXDLIN(  33)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("__cairoFont",57,e7,b5,28), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:Dynamic",ce,ea,47,3c)))))))
            			->setFixed(1,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))))));
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_35_boot)
HXDLIN(  35)		UTF8_TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_36_boot)
HXDLIN(  36)		UTF8_ENDLINE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_37_boot)
HXDLIN(  37)		UTF8_SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_38_boot)
HXDLIN(  38)		UTF8_HYPHEN = (int)45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_39_boot)
HXDLIN(  39)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
