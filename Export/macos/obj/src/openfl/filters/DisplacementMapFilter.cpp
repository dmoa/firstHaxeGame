// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_lime__internal_graphics_ImageDataUtil
#include <lime/_internal/graphics/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
#ifndef INCLUDED_openfl_filters_DisplacementMapFilter
#include <openfl/filters/DisplacementMapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters__DisplacementMapFilter_DisplacementMapShader
#include <openfl/filters/_DisplacementMapFilter/DisplacementMapShader.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_194_new,"openfl.filters.DisplacementMapFilter","new",0x989f0e1e,"openfl.filters.DisplacementMapFilter.new","openfl/filters/DisplacementMapFilter.hx",194,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_216_clone,"openfl.filters.DisplacementMapFilter","clone",0xf847bc9b,"openfl.filters.DisplacementMapFilter.clone","openfl/filters/DisplacementMapFilter.hx",216,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_220___applyFilter,"openfl.filters.DisplacementMapFilter","__applyFilter",0xb25537e4,"openfl.filters.DisplacementMapFilter.__applyFilter","openfl/filters/DisplacementMapFilter.hx",220,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_242___initShader,"openfl.filters.DisplacementMapFilter","__initShader",0x5623aff7,"openfl.filters.DisplacementMapFilter.__initShader","openfl/filters/DisplacementMapFilter.hx",242,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_260___updateMapMatrix,"openfl.filters.DisplacementMapFilter","__updateMapMatrix",0x5ee921d2,"openfl.filters.DisplacementMapFilter.__updateMapMatrix","openfl/filters/DisplacementMapFilter.hx",260,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_290_get_alpha,"openfl.filters.DisplacementMapFilter","get_alpha",0x420523f3,"openfl.filters.DisplacementMapFilter.get_alpha","openfl/filters/DisplacementMapFilter.hx",290,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_294_set_alpha,"openfl.filters.DisplacementMapFilter","set_alpha",0x25560fff,"openfl.filters.DisplacementMapFilter.set_alpha","openfl/filters/DisplacementMapFilter.hx",294,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_301_get_componentX,"openfl.filters.DisplacementMapFilter","get_componentX",0xbedb7c46,"openfl.filters.DisplacementMapFilter.get_componentX","openfl/filters/DisplacementMapFilter.hx",301,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_305_set_componentX,"openfl.filters.DisplacementMapFilter","set_componentX",0xdefb64ba,"openfl.filters.DisplacementMapFilter.set_componentX","openfl/filters/DisplacementMapFilter.hx",305,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_312_get_componentY,"openfl.filters.DisplacementMapFilter","get_componentY",0xbedb7c47,"openfl.filters.DisplacementMapFilter.get_componentY","openfl/filters/DisplacementMapFilter.hx",312,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_316_set_componentY,"openfl.filters.DisplacementMapFilter","set_componentY",0xdefb64bb,"openfl.filters.DisplacementMapFilter.set_componentY","openfl/filters/DisplacementMapFilter.hx",316,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_323_get_color,"openfl.filters.DisplacementMapFilter","get_color",0x6acaedf8,"openfl.filters.DisplacementMapFilter.get_color","openfl/filters/DisplacementMapFilter.hx",323,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_327_set_color,"openfl.filters.DisplacementMapFilter","set_color",0x4e1bda04,"openfl.filters.DisplacementMapFilter.set_color","openfl/filters/DisplacementMapFilter.hx",327,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_334_get_scaleX,"openfl.filters.DisplacementMapFilter","get_scaleX",0x7c647059,"openfl.filters.DisplacementMapFilter.get_scaleX","openfl/filters/DisplacementMapFilter.hx",334,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_338_set_scaleX,"openfl.filters.DisplacementMapFilter","set_scaleX",0x7fe20ecd,"openfl.filters.DisplacementMapFilter.set_scaleX","openfl/filters/DisplacementMapFilter.hx",338,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_345_get_scaleY,"openfl.filters.DisplacementMapFilter","get_scaleY",0x7c64705a,"openfl.filters.DisplacementMapFilter.get_scaleY","openfl/filters/DisplacementMapFilter.hx",345,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_349_set_scaleY,"openfl.filters.DisplacementMapFilter","set_scaleY",0x7fe20ece,"openfl.filters.DisplacementMapFilter.set_scaleY","openfl/filters/DisplacementMapFilter.hx",349,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_356_get_mapBitmap,"openfl.filters.DisplacementMapFilter","get_mapBitmap",0x3dfc56c0,"openfl.filters.DisplacementMapFilter.get_mapBitmap","openfl/filters/DisplacementMapFilter.hx",356,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_360_set_mapBitmap,"openfl.filters.DisplacementMapFilter","set_mapBitmap",0x830238cc,"openfl.filters.DisplacementMapFilter.set_mapBitmap","openfl/filters/DisplacementMapFilter.hx",360,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_367_get_mapPoint,"openfl.filters.DisplacementMapFilter","get_mapPoint",0xef15f29f,"openfl.filters.DisplacementMapFilter.get_mapPoint","openfl/filters/DisplacementMapFilter.hx",367,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_371_set_mapPoint,"openfl.filters.DisplacementMapFilter","set_mapPoint",0x040f1613,"openfl.filters.DisplacementMapFilter.set_mapPoint","openfl/filters/DisplacementMapFilter.hx",371,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_378_get_mode,"openfl.filters.DisplacementMapFilter","get_mode",0xfcc1c06e,"openfl.filters.DisplacementMapFilter.get_mode","openfl/filters/DisplacementMapFilter.hx",378,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_382_set_mode,"openfl.filters.DisplacementMapFilter","set_mode",0xab1f19e2,"openfl.filters.DisplacementMapFilter.set_mode","openfl/filters/DisplacementMapFilter.hx",382,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_65_boot,"openfl.filters.DisplacementMapFilter","boot",0xeaa64cb4,"openfl.filters.DisplacementMapFilter.boot","openfl/filters/DisplacementMapFilter.hx",65,0x81237e14)
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_66_boot,"openfl.filters.DisplacementMapFilter","boot",0xeaa64cb4,"openfl.filters.DisplacementMapFilter.boot","openfl/filters/DisplacementMapFilter.hx",66,0x81237e14)
static const Float _hx_array_data_f582672c_26[] = {
	0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f9a37c6d22fed5f2_67_boot,"openfl.filters.DisplacementMapFilter","boot",0xeaa64cb4,"openfl.filters.DisplacementMapFilter.boot","openfl/filters/DisplacementMapFilter.hx",67,0x81237e14)
static const Float _hx_array_data_f582672c_28[] = {
	0.5,0.5,0.0,0.0,
};
namespace openfl{
namespace filters{

void DisplacementMapFilter_obj::__construct( ::openfl::display::BitmapData mapBitmap, ::openfl::geom::Point mapPoint,hx::Null< int >  __o_componentX,hx::Null< int >  __o_componentY,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,::String __o_mode,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha){
int componentX = __o_componentX.Default(0);
int componentY = __o_componentY.Default(0);
Float scaleX = __o_scaleX.Default(((Float)0.0));
Float scaleY = __o_scaleY.Default(((Float)0.0));
::String mode = __o_mode.Default(HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e"));
int color = __o_color.Default(0);
Float alpha = __o_alpha.Default(((Float)0.0));
            	HX_GC_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_194_new)
HXLINE( 195)		super::__construct();
HXLINE( 197)		this->_hx___mapBitmap = mapBitmap;
HXLINE( 198)		 ::openfl::geom::Point _hx_tmp;
HXDLIN( 198)		if (hx::IsNotNull( mapPoint )) {
HXLINE( 198)			_hx_tmp = mapPoint;
            		}
            		else {
HXLINE( 198)			_hx_tmp =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            		}
HXDLIN( 198)		this->_hx___mapPoint = _hx_tmp;
HXLINE( 199)		this->_hx___componentX = componentX;
HXLINE( 200)		this->_hx___componentY = componentY;
HXLINE( 201)		this->_hx___scaleX = scaleX;
HXLINE( 202)		this->_hx___scaleY = scaleY;
HXLINE( 203)		this->_hx___mode = mode;
HXLINE( 204)		this->_hx___color = color;
HXLINE( 205)		this->_hx___alpha = alpha;
HXLINE( 207)		this->_hx___needSecondBitmapData = true;
HXLINE( 208)		this->_hx___preserveObject = false;
HXLINE( 209)		this->_hx___renderDirty = true;
HXLINE( 211)		this->_hx___numShaderPasses = (int)1;
            	}

Dynamic DisplacementMapFilter_obj::__CreateEmpty() { return new DisplacementMapFilter_obj; }

void *DisplacementMapFilter_obj::_hx_vtable = 0;

Dynamic DisplacementMapFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplacementMapFilter_obj > _hx_result = new DisplacementMapFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool DisplacementMapFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4c04d6b2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4c04d6b2;
	} else {
		return inClassId==(int)0x4f68d692;
	}
}

 ::openfl::filters::BitmapFilter DisplacementMapFilter_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_216_clone)
HXDLIN( 216)		 ::openfl::display::BitmapData _hx_tmp = this->_hx___mapBitmap;
HXDLIN( 216)		 ::openfl::geom::Point _hx_tmp1 = this->_hx___mapPoint->clone();
HXDLIN( 216)		return  ::openfl::filters::DisplacementMapFilter_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->_hx___componentX,this->_hx___componentY,this->_hx___scaleX,this->_hx___scaleY,this->_hx___mode,this->_hx___color,this->_hx___alpha);
            	}


 ::openfl::display::BitmapData DisplacementMapFilter_obj::_hx___applyFilter( ::openfl::display::BitmapData bitmapData, ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint){
            	HX_GC_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_220___applyFilter)
HXLINE( 222)		this->_hx___updateMapMatrix();
HXLINE( 230)		 ::lime::graphics::Image bitmapData1 = bitmapData->image;
HXDLIN( 230)		 ::lime::graphics::Image sourceBitmapData1 = sourceBitmapData->image;
HXDLIN( 230)		 ::lime::graphics::Image _hx_tmp = this->_hx___mapBitmap->image;
HXLINE( 232)		Float _hx_tmp1 = ((Float)this->_hx___mapPoint->x / (Float)this->_hx___mapBitmap->width);
HXDLIN( 232)		 ::lime::math::Vector2 _hx_tmp2 =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,_hx_tmp1,((Float)this->_hx___mapPoint->y / (Float)this->_hx___mapBitmap->height));
HXLINE( 234)		Float _hx_tmp3 = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData->__get((int)0);
HXDLIN( 234)		Float _hx_tmp4 = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData->__get((int)4);
HXDLIN( 234)		Float _hx_tmp5 = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData->__get((int)8);
HXDLIN( 234)		 ::lime::math::Vector4 _hx_tmp6 =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp4,_hx_tmp5,::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData->__get((int)12));
HXLINE( 235)		Float _hx_tmp7 = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData->__get((int)1);
HXDLIN( 235)		Float _hx_tmp8 = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData->__get((int)5);
HXDLIN( 235)		Float _hx_tmp9 = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData->__get((int)9);
HXLINE( 230)		::lime::_internal::graphics::ImageDataUtil_obj::displaceMap(bitmapData1,sourceBitmapData1,_hx_tmp,_hx_tmp2,_hx_tmp6, ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp7,_hx_tmp8,_hx_tmp9,::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData->__get((int)13)),this->_hx___smooth);
HXLINE( 238)		return bitmapData;
            	}


 ::openfl::display::Shader DisplacementMapFilter_obj::_hx___initShader( ::openfl::display::DisplayObjectRenderer renderer,int pass){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_242___initShader)
HXLINE( 246)		this->_hx___updateMapMatrix();
HXLINE( 248)		::openfl::filters::DisplacementMapFilter_obj::_hx___displacementMapShader->uOffsets->value = ::openfl::filters::DisplacementMapFilter_obj::_hx___offset;
HXLINE( 249)		::openfl::filters::DisplacementMapFilter_obj::_hx___displacementMapShader->uDisplacements->value = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData;
HXLINE( 251)		Float _hx_tmp = ((Float)this->get_mapPoint()->x / (Float)this->_hx___mapBitmap->width);
HXDLIN( 251)		Float _hx_tmp1 = ((Float)this->get_mapPoint()->y / (Float)this->_hx___mapBitmap->height);
HXDLIN( 251)		::openfl::filters::DisplacementMapFilter_obj::_hx___displacementMapShader->mapTextureCoordsOffset->value = ::Array_obj< Float >::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1);
HXLINE( 253)		::openfl::filters::DisplacementMapFilter_obj::_hx___displacementMapShader->mapTexture->input = this->_hx___mapBitmap;
HXLINE( 256)		return ::openfl::filters::DisplacementMapFilter_obj::_hx___displacementMapShader;
            	}


void DisplacementMapFilter_obj::_hx___updateMapMatrix(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_260___updateMapMatrix)
HXLINE( 261)		int columnX;
HXDLIN( 261)		int columnY;
HXLINE( 262)		Float scale = ((Float)1.0);
HXLINE( 263)		Float textureWidth = this->_hx___mapBitmap->width;
HXLINE( 264)		Float textureHeight = this->_hx___mapBitmap->height;
HXLINE( 266)		{
HXLINE( 266)			int _g = (int)0;
HXDLIN( 266)			while((_g < (int)16)){
HXLINE( 266)				_g = (_g + (int)1);
HXDLIN( 266)				int i = (_g - (int)1);
HXLINE( 268)				::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData[i] = (int)0;
            			}
            		}
HXLINE( 271)		if ((this->_hx___componentX == (int)1)) {
HXLINE( 271)			columnX = (int)0;
            		}
            		else {
HXLINE( 272)			if ((this->_hx___componentX == (int)2)) {
HXLINE( 272)				columnX = (int)1;
            			}
            			else {
HXLINE( 273)				if ((this->_hx___componentX == (int)4)) {
HXLINE( 273)					columnX = (int)2;
            				}
            				else {
HXLINE( 275)					columnX = (int)3;
            				}
            			}
            		}
HXLINE( 277)		if ((this->_hx___componentY == (int)1)) {
HXLINE( 277)			columnY = (int)0;
            		}
            		else {
HXLINE( 278)			if ((this->_hx___componentY == (int)2)) {
HXLINE( 278)				columnY = (int)1;
            			}
            			else {
HXLINE( 279)				if ((this->_hx___componentY == (int)4)) {
HXLINE( 279)					columnY = (int)2;
            				}
            				else {
HXLINE( 281)					columnY = (int)3;
            				}
            			}
            		}
HXLINE( 283)		::Array< Float > _hx_tmp = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData;
HXDLIN( 283)		_hx_tmp[(columnX * (int)4)] = ((Float)(this->_hx___scaleX * scale) / (Float)textureWidth);
HXLINE( 284)		::Array< Float > _hx_tmp1 = ::openfl::filters::DisplacementMapFilter_obj::_hx___matrixData;
HXDLIN( 284)		_hx_tmp1[((columnY * (int)4) + (int)1)] = ((Float)(this->_hx___scaleY * scale) / (Float)textureHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,_hx___updateMapMatrix,(void))

Float DisplacementMapFilter_obj::get_alpha(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_290_get_alpha)
HXDLIN( 290)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_alpha,return )

Float DisplacementMapFilter_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_294_set_alpha)
HXLINE( 295)		if ((value != this->_hx___alpha)) {
HXLINE( 295)			this->_hx___renderDirty = true;
            		}
HXLINE( 296)		return (this->_hx___alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_alpha,return )

int DisplacementMapFilter_obj::get_componentX(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_301_get_componentX)
HXDLIN( 301)		return this->_hx___componentX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_componentX,return )

int DisplacementMapFilter_obj::set_componentX(int value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_305_set_componentX)
HXLINE( 306)		if ((value != this->_hx___componentX)) {
HXLINE( 306)			this->_hx___renderDirty = true;
            		}
HXLINE( 307)		return (this->_hx___componentX = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_componentX,return )

int DisplacementMapFilter_obj::get_componentY(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_312_get_componentY)
HXDLIN( 312)		return this->_hx___componentY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_componentY,return )

int DisplacementMapFilter_obj::set_componentY(int value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_316_set_componentY)
HXLINE( 317)		if ((value != this->_hx___componentY)) {
HXLINE( 317)			this->_hx___renderDirty = true;
            		}
HXLINE( 318)		return (this->_hx___componentY = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_componentY,return )

int DisplacementMapFilter_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_323_get_color)
HXDLIN( 323)		return this->_hx___color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_color,return )

int DisplacementMapFilter_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_327_set_color)
HXLINE( 328)		if ((value != this->_hx___color)) {
HXLINE( 328)			this->_hx___renderDirty = true;
            		}
HXLINE( 329)		return (this->_hx___color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_color,return )

Float DisplacementMapFilter_obj::get_scaleX(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_334_get_scaleX)
HXDLIN( 334)		return this->_hx___scaleX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_scaleX,return )

Float DisplacementMapFilter_obj::set_scaleX(Float value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_338_set_scaleX)
HXLINE( 339)		if ((value != this->_hx___scaleX)) {
HXLINE( 339)			this->_hx___renderDirty = true;
            		}
HXLINE( 340)		return (this->_hx___scaleX = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_scaleX,return )

Float DisplacementMapFilter_obj::get_scaleY(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_345_get_scaleY)
HXDLIN( 345)		return this->_hx___scaleY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_scaleY,return )

Float DisplacementMapFilter_obj::set_scaleY(Float value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_349_set_scaleY)
HXLINE( 350)		if ((value != this->_hx___scaleY)) {
HXLINE( 350)			this->_hx___renderDirty = true;
            		}
HXLINE( 351)		return (this->_hx___scaleY = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_scaleY,return )

 ::openfl::display::BitmapData DisplacementMapFilter_obj::get_mapBitmap(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_356_get_mapBitmap)
HXDLIN( 356)		return this->_hx___mapBitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_mapBitmap,return )

 ::openfl::display::BitmapData DisplacementMapFilter_obj::set_mapBitmap( ::openfl::display::BitmapData value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_360_set_mapBitmap)
HXLINE( 361)		if (hx::IsNotEq( value,this->_hx___mapBitmap )) {
HXLINE( 361)			this->_hx___renderDirty = true;
            		}
HXLINE( 362)		return (this->_hx___mapBitmap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_mapBitmap,return )

 ::openfl::geom::Point DisplacementMapFilter_obj::get_mapPoint(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_367_get_mapPoint)
HXDLIN( 367)		return this->_hx___mapPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_mapPoint,return )

 ::openfl::geom::Point DisplacementMapFilter_obj::set_mapPoint( ::openfl::geom::Point value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_371_set_mapPoint)
HXLINE( 372)		if (hx::IsNotEq( value,this->_hx___mapPoint )) {
HXLINE( 372)			this->_hx___renderDirty = true;
            		}
HXLINE( 373)		return (this->_hx___mapPoint = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_mapPoint,return )

::String DisplacementMapFilter_obj::get_mode(){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_378_get_mode)
HXDLIN( 378)		return this->_hx___mode;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplacementMapFilter_obj,get_mode,return )

::String DisplacementMapFilter_obj::set_mode(::String value){
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_382_set_mode)
HXLINE( 383)		if ((value != this->_hx___mode)) {
HXLINE( 383)			this->_hx___renderDirty = true;
            		}
HXLINE( 384)		return (this->_hx___mode = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplacementMapFilter_obj,set_mode,return )

 ::openfl::filters::_DisplacementMapFilter::DisplacementMapShader DisplacementMapFilter_obj::_hx___displacementMapShader;

::Array< Float > DisplacementMapFilter_obj::_hx___matrixData;

::Array< Float > DisplacementMapFilter_obj::_hx___offset;


hx::ObjectPtr< DisplacementMapFilter_obj > DisplacementMapFilter_obj::__new( ::openfl::display::BitmapData mapBitmap, ::openfl::geom::Point mapPoint,hx::Null< int >  __o_componentX,hx::Null< int >  __o_componentY,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,::String __o_mode,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha) {
	hx::ObjectPtr< DisplacementMapFilter_obj > __this = new DisplacementMapFilter_obj();
	__this->__construct(mapBitmap,mapPoint,__o_componentX,__o_componentY,__o_scaleX,__o_scaleY,__o_mode,__o_color,__o_alpha);
	return __this;
}

hx::ObjectPtr< DisplacementMapFilter_obj > DisplacementMapFilter_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::BitmapData mapBitmap, ::openfl::geom::Point mapPoint,hx::Null< int >  __o_componentX,hx::Null< int >  __o_componentY,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,::String __o_mode,hx::Null< int >  __o_color,hx::Null< Float >  __o_alpha) {
	DisplacementMapFilter_obj *__this = (DisplacementMapFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DisplacementMapFilter_obj), true, "openfl.filters.DisplacementMapFilter"));
	*(void **)__this = DisplacementMapFilter_obj::_hx_vtable;
	__this->__construct(mapBitmap,mapPoint,__o_componentX,__o_componentY,__o_scaleX,__o_scaleY,__o_mode,__o_color,__o_alpha);
	return __this;
}

DisplacementMapFilter_obj::DisplacementMapFilter_obj()
{
}

void DisplacementMapFilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplacementMapFilter);
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___color,"__color");
	HX_MARK_MEMBER_NAME(_hx___componentX,"__componentX");
	HX_MARK_MEMBER_NAME(_hx___componentY,"__componentY");
	HX_MARK_MEMBER_NAME(_hx___mapBitmap,"__mapBitmap");
	HX_MARK_MEMBER_NAME(_hx___mapPoint,"__mapPoint");
	HX_MARK_MEMBER_NAME(_hx___mode,"__mode");
	HX_MARK_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_MARK_MEMBER_NAME(_hx___scaleY,"__scaleY");
	 ::openfl::filters::BitmapFilter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplacementMapFilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___color,"__color");
	HX_VISIT_MEMBER_NAME(_hx___componentX,"__componentX");
	HX_VISIT_MEMBER_NAME(_hx___componentY,"__componentY");
	HX_VISIT_MEMBER_NAME(_hx___mapBitmap,"__mapBitmap");
	HX_VISIT_MEMBER_NAME(_hx___mapPoint,"__mapPoint");
	HX_VISIT_MEMBER_NAME(_hx___mode,"__mode");
	HX_VISIT_MEMBER_NAME(_hx___scaleX,"__scaleX");
	HX_VISIT_MEMBER_NAME(_hx___scaleY,"__scaleY");
	 ::openfl::filters::BitmapFilter_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplacementMapFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mode() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_alpha() ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_color() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleX() ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_scaleY() ); }
		if (HX_FIELD_EQ(inName,"__mode") ) { return hx::Val( _hx___mode ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha ); }
		if (HX_FIELD_EQ(inName,"__color") ) { return hx::Val( _hx___color ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mapPoint") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mapPoint() ); }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { return hx::Val( _hx___scaleX ); }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { return hx::Val( _hx___scaleY ); }
		if (HX_FIELD_EQ(inName,"get_mode") ) { return hx::Val( get_mode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mode") ) { return hx::Val( set_mode_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_mapBitmap() ); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"componentX") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_componentX() ); }
		if (HX_FIELD_EQ(inName,"componentY") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_componentY() ); }
		if (HX_FIELD_EQ(inName,"__mapPoint") ) { return hx::Val( _hx___mapPoint ); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__mapBitmap") ) { return hx::Val( _hx___mapBitmap ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__componentX") ) { return hx::Val( _hx___componentX ); }
		if (HX_FIELD_EQ(inName,"__componentY") ) { return hx::Val( _hx___componentY ); }
		if (HX_FIELD_EQ(inName,"__initShader") ) { return hx::Val( _hx___initShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mapPoint") ) { return hx::Val( get_mapPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mapPoint") ) { return hx::Val( set_mapPoint_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__applyFilter") ) { return hx::Val( _hx___applyFilter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mapBitmap") ) { return hx::Val( get_mapBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mapBitmap") ) { return hx::Val( set_mapBitmap_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_componentX") ) { return hx::Val( get_componentX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_componentX") ) { return hx::Val( set_componentX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_componentY") ) { return hx::Val( get_componentY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_componentY") ) { return hx::Val( set_componentY_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__updateMapMatrix") ) { return hx::Val( _hx___updateMapMatrix_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DisplacementMapFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__offset") ) { outValue = ( _hx___offset ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__matrixData") ) { outValue = ( _hx___matrixData ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__displacementMapShader") ) { outValue = ( _hx___displacementMapShader ); return true; }
	}
	return false;
}

hx::Val DisplacementMapFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mode(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__mode") ) { _hx___mode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__color") ) { _hx___color=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mapPoint") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mapPoint(inValue.Cast<  ::openfl::geom::Point >()) ); }
		if (HX_FIELD_EQ(inName,"__scaleX") ) { _hx___scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scaleY") ) { _hx___scaleY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mapBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mapBitmap(inValue.Cast<  ::openfl::display::BitmapData >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"componentX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_componentX(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"componentY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_componentY(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__mapPoint") ) { _hx___mapPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__mapBitmap") ) { _hx___mapBitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__componentX") ) { _hx___componentX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__componentY") ) { _hx___componentY=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DisplacementMapFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__offset") ) { _hx___offset=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__matrixData") ) { _hx___matrixData=ioValue.Cast< ::Array< Float > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__displacementMapShader") ) { _hx___displacementMapShader=ioValue.Cast<  ::openfl::filters::_DisplacementMapFilter::DisplacementMapShader >(); return true; }
	}
	return false;
}

void DisplacementMapFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("componentX","\xfb","\xb4","\x1e","\x5a"));
	outFields->push(HX_HCSTRING("componentY","\xfc","\xb4","\x1e","\x5a"));
	outFields->push(HX_HCSTRING("mapBitmap","\xab","\x6b","\xeb","\xd3"));
	outFields->push(HX_HCSTRING("mapPoint","\x14","\x24","\xd2","\x3d"));
	outFields->push(HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"));
	outFields->push(HX_HCSTRING("__componentX","\x1b","\x30","\xb2","\x92"));
	outFields->push(HX_HCSTRING("__componentY","\x1c","\x30","\xb2","\x92"));
	outFields->push(HX_HCSTRING("__mapBitmap","\x8b","\xb4","\x17","\x02"));
	outFields->push(HX_HCSTRING("__mapPoint","\x34","\x97","\x0a","\xe1"));
	outFields->push(HX_HCSTRING("__mode","\x83","\x36","\x59","\xf7"));
	outFields->push(HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"));
	outFields->push(HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplacementMapFilter_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(DisplacementMapFilter_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsInt,(int)offsetof(DisplacementMapFilter_obj,_hx___color),HX_HCSTRING("__color","\x43","\xca","\xba","\xb4")},
	{hx::fsInt,(int)offsetof(DisplacementMapFilter_obj,_hx___componentX),HX_HCSTRING("__componentX","\x1b","\x30","\xb2","\x92")},
	{hx::fsInt,(int)offsetof(DisplacementMapFilter_obj,_hx___componentY),HX_HCSTRING("__componentY","\x1c","\x30","\xb2","\x92")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(DisplacementMapFilter_obj,_hx___mapBitmap),HX_HCSTRING("__mapBitmap","\x8b","\xb4","\x17","\x02")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(DisplacementMapFilter_obj,_hx___mapPoint),HX_HCSTRING("__mapPoint","\x34","\x97","\x0a","\xe1")},
	{hx::fsString,(int)offsetof(DisplacementMapFilter_obj,_hx___mode),HX_HCSTRING("__mode","\x83","\x36","\x59","\xf7")},
	{hx::fsFloat,(int)offsetof(DisplacementMapFilter_obj,_hx___scaleX),HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4")},
	{hx::fsFloat,(int)offsetof(DisplacementMapFilter_obj,_hx___scaleY),HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DisplacementMapFilter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::filters::_DisplacementMapFilter::DisplacementMapShader*/ ,(void *) &DisplacementMapFilter_obj::_hx___displacementMapShader,HX_HCSTRING("__displacementMapShader","\xea","\x2d","\x26","\x8d")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &DisplacementMapFilter_obj::_hx___matrixData,HX_HCSTRING("__matrixData","\x2b","\xe8","\xf6","\xb5")},
	{hx::fsObject /*Array< Float >*/ ,(void *) &DisplacementMapFilter_obj::_hx___offset,HX_HCSTRING("__offset","\xb3","\x02","\x6f","\x08")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplacementMapFilter_obj_sMemberFields[] = {
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__color","\x43","\xca","\xba","\xb4"),
	HX_HCSTRING("__componentX","\x1b","\x30","\xb2","\x92"),
	HX_HCSTRING("__componentY","\x1c","\x30","\xb2","\x92"),
	HX_HCSTRING("__mapBitmap","\x8b","\xb4","\x17","\x02"),
	HX_HCSTRING("__mapPoint","\x34","\x97","\x0a","\xe1"),
	HX_HCSTRING("__mode","\x83","\x36","\x59","\xf7"),
	HX_HCSTRING("__scaleX","\xae","\x55","\x55","\xe4"),
	HX_HCSTRING("__scaleY","\xaf","\x55","\x55","\xe4"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("__applyFilter","\xa6","\x20","\xa8","\x09"),
	HX_HCSTRING("__initShader","\x75","\x95","\xf9","\x59"),
	HX_HCSTRING("__updateMapMatrix","\x94","\x93","\x8c","\x71"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("get_componentX","\x44","\x3d","\x14","\xd0"),
	HX_HCSTRING("set_componentX","\xb8","\x25","\x34","\xf0"),
	HX_HCSTRING("get_componentY","\x45","\x3d","\x14","\xd0"),
	HX_HCSTRING("set_componentY","\xb9","\x25","\x34","\xf0"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_mapBitmap","\x82","\x3f","\x4f","\x95"),
	HX_HCSTRING("set_mapBitmap","\x8e","\x21","\x55","\xda"),
	HX_HCSTRING("get_mapPoint","\x1d","\xd8","\xeb","\xf2"),
	HX_HCSTRING("set_mapPoint","\x91","\xfb","\xe4","\x07"),
	HX_HCSTRING("get_mode","\xec","\x8e","\x1b","\xc8"),
	HX_HCSTRING("set_mode","\x60","\xe8","\x78","\x76"),
	::String(null()) };

static void DisplacementMapFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplacementMapFilter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplacementMapFilter_obj::_hx___displacementMapShader,"__displacementMapShader");
	HX_MARK_MEMBER_NAME(DisplacementMapFilter_obj::_hx___matrixData,"__matrixData");
	HX_MARK_MEMBER_NAME(DisplacementMapFilter_obj::_hx___offset,"__offset");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplacementMapFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplacementMapFilter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplacementMapFilter_obj::_hx___displacementMapShader,"__displacementMapShader");
	HX_VISIT_MEMBER_NAME(DisplacementMapFilter_obj::_hx___matrixData,"__matrixData");
	HX_VISIT_MEMBER_NAME(DisplacementMapFilter_obj::_hx___offset,"__offset");
};

#endif

hx::Class DisplacementMapFilter_obj::__mClass;

static ::String DisplacementMapFilter_obj_sStaticFields[] = {
	HX_HCSTRING("__displacementMapShader","\xea","\x2d","\x26","\x8d"),
	HX_HCSTRING("__matrixData","\x2b","\xe8","\xf6","\xb5"),
	HX_HCSTRING("__offset","\xb3","\x02","\x6f","\x08"),
	::String(null())
};

void DisplacementMapFilter_obj::__register()
{
	hx::Object *dummy = new DisplacementMapFilter_obj;
	DisplacementMapFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters.DisplacementMapFilter","\x2c","\x67","\x82","\xf5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplacementMapFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplacementMapFilter_obj::__SetStatic;
	__mClass->mMarkFunc = DisplacementMapFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplacementMapFilter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplacementMapFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplacementMapFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplacementMapFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplacementMapFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplacementMapFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplacementMapFilter_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_65_boot)
HXDLIN(  65)		_hx___displacementMapShader =  ::openfl::filters::_DisplacementMapFilter::DisplacementMapShader_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_66_boot)
HXDLIN(  66)		_hx___matrixData = ::Array_obj< Float >::fromData( _hx_array_data_f582672c_26,16);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f9a37c6d22fed5f2_67_boot)
HXDLIN(  67)		_hx___offset = ::Array_obj< Float >::fromData( _hx_array_data_f582672c_28,4);
            	}
}

} // end namespace openfl
} // end namespace filters
