// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_ImageDataUtil
#include <lime/_internal/graphics/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime__internal_graphics_StackBlur
#include <lime/_internal/graphics/StackBlur.h>
#endif
#ifndef INCLUDED_lime__internal_graphics__ImageDataUtil_ImageDataView
#include <lime/_internal/graphics/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math__RGBA_RGBA_Impl_
#include <lime/math/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_system_Endian
#include <lime/system/Endian.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_33_displaceMap,"lime._internal.graphics.ImageDataUtil","displaceMap",0x5f09aa44,"lime._internal.graphics.ImageDataUtil.displaceMap","lime/_internal/graphics/ImageDataUtil.hx",33,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_139_bilinear,"lime._internal.graphics.ImageDataUtil","bilinear",0x779ce56b,"lime._internal.graphics.ImageDataUtil.bilinear","lime/_internal/graphics/ImageDataUtil.hx",139,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_143_lerpRGBA,"lime._internal.graphics.ImageDataUtil","lerpRGBA",0x6898e12a,"lime._internal.graphics.ImageDataUtil.lerpRGBA","lime/_internal/graphics/ImageDataUtil.hx",143,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_155_lerp4f,"lime._internal.graphics.ImageDataUtil","lerp4f",0x5c714ca8,"lime._internal.graphics.ImageDataUtil.lerp4f","lime/_internal/graphics/ImageDataUtil.hx",155,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_160_lerp,"lime._internal.graphics.ImageDataUtil","lerp",0x85985576,"lime._internal.graphics.ImageDataUtil.lerp","lime/_internal/graphics/ImageDataUtil.hx",160,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_164_colorTransform,"lime._internal.graphics.ImageDataUtil","colorTransform",0x125b6f48,"lime._internal.graphics.ImageDataUtil.colorTransform","lime/_internal/graphics/ImageDataUtil.hx",164,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_206_copyChannel,"lime._internal.graphics.ImageDataUtil","copyChannel",0xecaa286f,"lime._internal.graphics.ImageDataUtil.copyChannel","lime/_internal/graphics/ImageDataUtil.hx",206,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_291_copyPixels,"lime._internal.graphics.ImageDataUtil","copyPixels",0xd2d56101,"lime._internal.graphics.ImageDataUtil.copyPixels","lime/_internal/graphics/ImageDataUtil.hx",291,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_502_fillRect,"lime._internal.graphics.ImageDataUtil","fillRect",0x041873c6,"lime._internal.graphics.ImageDataUtil.fillRect","lime/_internal/graphics/ImageDataUtil.hx",502,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_552_floodFill,"lime._internal.graphics.ImageDataUtil","floodFill",0x35740402,"lime._internal.graphics.ImageDataUtil.floodFill","lime/_internal/graphics/ImageDataUtil.hx",552,0x59dddace)
static const int _hx_array_data_0eb0fdcf_29[] = {
	(int)0,(int)-1,(int)1,(int)0,
};
static const int _hx_array_data_0eb0fdcf_30[] = {
	(int)-1,(int)0,(int)0,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_631_gaussianBlur,"lime._internal.graphics.ImageDataUtil","gaussianBlur",0xb8d3c441,"lime._internal.graphics.ImageDataUtil.gaussianBlur","lime/_internal/graphics/ImageDataUtil.hx",631,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_657_getColorBoundsRect,"lime._internal.graphics.ImageDataUtil","getColorBoundsRect",0x8aa490c5,"lime._internal.graphics.ImageDataUtil.getColorBoundsRect","lime/_internal/graphics/ImageDataUtil.hx",657,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_801_getPixel,"lime._internal.graphics.ImageDataUtil","getPixel",0xb9da048f,"lime._internal.graphics.ImageDataUtil.getPixel","lime/_internal/graphics/ImageDataUtil.hx",801,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_820_getPixel32,"lime._internal.graphics.ImageDataUtil","getPixel32",0x67cfb2ee,"lime._internal.graphics.ImageDataUtil.getPixel32","lime/_internal/graphics/ImageDataUtil.hx",820,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_838_getPixels,"lime._internal.graphics.ImageDataUtil","getPixels",0xe4e9f904,"lime._internal.graphics.ImageDataUtil.getPixels","lime/_internal/graphics/ImageDataUtil.hx",838,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_891_merge,"lime._internal.graphics.ImageDataUtil","merge",0xf318fed9,"lime._internal.graphics.ImageDataUtil.merge","lime/_internal/graphics/ImageDataUtil.hx",891,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_940_multiplyAlpha,"lime._internal.graphics.ImageDataUtil","multiplyAlpha",0xed49d7bb,"lime._internal.graphics.ImageDataUtil.multiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",940,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_966_resize,"lime._internal.graphics.ImageDataUtil","resize",0xc3399ab3,"lime._internal.graphics.ImageDataUtil.resize","lime/_internal/graphics/ImageDataUtil.hx",966,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1046_resizeBuffer,"lime._internal.graphics.ImageDataUtil","resizeBuffer",0x76145413,"lime._internal.graphics.ImageDataUtil.resizeBuffer","lime/_internal/graphics/ImageDataUtil.hx",1046,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1082_setFormat,"lime._internal.graphics.ImageDataUtil","setFormat",0x391f851a,"lime._internal.graphics.ImageDataUtil.setFormat","lime/_internal/graphics/ImageDataUtil.hx",1082,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1160_setPixel,"lime._internal.graphics.ImageDataUtil","setPixel",0x68375e03,"lime._internal.graphics.ImageDataUtil.setPixel","lime/_internal/graphics/ImageDataUtil.hx",1160,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1188_setPixel32,"lime._internal.graphics.ImageDataUtil","setPixel32",0x6b4d5162,"lime._internal.graphics.ImageDataUtil.setPixel32","lime/_internal/graphics/ImageDataUtil.hx",1188,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1210_setPixels,"lime._internal.graphics.ImageDataUtil","setPixels",0xc83ae510,"lime._internal.graphics.ImageDataUtil.setPixels","lime/_internal/graphics/ImageDataUtil.hx",1210,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1268_threshold,"lime._internal.graphics.ImageDataUtil","threshold",0x108d444c,"lime._internal.graphics.ImageDataUtil.threshold","lime/_internal/graphics/ImageDataUtil.hx",1268,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1375_unmultiplyAlpha,"lime._internal.graphics.ImageDataUtil","unmultiplyAlpha",0x3b9ff802,"lime._internal.graphics.ImageDataUtil.unmultiplyAlpha","lime/_internal/graphics/ImageDataUtil.hx",1375,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1401___boxBlur,"lime._internal.graphics.ImageDataUtil","__boxBlur",0xee145fd3,"lime._internal.graphics.ImageDataUtil.__boxBlur","lime/_internal/graphics/ImageDataUtil.hx",1401,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1421___boxBlurH,"lime._internal.graphics.ImageDataUtil","__boxBlurH",0x63bf7915,"lime._internal.graphics.ImageDataUtil.__boxBlurH","lime/_internal/graphics/ImageDataUtil.hx",1421,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1468___boxBlurT,"lime._internal.graphics.ImageDataUtil","__boxBlurT",0x63bf7921,"lime._internal.graphics.ImageDataUtil.__boxBlurT","lime/_internal/graphics/ImageDataUtil.hx",1468,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1520___calculateSourceOffset,"lime._internal.graphics.ImageDataUtil","__calculateSourceOffset",0x5e2fc695,"lime._internal.graphics.ImageDataUtil.__calculateSourceOffset","lime/_internal/graphics/ImageDataUtil.hx",1520,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1539___getBoxesForGaussianBlur,"lime._internal.graphics.ImageDataUtil","__getBoxesForGaussianBlur",0xdeeea6e9,"lime._internal.graphics.ImageDataUtil.__getBoxesForGaussianBlur","lime/_internal/graphics/ImageDataUtil.hx",1539,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1558___pixelCompare,"lime._internal.graphics.ImageDataUtil","__pixelCompare",0xf2ff119e,"lime._internal.graphics.ImageDataUtil.__pixelCompare","lime/_internal/graphics/ImageDataUtil.hx",1558,0x59dddace)
HX_LOCAL_STACK_FRAME(_hx_pos_68d87270d4f7b5ed_1607___translatePixel,"lime._internal.graphics.ImageDataUtil","__translatePixel",0xf39bf4f7,"lime._internal.graphics.ImageDataUtil.__translatePixel","lime/_internal/graphics/ImageDataUtil.hx",1607,0x59dddace)
namespace lime{
namespace _internal{
namespace graphics{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

void *ImageDataUtil_obj::_hx_vtable = 0;

Dynamic ImageDataUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDataUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2fa36321;
}

void ImageDataUtil_obj::displaceMap( ::lime::graphics::Image target, ::lime::graphics::Image source, ::lime::graphics::Image map, ::lime::math::Vector2 mapPoint, ::lime::math::Vector4 componentX, ::lime::math::Vector4 componentY,bool smooth){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_33_displaceMap)
HXLINE(  34)		 ::lime::utils::ArrayBufferView targetData = target->buffer->data;
HXLINE(  35)		 ::lime::utils::ArrayBufferView sourceData = source->buffer->data;
HXLINE(  36)		 ::lime::utils::ArrayBufferView mapData = map->buffer->data;
HXLINE(  38)		int targetFormat = target->buffer->format;
HXLINE(  39)		int sourceFormat = source->buffer->format;
HXLINE(  40)		int mapFormat = map->buffer->format;
HXLINE(  42)		bool targetPremultiplied = target->get_premultiplied();
HXLINE(  43)		bool sourcePremultiplied = source->get_premultiplied();
HXLINE(  44)		bool mapPremultiplied = map->get_premultiplied();
HXLINE(  46)		 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,source,null());
HXLINE(  47)		 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView mapView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,map,null());
HXLINE(  49)		int row;
HXLINE(  51)		int sourceOffset;
HXLINE(  53)		int sourcePixel;
HXLINE(  54)		int mapPixel;
HXLINE(  55)		int targetPixel;
HXLINE(  57)		Float mapPixelX;
HXLINE(  58)		Float mapPixelY;
HXLINE(  59)		Float mapPixelA;
HXLINE(  62)		int s1;
HXLINE(  63)		int s2;
HXLINE(  64)		int s3;
HXLINE(  65)		int s4;
HXLINE(  67)		int mPointXFloor;
HXLINE(  68)		int mPointYFloor;
HXLINE(  70)		int disOffsetXFloor;
HXLINE(  71)		int disOffsetYFloor;
HXLINE(  73)		Float disX;
HXLINE(  74)		Float disY;
HXLINE(  76)		{
HXLINE(  76)			int _g1 = (int)0;
HXDLIN(  76)			int _g = sourceView->height;
HXDLIN(  76)			while((_g1 < _g)){
HXLINE(  76)				_g1 = (_g1 + (int)1);
HXDLIN(  76)				int y = (_g1 - (int)1);
HXLINE(  78)				int sourceView1 = sourceView->byteOffset;
HXDLIN(  78)				row = (sourceView1 + (sourceView->stride * y));
HXLINE(  80)				{
HXLINE(  80)					int _g3 = (int)0;
HXDLIN(  80)					int _g2 = sourceView->width;
HXDLIN(  80)					while((_g3 < _g2)){
HXLINE(  80)						_g3 = (_g3 + (int)1);
HXDLIN(  80)						int x = (_g3 - (int)1);
HXLINE(  82)						sourceOffset = (row + (x * (int)4));
HXLINE(  84)						mPointXFloor = ::Std_obj::_hx_int(mapPoint->x);
HXLINE(  85)						mPointYFloor = ::Std_obj::_hx_int(mapPoint->y);
HXLINE(  87)						if (smooth) {
HXLINE(  89)							{
HXLINE(  89)								int sourceView2 = sourceView->byteOffset;
HXDLIN(  89)								int sourceView3 = sourceView->stride;
HXDLIN(  89)								int offset = (sourceView2 + (sourceView3 * ((y - mPointYFloor) + (int)1)));
HXDLIN(  89)								int offset1 = (offset + ((x - mPointXFloor) * (int)4));
HXDLIN(  89)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  89)										int r = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & (int)(int)255);
HXDLIN(  89)										int mapData1 = mapData->byteOffset;
HXDLIN(  89)										int g = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(  89)										int mapData2 = mapData->byteOffset;
HXDLIN(  89)										int b = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(  89)										int mapData3 = mapData->byteOffset;
HXDLIN(  89)										s1 = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  89)										int mapData4 = mapData->byteOffset;
HXDLIN(  89)										int r1 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(  89)										int mapData5 = mapData->byteOffset;
HXDLIN(  89)										int g1 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(  89)										int mapData6 = mapData->byteOffset;
HXDLIN(  89)										int b1 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN(  89)										s1 = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  89)										int mapData7 = mapData->byteOffset;
HXDLIN(  89)										int r2 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(  89)										int mapData8 = mapData->byteOffset;
HXDLIN(  89)										int g2 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(  89)										int b2 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset1)) & (int)(int)255);
HXDLIN(  89)										int mapData9 = mapData->byteOffset;
HXDLIN(  89)										s1 = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  89)								if (mapPremultiplied) {
HXLINE(  89)									bool _hx_tmp;
HXDLIN(  89)									if ((((int)s1 & (int)(int)255) != (int)0)) {
HXLINE(  89)										_hx_tmp = (((int)s1 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  89)										_hx_tmp = false;
            									}
HXDLIN(  89)									if (_hx_tmp) {
HXLINE(  89)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s1 & (int)(int)255));
HXDLIN(  89)										{
HXLINE(  89)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  89)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  89)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  89)											s1 = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s1 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  90)							{
HXLINE(  90)								int sourceView4 = sourceView->byteOffset;
HXDLIN(  90)								int sourceView5 = sourceView->stride;
HXDLIN(  90)								int offset2 = (sourceView4 + (sourceView5 * (y - mPointYFloor)));
HXDLIN(  90)								int offset3 = (offset2 + (((x - mPointXFloor) + (int)1) * (int)4));
HXDLIN(  90)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  90)										int r4 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & (int)(int)255);
HXDLIN(  90)										int mapData10 = mapData->byteOffset;
HXDLIN(  90)										int g4 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData10 + (offset3 + (int)1))) & (int)(int)255);
HXDLIN(  90)										int mapData11 = mapData->byteOffset;
HXDLIN(  90)										int b3 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData11 + (offset3 + (int)2))) & (int)(int)255);
HXDLIN(  90)										int mapData12 = mapData->byteOffset;
HXDLIN(  90)										s2 = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData12 + (offset3 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  90)										int mapData13 = mapData->byteOffset;
HXDLIN(  90)										int r5 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData13 + (offset3 + (int)1))) & (int)(int)255);
HXDLIN(  90)										int mapData14 = mapData->byteOffset;
HXDLIN(  90)										int g5 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData14 + (offset3 + (int)2))) & (int)(int)255);
HXDLIN(  90)										int mapData15 = mapData->byteOffset;
HXDLIN(  90)										int b4 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData15 + (offset3 + (int)3))) & (int)(int)255);
HXDLIN(  90)										s2 = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  90)										int mapData16 = mapData->byteOffset;
HXDLIN(  90)										int r6 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData16 + (offset3 + (int)2))) & (int)(int)255);
HXDLIN(  90)										int mapData17 = mapData->byteOffset;
HXDLIN(  90)										int g6 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData17 + (offset3 + (int)1))) & (int)(int)255);
HXDLIN(  90)										int b5 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset3)) & (int)(int)255);
HXDLIN(  90)										int mapData18 = mapData->byteOffset;
HXDLIN(  90)										s2 = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData18 + (offset3 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  90)								if (mapPremultiplied) {
HXLINE(  90)									bool _hx_tmp1;
HXDLIN(  90)									if ((((int)s2 & (int)(int)255) != (int)0)) {
HXLINE(  90)										_hx_tmp1 = (((int)s2 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  90)										_hx_tmp1 = false;
            									}
HXDLIN(  90)									if (_hx_tmp1) {
HXLINE(  90)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s2 & (int)(int)255));
HXDLIN(  90)										{
HXLINE(  90)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  90)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  90)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  90)											s2 = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s2 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  91)							{
HXLINE(  91)								int sourceView6 = sourceView->byteOffset;
HXDLIN(  91)								int sourceView7 = sourceView->stride;
HXDLIN(  91)								int offset4 = (sourceView6 + (sourceView7 * ((y - mPointYFloor) + (int)1)));
HXDLIN(  91)								int offset5 = (offset4 + (((x - mPointXFloor) + (int)1) * (int)4));
HXDLIN(  91)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  91)										int r8 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset5)) & (int)(int)255);
HXDLIN(  91)										int mapData19 = mapData->byteOffset;
HXDLIN(  91)										int g8 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData19 + (offset5 + (int)1))) & (int)(int)255);
HXDLIN(  91)										int mapData20 = mapData->byteOffset;
HXDLIN(  91)										int b6 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData20 + (offset5 + (int)2))) & (int)(int)255);
HXDLIN(  91)										int mapData21 = mapData->byteOffset;
HXDLIN(  91)										s3 = ((int)((int)((int)((int)((int)r8 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g8 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData21 + (offset5 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  91)										int mapData22 = mapData->byteOffset;
HXDLIN(  91)										int r9 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData22 + (offset5 + (int)1))) & (int)(int)255);
HXDLIN(  91)										int mapData23 = mapData->byteOffset;
HXDLIN(  91)										int g9 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData23 + (offset5 + (int)2))) & (int)(int)255);
HXDLIN(  91)										int mapData24 = mapData->byteOffset;
HXDLIN(  91)										int b7 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData24 + (offset5 + (int)3))) & (int)(int)255);
HXDLIN(  91)										s3 = ((int)((int)((int)((int)((int)r9 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g9 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b7 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset5)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  91)										int mapData25 = mapData->byteOffset;
HXDLIN(  91)										int r10 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData25 + (offset5 + (int)2))) & (int)(int)255);
HXDLIN(  91)										int mapData26 = mapData->byteOffset;
HXDLIN(  91)										int g10 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData26 + (offset5 + (int)1))) & (int)(int)255);
HXDLIN(  91)										int b8 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset5)) & (int)(int)255);
HXDLIN(  91)										int mapData27 = mapData->byteOffset;
HXDLIN(  91)										s3 = ((int)((int)((int)((int)((int)r10 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g10 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b8 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData27 + (offset5 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  91)								if (mapPremultiplied) {
HXLINE(  91)									bool _hx_tmp2;
HXDLIN(  91)									if ((((int)s3 & (int)(int)255) != (int)0)) {
HXLINE(  91)										_hx_tmp2 = (((int)s3 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  91)										_hx_tmp2 = false;
            									}
HXDLIN(  91)									if (_hx_tmp2) {
HXLINE(  91)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s3 & (int)(int)255));
HXDLIN(  91)										{
HXLINE(  91)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											int r11 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  91)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											int g11 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  91)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  91)											s3 = ((int)((int)((int)((int)((int)r11 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g11 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s3 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  92)							{
HXLINE(  92)								int sourceView8 = sourceView->byteOffset;
HXDLIN(  92)								int sourceView9 = sourceView->stride;
HXDLIN(  92)								int offset6 = (sourceView8 + (sourceView9 * (y - mPointYFloor)));
HXDLIN(  92)								int offset7 = (offset6 + ((x - mPointXFloor) * (int)4));
HXDLIN(  92)								switch((int)(mapFormat)){
            									case (int)0: {
HXLINE(  92)										int r12 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset7)) & (int)(int)255);
HXDLIN(  92)										int mapData28 = mapData->byteOffset;
HXDLIN(  92)										int g12 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData28 + (offset7 + (int)1))) & (int)(int)255);
HXDLIN(  92)										int mapData29 = mapData->byteOffset;
HXDLIN(  92)										int b9 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData29 + (offset7 + (int)2))) & (int)(int)255);
HXDLIN(  92)										int mapData30 = mapData->byteOffset;
HXDLIN(  92)										s4 = ((int)((int)((int)((int)((int)r12 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g12 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b9 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData30 + (offset7 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  92)										int mapData31 = mapData->byteOffset;
HXDLIN(  92)										int r13 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData31 + (offset7 + (int)1))) & (int)(int)255);
HXDLIN(  92)										int mapData32 = mapData->byteOffset;
HXDLIN(  92)										int g13 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData32 + (offset7 + (int)2))) & (int)(int)255);
HXDLIN(  92)										int mapData33 = mapData->byteOffset;
HXDLIN(  92)										int b10 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData33 + (offset7 + (int)3))) & (int)(int)255);
HXDLIN(  92)										s4 = ((int)((int)((int)((int)((int)r13 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g13 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b10 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset7)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  92)										int mapData34 = mapData->byteOffset;
HXDLIN(  92)										int r14 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData34 + (offset7 + (int)2))) & (int)(int)255);
HXDLIN(  92)										int mapData35 = mapData->byteOffset;
HXDLIN(  92)										int g14 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData35 + (offset7 + (int)1))) & (int)(int)255);
HXDLIN(  92)										int b11 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset7)) & (int)(int)255);
HXDLIN(  92)										int mapData36 = mapData->byteOffset;
HXDLIN(  92)										s4 = ((int)((int)((int)((int)((int)r14 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g14 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b11 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData36 + (offset7 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  92)								if (mapPremultiplied) {
HXLINE(  92)									bool _hx_tmp3;
HXDLIN(  92)									if ((((int)s4 & (int)(int)255) != (int)0)) {
HXLINE(  92)										_hx_tmp3 = (((int)s4 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  92)										_hx_tmp3 = false;
            									}
HXDLIN(  92)									if (_hx_tmp3) {
HXLINE(  92)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s4 & (int)(int)255));
HXDLIN(  92)										{
HXLINE(  92)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											int r15 = ((int)::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  92)											 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											int g15 = ((int)::__hxcpp_memory_get_byte(this11->buffer->b,(this11->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  92)											 ::lime::utils::ArrayBufferView this12 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)											s4 = ((int)((int)((int)((int)((int)r15 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g15 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this12->buffer->b,(this12->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s4 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  94)							Float mapPixel1 = (mapPoint->x - mPointXFloor);
HXDLIN(  94)							mapPixel = ::lime::_internal::graphics::ImageDataUtil_obj::bilinear(s1,s2,s3,s4,mapPixel1,(mapPoint->y - mPointYFloor));
            						}
            						else {
HXLINE(  98)							int mapView1 = mapView->byteOffset;
HXDLIN(  98)							int mapView2 = mapView->stride;
HXDLIN(  98)							int offset8 = (mapView1 + (mapView2 * (y - mPointYFloor)));
HXDLIN(  98)							int offset9 = (offset8 + ((x - mPointXFloor) * (int)4));
HXDLIN(  98)							switch((int)(mapFormat)){
            								case (int)0: {
HXLINE(  98)									int r16 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset9)) & (int)(int)255);
HXDLIN(  98)									int mapData37 = mapData->byteOffset;
HXDLIN(  98)									int g16 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData37 + (offset9 + (int)1))) & (int)(int)255);
HXDLIN(  98)									int mapData38 = mapData->byteOffset;
HXDLIN(  98)									int b12 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData38 + (offset9 + (int)2))) & (int)(int)255);
HXDLIN(  98)									int mapData39 = mapData->byteOffset;
HXDLIN(  98)									mapPixel = ((int)((int)((int)((int)((int)r16 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g16 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b12 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData39 + (offset9 + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE(  98)									int mapData40 = mapData->byteOffset;
HXDLIN(  98)									int r17 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData40 + (offset9 + (int)1))) & (int)(int)255);
HXDLIN(  98)									int mapData41 = mapData->byteOffset;
HXDLIN(  98)									int g17 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData41 + (offset9 + (int)2))) & (int)(int)255);
HXDLIN(  98)									int mapData42 = mapData->byteOffset;
HXDLIN(  98)									int b13 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData42 + (offset9 + (int)3))) & (int)(int)255);
HXDLIN(  98)									mapPixel = ((int)((int)((int)((int)((int)r17 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g17 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b13 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset9)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE(  98)									int mapData43 = mapData->byteOffset;
HXDLIN(  98)									int r18 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData43 + (offset9 + (int)2))) & (int)(int)255);
HXDLIN(  98)									int mapData44 = mapData->byteOffset;
HXDLIN(  98)									int g18 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData44 + (offset9 + (int)1))) & (int)(int)255);
HXDLIN(  98)									int b14 = ((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData->byteOffset + offset9)) & (int)(int)255);
HXDLIN(  98)									int mapData45 = mapData->byteOffset;
HXDLIN(  98)									mapPixel = ((int)((int)((int)((int)((int)r18 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g18 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b14 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(mapData->buffer->b,(mapData45 + (offset9 + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN(  98)							if (mapPremultiplied) {
HXLINE(  98)								bool _hx_tmp4;
HXDLIN(  98)								if ((((int)mapPixel & (int)(int)255) != (int)0)) {
HXLINE(  98)									_hx_tmp4 = (((int)mapPixel & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE(  98)									_hx_tmp4 = false;
            								}
HXDLIN(  98)								if (_hx_tmp4) {
HXLINE(  98)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)mapPixel & (int)(int)255));
HXDLIN(  98)									{
HXLINE(  98)										 ::lime::utils::ArrayBufferView this13 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										int r19 = ((int)::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((((int)hx::UShr(mapPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  98)										 ::lime::utils::ArrayBufferView this14 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										int g19 = ((int)::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((((int)hx::UShr(mapPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  98)										 ::lime::utils::ArrayBufferView this15 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  98)										mapPixel = ((int)((int)((int)((int)((int)r19 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g19 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this15->buffer->b,(this15->byteOffset + ::Math_obj::round((((int)hx::UShr(mapPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)mapPixel & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 101)						mapPixelA = ((Float)((int)mapPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 102)						mapPixelX = (((Float)(((int)hx::UShr(mapPixel,(int)24) & (int)(int)255) - (int)128) / (Float)((Float)255.0)) * mapPixelA);
HXLINE( 103)						mapPixelY = (((Float)(((int)hx::UShr(mapPixel,(int)16) & (int)(int)255) - (int)128) / (Float)((Float)255.0)) * mapPixelA);
HXLINE( 105)						Float disX1 = (mapPixelX * componentX->x);
HXDLIN( 105)						disX = (disX1 + (mapPixelY * componentY->x));
HXLINE( 106)						Float disY1 = (mapPixelX * componentX->y);
HXDLIN( 106)						disY = (disY1 + (mapPixelY * componentY->y));
HXLINE( 108)						disOffsetXFloor = ::Math_obj::floor((disX * sourceView->width));
HXLINE( 109)						disOffsetYFloor = ::Math_obj::floor((disY * sourceView->height));
HXLINE( 111)						if (smooth) {
HXLINE( 113)							{
HXLINE( 113)								int sourceView10 = sourceView->byteOffset;
HXDLIN( 113)								int sourceView11 = sourceView->stride;
HXDLIN( 113)								int offset10 = (sourceView10 + (sourceView11 * ((y + disOffsetYFloor) + (int)1)));
HXDLIN( 113)								int offset11 = (offset10 + ((x + disOffsetXFloor) * (int)4));
HXDLIN( 113)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 113)										int r20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset11)) & (int)(int)255);
HXDLIN( 113)										int sourceData1 = sourceData->byteOffset;
HXDLIN( 113)										int g20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (offset11 + (int)1))) & (int)(int)255);
HXDLIN( 113)										int sourceData2 = sourceData->byteOffset;
HXDLIN( 113)										int b15 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (offset11 + (int)2))) & (int)(int)255);
HXDLIN( 113)										int sourceData3 = sourceData->byteOffset;
HXDLIN( 113)										s1 = ((int)((int)((int)((int)((int)r20 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g20 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b15 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (offset11 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 113)										int sourceData4 = sourceData->byteOffset;
HXDLIN( 113)										int r21 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (offset11 + (int)1))) & (int)(int)255);
HXDLIN( 113)										int sourceData5 = sourceData->byteOffset;
HXDLIN( 113)										int g21 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (offset11 + (int)2))) & (int)(int)255);
HXDLIN( 113)										int sourceData6 = sourceData->byteOffset;
HXDLIN( 113)										int b16 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (offset11 + (int)3))) & (int)(int)255);
HXDLIN( 113)										s1 = ((int)((int)((int)((int)((int)r21 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g21 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b16 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset11)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 113)										int sourceData7 = sourceData->byteOffset;
HXDLIN( 113)										int r22 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (offset11 + (int)2))) & (int)(int)255);
HXDLIN( 113)										int sourceData8 = sourceData->byteOffset;
HXDLIN( 113)										int g22 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (offset11 + (int)1))) & (int)(int)255);
HXDLIN( 113)										int b17 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset11)) & (int)(int)255);
HXDLIN( 113)										int sourceData9 = sourceData->byteOffset;
HXDLIN( 113)										s1 = ((int)((int)((int)((int)((int)r22 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g22 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b17 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (offset11 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 113)								if (sourcePremultiplied) {
HXLINE( 113)									bool _hx_tmp5;
HXDLIN( 113)									if ((((int)s1 & (int)(int)255) != (int)0)) {
HXLINE( 113)										_hx_tmp5 = (((int)s1 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 113)										_hx_tmp5 = false;
            									}
HXDLIN( 113)									if (_hx_tmp5) {
HXLINE( 113)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s1 & (int)(int)255));
HXDLIN( 113)										{
HXLINE( 113)											 ::lime::utils::ArrayBufferView this16 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											int r23 = ((int)::__hxcpp_memory_get_byte(this16->buffer->b,(this16->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 113)											 ::lime::utils::ArrayBufferView this17 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											int g23 = ((int)::__hxcpp_memory_get_byte(this17->buffer->b,(this17->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 113)											 ::lime::utils::ArrayBufferView this18 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 113)											s1 = ((int)((int)((int)((int)((int)r23 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g23 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((((int)hx::UShr(s1,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s1 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 114)							{
HXLINE( 114)								int sourceView12 = sourceView->byteOffset;
HXDLIN( 114)								int sourceView13 = sourceView->stride;
HXDLIN( 114)								int offset12 = (sourceView12 + (sourceView13 * (y + disOffsetYFloor)));
HXDLIN( 114)								int offset13 = (offset12 + (((x + disOffsetXFloor) + (int)1) * (int)4));
HXDLIN( 114)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 114)										int r24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset13)) & (int)(int)255);
HXDLIN( 114)										int sourceData10 = sourceData->byteOffset;
HXDLIN( 114)										int g24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData10 + (offset13 + (int)1))) & (int)(int)255);
HXDLIN( 114)										int sourceData11 = sourceData->byteOffset;
HXDLIN( 114)										int b18 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData11 + (offset13 + (int)2))) & (int)(int)255);
HXDLIN( 114)										int sourceData12 = sourceData->byteOffset;
HXDLIN( 114)										s2 = ((int)((int)((int)((int)((int)r24 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g24 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b18 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData12 + (offset13 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 114)										int sourceData13 = sourceData->byteOffset;
HXDLIN( 114)										int r25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData13 + (offset13 + (int)1))) & (int)(int)255);
HXDLIN( 114)										int sourceData14 = sourceData->byteOffset;
HXDLIN( 114)										int g25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData14 + (offset13 + (int)2))) & (int)(int)255);
HXDLIN( 114)										int sourceData15 = sourceData->byteOffset;
HXDLIN( 114)										int b19 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData15 + (offset13 + (int)3))) & (int)(int)255);
HXDLIN( 114)										s2 = ((int)((int)((int)((int)((int)r25 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g25 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b19 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset13)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 114)										int sourceData16 = sourceData->byteOffset;
HXDLIN( 114)										int r26 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData16 + (offset13 + (int)2))) & (int)(int)255);
HXDLIN( 114)										int sourceData17 = sourceData->byteOffset;
HXDLIN( 114)										int g26 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData17 + (offset13 + (int)1))) & (int)(int)255);
HXDLIN( 114)										int b20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset13)) & (int)(int)255);
HXDLIN( 114)										int sourceData18 = sourceData->byteOffset;
HXDLIN( 114)										s2 = ((int)((int)((int)((int)((int)r26 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g26 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b20 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData18 + (offset13 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 114)								if (sourcePremultiplied) {
HXLINE( 114)									bool _hx_tmp6;
HXDLIN( 114)									if ((((int)s2 & (int)(int)255) != (int)0)) {
HXLINE( 114)										_hx_tmp6 = (((int)s2 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 114)										_hx_tmp6 = false;
            									}
HXDLIN( 114)									if (_hx_tmp6) {
HXLINE( 114)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s2 & (int)(int)255));
HXDLIN( 114)										{
HXLINE( 114)											 ::lime::utils::ArrayBufferView this19 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											int r27 = ((int)::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 114)											 ::lime::utils::ArrayBufferView this20 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											int g27 = ((int)::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 114)											 ::lime::utils::ArrayBufferView this21 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 114)											s2 = ((int)((int)((int)((int)((int)r27 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g27 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((((int)hx::UShr(s2,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s2 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 115)							{
HXLINE( 115)								int sourceView14 = sourceView->byteOffset;
HXDLIN( 115)								int sourceView15 = sourceView->stride;
HXDLIN( 115)								int offset14 = (sourceView14 + (sourceView15 * ((y + disOffsetYFloor) + (int)1)));
HXDLIN( 115)								int offset15 = (offset14 + (((x + disOffsetXFloor) + (int)1) * (int)4));
HXDLIN( 115)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 115)										int r28 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset15)) & (int)(int)255);
HXDLIN( 115)										int sourceData19 = sourceData->byteOffset;
HXDLIN( 115)										int g28 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData19 + (offset15 + (int)1))) & (int)(int)255);
HXDLIN( 115)										int sourceData20 = sourceData->byteOffset;
HXDLIN( 115)										int b21 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData20 + (offset15 + (int)2))) & (int)(int)255);
HXDLIN( 115)										int sourceData21 = sourceData->byteOffset;
HXDLIN( 115)										s3 = ((int)((int)((int)((int)((int)r28 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g28 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b21 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData21 + (offset15 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 115)										int sourceData22 = sourceData->byteOffset;
HXDLIN( 115)										int r29 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData22 + (offset15 + (int)1))) & (int)(int)255);
HXDLIN( 115)										int sourceData23 = sourceData->byteOffset;
HXDLIN( 115)										int g29 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData23 + (offset15 + (int)2))) & (int)(int)255);
HXDLIN( 115)										int sourceData24 = sourceData->byteOffset;
HXDLIN( 115)										int b22 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData24 + (offset15 + (int)3))) & (int)(int)255);
HXDLIN( 115)										s3 = ((int)((int)((int)((int)((int)r29 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g29 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b22 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset15)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 115)										int sourceData25 = sourceData->byteOffset;
HXDLIN( 115)										int r30 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData25 + (offset15 + (int)2))) & (int)(int)255);
HXDLIN( 115)										int sourceData26 = sourceData->byteOffset;
HXDLIN( 115)										int g30 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData26 + (offset15 + (int)1))) & (int)(int)255);
HXDLIN( 115)										int b23 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset15)) & (int)(int)255);
HXDLIN( 115)										int sourceData27 = sourceData->byteOffset;
HXDLIN( 115)										s3 = ((int)((int)((int)((int)((int)r30 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g30 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b23 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData27 + (offset15 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 115)								if (sourcePremultiplied) {
HXLINE( 115)									bool _hx_tmp7;
HXDLIN( 115)									if ((((int)s3 & (int)(int)255) != (int)0)) {
HXLINE( 115)										_hx_tmp7 = (((int)s3 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 115)										_hx_tmp7 = false;
            									}
HXDLIN( 115)									if (_hx_tmp7) {
HXLINE( 115)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s3 & (int)(int)255));
HXDLIN( 115)										{
HXLINE( 115)											 ::lime::utils::ArrayBufferView this22 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											int r31 = ((int)::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 115)											 ::lime::utils::ArrayBufferView this23 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											int g31 = ((int)::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 115)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 115)											s3 = ((int)((int)((int)((int)((int)r31 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g31 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round((((int)hx::UShr(s3,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s3 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 116)							{
HXLINE( 116)								int sourceView16 = sourceView->byteOffset;
HXDLIN( 116)								int sourceView17 = sourceView->stride;
HXDLIN( 116)								int offset16 = (sourceView16 + (sourceView17 * (y + disOffsetYFloor)));
HXDLIN( 116)								int offset17 = (offset16 + ((x + disOffsetXFloor) * (int)4));
HXDLIN( 116)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 116)										int r32 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset17)) & (int)(int)255);
HXDLIN( 116)										int sourceData28 = sourceData->byteOffset;
HXDLIN( 116)										int g32 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData28 + (offset17 + (int)1))) & (int)(int)255);
HXDLIN( 116)										int sourceData29 = sourceData->byteOffset;
HXDLIN( 116)										int b24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData29 + (offset17 + (int)2))) & (int)(int)255);
HXDLIN( 116)										int sourceData30 = sourceData->byteOffset;
HXDLIN( 116)										s4 = ((int)((int)((int)((int)((int)r32 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g32 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b24 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData30 + (offset17 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 116)										int sourceData31 = sourceData->byteOffset;
HXDLIN( 116)										int r33 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData31 + (offset17 + (int)1))) & (int)(int)255);
HXDLIN( 116)										int sourceData32 = sourceData->byteOffset;
HXDLIN( 116)										int g33 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData32 + (offset17 + (int)2))) & (int)(int)255);
HXDLIN( 116)										int sourceData33 = sourceData->byteOffset;
HXDLIN( 116)										int b25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData33 + (offset17 + (int)3))) & (int)(int)255);
HXDLIN( 116)										s4 = ((int)((int)((int)((int)((int)r33 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g33 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b25 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset17)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 116)										int sourceData34 = sourceData->byteOffset;
HXDLIN( 116)										int r34 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData34 + (offset17 + (int)2))) & (int)(int)255);
HXDLIN( 116)										int sourceData35 = sourceData->byteOffset;
HXDLIN( 116)										int g34 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData35 + (offset17 + (int)1))) & (int)(int)255);
HXDLIN( 116)										int b26 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset17)) & (int)(int)255);
HXDLIN( 116)										int sourceData36 = sourceData->byteOffset;
HXDLIN( 116)										s4 = ((int)((int)((int)((int)((int)r34 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g34 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b26 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData36 + (offset17 + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 116)								if (sourcePremultiplied) {
HXLINE( 116)									bool _hx_tmp8;
HXDLIN( 116)									if ((((int)s4 & (int)(int)255) != (int)0)) {
HXLINE( 116)										_hx_tmp8 = (((int)s4 & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 116)										_hx_tmp8 = false;
            									}
HXDLIN( 116)									if (_hx_tmp8) {
HXLINE( 116)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)s4 & (int)(int)255));
HXDLIN( 116)										{
HXLINE( 116)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											int r35 = ((int)::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 116)											 ::lime::utils::ArrayBufferView this26 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											int g35 = ((int)::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 116)											 ::lime::utils::ArrayBufferView this27 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 116)											s4 = ((int)((int)((int)((int)((int)r35 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g35 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((((int)hx::UShr(s4,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)s4 & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 118)							Float sourcePixel1 = ((disX * sourceView->width) - disOffsetXFloor);
HXDLIN( 118)							sourcePixel = ::lime::_internal::graphics::ImageDataUtil_obj::bilinear(s1,s2,s3,s4,sourcePixel1,((disY * sourceView->height) - disOffsetYFloor));
            						}
            						else {
HXLINE( 122)							int sourceView18 = sourceView->byteOffset;
HXDLIN( 122)							int sourceView19 = sourceView->stride;
HXDLIN( 122)							int offset18 = (sourceView18 + (sourceView19 * (y + disOffsetYFloor)));
HXDLIN( 122)							int offset19 = (offset18 + ((x + disOffsetXFloor) * (int)4));
HXDLIN( 122)							switch((int)(sourceFormat)){
            								case (int)0: {
HXLINE( 122)									int r36 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset19)) & (int)(int)255);
HXDLIN( 122)									int sourceData37 = sourceData->byteOffset;
HXDLIN( 122)									int g36 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData37 + (offset19 + (int)1))) & (int)(int)255);
HXDLIN( 122)									int sourceData38 = sourceData->byteOffset;
HXDLIN( 122)									int b27 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData38 + (offset19 + (int)2))) & (int)(int)255);
HXDLIN( 122)									int sourceData39 = sourceData->byteOffset;
HXDLIN( 122)									sourcePixel = ((int)((int)((int)((int)((int)r36 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g36 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b27 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData39 + (offset19 + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 122)									int sourceData40 = sourceData->byteOffset;
HXDLIN( 122)									int r37 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData40 + (offset19 + (int)1))) & (int)(int)255);
HXDLIN( 122)									int sourceData41 = sourceData->byteOffset;
HXDLIN( 122)									int g37 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData41 + (offset19 + (int)2))) & (int)(int)255);
HXDLIN( 122)									int sourceData42 = sourceData->byteOffset;
HXDLIN( 122)									int b28 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData42 + (offset19 + (int)3))) & (int)(int)255);
HXDLIN( 122)									sourcePixel = ((int)((int)((int)((int)((int)r37 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g37 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b28 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset19)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 122)									int sourceData43 = sourceData->byteOffset;
HXDLIN( 122)									int r38 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData43 + (offset19 + (int)2))) & (int)(int)255);
HXDLIN( 122)									int sourceData44 = sourceData->byteOffset;
HXDLIN( 122)									int g38 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData44 + (offset19 + (int)1))) & (int)(int)255);
HXDLIN( 122)									int b29 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + offset19)) & (int)(int)255);
HXDLIN( 122)									int sourceData45 = sourceData->byteOffset;
HXDLIN( 122)									sourcePixel = ((int)((int)((int)((int)((int)r38 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g38 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b29 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData45 + (offset19 + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 122)							if (sourcePremultiplied) {
HXLINE( 122)								bool _hx_tmp9;
HXDLIN( 122)								if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 122)									_hx_tmp9 = (((int)sourcePixel & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 122)									_hx_tmp9 = false;
            								}
HXDLIN( 122)								if (_hx_tmp9) {
HXLINE( 122)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 122)									{
HXLINE( 122)										 ::lime::utils::ArrayBufferView this28 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										int r39 = ((int)::__hxcpp_memory_get_byte(this28->buffer->b,(this28->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 122)										 ::lime::utils::ArrayBufferView this29 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										int g39 = ((int)::__hxcpp_memory_get_byte(this29->buffer->b,(this29->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 122)										 ::lime::utils::ArrayBufferView this30 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 122)										sourcePixel = ((int)((int)((int)((int)((int)r39 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g39 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this30->buffer->b,(this30->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 125)						{
HXLINE( 125)							if (targetPremultiplied) {
HXLINE( 125)								if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 125)									if ((sourcePixel != (int)0)) {
HXLINE( 125)										sourcePixel = (int)0;
            									}
            								}
            								else {
HXLINE( 125)									if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 125)										 ::lime::utils::ArrayBufferView this31 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 125)										int this32 = this31->byteOffset;
HXDLIN( 125)										::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this31->buffer->b,(this32 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 125)										sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
HXDLIN( 125)							switch((int)(targetFormat)){
            								case (int)0: {
HXLINE( 125)									{
HXLINE( 125)										int val = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 125)										::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val1 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData1 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData1 + (sourceOffset + (int)1)),val1);
            										}
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val2 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData2 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData2 + (sourceOffset + (int)2)),val2);
            										}
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val3 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData3 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData3 + (sourceOffset + (int)3)),val3);
            										}
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 125)									{
HXLINE( 125)										int val4 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 125)										::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val4);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val5 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData4 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData4 + (sourceOffset + (int)1)),val5);
            										}
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val6 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData5 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData5 + (sourceOffset + (int)2)),val6);
            										}
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val7 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData6 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData6 + (sourceOffset + (int)3)),val7);
            										}
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 125)									{
HXLINE( 125)										int val8 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 125)										::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData->byteOffset + sourceOffset),val8);
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val9 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData7 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData7 + (sourceOffset + (int)1)),val9);
            										}
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val10 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData8 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData8 + (sourceOffset + (int)2)),val10);
            										}
            									}
HXDLIN( 125)									{
HXLINE( 125)										int val11 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 125)										{
HXLINE( 125)											int targetData9 = targetData->byteOffset;
HXDLIN( 125)											::__hxcpp_memory_set_byte(targetData->buffer->b,(targetData9 + (sourceOffset + (int)3)),val11);
            										}
            									}
            								}
            								break;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 129)		target->dirty = true;
HXLINE( 130)		target->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,displaceMap,(void))

int ImageDataUtil_obj::bilinear(int s1,int s2,int s3,int s4,Float su,Float sv){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_139_bilinear)
HXDLIN( 139)		int _hx_tmp = ::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(s4,s2,su);
HXDLIN( 139)		return ::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(_hx_tmp,::lime::_internal::graphics::ImageDataUtil_obj::lerpRGBA(s1,s3,su),sv);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,bilinear,return )

int ImageDataUtil_obj::lerpRGBA(int v0,int v1,Float x){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_143_lerpRGBA)
HXLINE( 144)		int this1 = (int)0;
HXDLIN( 144)		int result = this1;
HXLINE( 145)		{
HXLINE( 145)			int value = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(((int)hx::UShr(v0,(int)24) & (int)(int)255),((int)hx::UShr(v1,(int)24) & (int)(int)255),x));
HXDLIN( 145)			result = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(result,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(result,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)result & (int)(int)255) & (int)(int)255));
            		}
HXLINE( 146)		{
HXLINE( 146)			int value1 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(((int)hx::UShr(v0,(int)16) & (int)(int)255),((int)hx::UShr(v1,(int)16) & (int)(int)255),x));
HXDLIN( 146)			result = ((int)((int)((int)((int)((int)((int)hx::UShr(result,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(result,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)result & (int)(int)255) & (int)(int)255));
            		}
HXLINE( 147)		{
HXLINE( 147)			int value2 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(((int)hx::UShr(v0,(int)8) & (int)(int)255),((int)hx::UShr(v1,(int)8) & (int)(int)255),x));
HXDLIN( 147)			result = ((int)((int)((int)((int)((int)((int)hx::UShr(result,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(result,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)result & (int)(int)255) & (int)(int)255));
            		}
HXLINE( 148)		{
HXLINE( 148)			int value3 = ::Math_obj::floor(::lime::_internal::graphics::ImageDataUtil_obj::lerp(((int)v0 & (int)(int)255),((int)v1 & (int)(int)255),x));
HXDLIN( 148)			result = ((int)((int)((int)((int)((int)((int)hx::UShr(result,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(result,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(result,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            		}
HXLINE( 150)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerpRGBA,return )

 ::lime::math::Vector4 ImageDataUtil_obj::lerp4f( ::lime::math::Vector4 v0, ::lime::math::Vector4 v1,Float x){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_155_lerp4f)
HXDLIN( 155)		Float _hx_tmp = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->x,v1->x,x);
HXDLIN( 155)		Float _hx_tmp1 = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->y,v1->y,x);
HXDLIN( 155)		Float _hx_tmp2 = ::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->z,v1->z,x);
HXDLIN( 155)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,::lime::_internal::graphics::ImageDataUtil_obj::lerp(v0->w,v1->w,x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerp4f,return )

Float ImageDataUtil_obj::lerp(Float v0,Float v1,Float x){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_160_lerp)
HXDLIN( 160)		return (((((Float)1.0) - x) * v0) + (x * v1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lerp,return )

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_164_colorTransform)
HXLINE( 165)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 166)		if (hx::IsNull( data )) {
HXLINE( 166)			return;
            		}
HXLINE( 169)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 169)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_color_transform(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(colorMatrix));
            		}
            		else {
HXLINE( 173)			int format = image->buffer->format;
HXLINE( 174)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 176)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 178)			 ::lime::utils::ArrayBufferView alphaTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE( 179)			 ::lime::utils::ArrayBufferView redTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE( 180)			 ::lime::utils::ArrayBufferView greenTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE( 181)			 ::lime::utils::ArrayBufferView blueTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE( 183)			int row;
HXDLIN( 183)			int offset;
HXDLIN( 183)			int pixel;
HXLINE( 185)			{
HXLINE( 185)				int _g1 = (int)0;
HXDLIN( 185)				int _g = dataView->height;
HXDLIN( 185)				while((_g1 < _g)){
HXLINE( 185)					_g1 = (_g1 + (int)1);
HXDLIN( 185)					int y = (_g1 - (int)1);
HXLINE( 187)					int dataView1 = dataView->byteOffset;
HXDLIN( 187)					row = (dataView1 + (dataView->stride * y));
HXLINE( 189)					{
HXLINE( 189)						int _g3 = (int)0;
HXDLIN( 189)						int _g2 = dataView->width;
HXDLIN( 189)						while((_g3 < _g2)){
HXLINE( 189)							_g3 = (_g3 + (int)1);
HXDLIN( 189)							int x = (_g3 - (int)1);
HXLINE( 191)							offset = (row + (x * (int)4));
HXLINE( 193)							{
HXLINE( 193)								switch((int)(format)){
            									case (int)0: {
HXLINE( 193)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 193)										int data1 = data->byteOffset;
HXDLIN( 193)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 193)										int data2 = data->byteOffset;
HXDLIN( 193)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 193)										int data3 = data->byteOffset;
HXDLIN( 193)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 193)										int data4 = data->byteOffset;
HXDLIN( 193)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 193)										int data5 = data->byteOffset;
HXDLIN( 193)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 193)										int data6 = data->byteOffset;
HXDLIN( 193)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN( 193)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 193)										int data7 = data->byteOffset;
HXDLIN( 193)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 193)										int data8 = data->byteOffset;
HXDLIN( 193)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 193)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 193)										int data9 = data->byteOffset;
HXDLIN( 193)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 193)								if (premultiplied) {
HXLINE( 193)									bool _hx_tmp;
HXDLIN( 193)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 193)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 193)										_hx_tmp = false;
            									}
HXDLIN( 193)									if (_hx_tmp) {
HXLINE( 193)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 193)										{
HXLINE( 193)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 193)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 193)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 193)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 194)							{
HXLINE( 194)								int r4 = ((int)::__hxcpp_memory_get_byte(redTable->buffer->b,(redTable->byteOffset + ((int)hx::UShr(pixel,(int)24) & (int)(int)255))) & (int)(int)255);
HXDLIN( 194)								int g4 = ((int)::__hxcpp_memory_get_byte(greenTable->buffer->b,(greenTable->byteOffset + ((int)hx::UShr(pixel,(int)16) & (int)(int)255))) & (int)(int)255);
HXDLIN( 194)								int b3 = ((int)::__hxcpp_memory_get_byte(blueTable->buffer->b,(blueTable->byteOffset + ((int)hx::UShr(pixel,(int)8) & (int)(int)255))) & (int)(int)255);
HXDLIN( 194)								pixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaTable->buffer->b,(alphaTable->byteOffset + ((int)pixel & (int)(int)255))) & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 195)							{
HXLINE( 195)								if (premultiplied) {
HXLINE( 195)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE( 195)										if ((pixel != (int)0)) {
HXLINE( 195)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE( 195)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE( 195)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 195)											int this5 = this4->byteOffset;
HXDLIN( 195)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN( 195)											pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 195)								switch((int)(format)){
            									case (int)0: {
HXLINE( 195)										{
HXLINE( 195)											int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 195)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data10 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data11 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val3 = ((int)pixel & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data12 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 195)										{
HXLINE( 195)											int val4 = ((int)pixel & (int)(int)255);
HXDLIN( 195)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data13 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data14 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data15 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 195)										{
HXLINE( 195)											int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 195)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data16 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data17 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN( 195)										{
HXLINE( 195)											int val11 = ((int)pixel & (int)(int)255);
HXDLIN( 195)											{
HXLINE( 195)												int data18 = data->byteOffset;
HXDLIN( 195)												::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 200)		image->dirty = true;
HXLINE( 201)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_206_copyChannel)
HXLINE( 207)		int destIdx;
HXDLIN( 207)		switch((int)(_hx_getEnumValueIndex(destChannel))){
            			case (int)0: {
HXLINE( 207)				destIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 207)				destIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 207)				destIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE( 207)				destIdx = (int)3;
            			}
            			break;
            		}
HXLINE( 215)		int srcIdx;
HXDLIN( 215)		switch((int)(_hx_getEnumValueIndex(sourceChannel))){
            			case (int)0: {
HXLINE( 215)				srcIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE( 215)				srcIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE( 215)				srcIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE( 215)				srcIdx = (int)3;
            			}
            			break;
            		}
HXLINE( 223)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE( 224)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 226)		bool _hx_tmp;
HXDLIN( 226)		if (hx::IsNotNull( srcData )) {
HXLINE( 226)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE( 226)			_hx_tmp = true;
            		}
HXDLIN( 226)		if (_hx_tmp) {
HXLINE( 226)			return;
            		}
HXLINE( 229)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 229)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_channel(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),srcIdx,destIdx);
            		}
            		else {
HXLINE( 233)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 234)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 236)			int srcFormat = sourceImage->buffer->format;
HXLINE( 237)			int destFormat = image->buffer->format;
HXLINE( 238)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 239)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 241)			int srcPosition;
HXDLIN( 241)			int destPosition;
HXDLIN( 241)			int srcPixel;
HXDLIN( 241)			int destPixel;
HXDLIN( 241)			int value = (int)0;
HXLINE( 243)			{
HXLINE( 243)				int _g1 = (int)0;
HXDLIN( 243)				int _g = destView->height;
HXDLIN( 243)				while((_g1 < _g)){
HXLINE( 243)					_g1 = (_g1 + (int)1);
HXDLIN( 243)					int y = (_g1 - (int)1);
HXLINE( 245)					int srcView1 = srcView->byteOffset;
HXDLIN( 245)					srcPosition = (srcView1 + (srcView->stride * y));
HXLINE( 246)					int destView1 = destView->byteOffset;
HXDLIN( 246)					destPosition = (destView1 + (destView->stride * y));
HXLINE( 248)					{
HXLINE( 248)						int _g3 = (int)0;
HXDLIN( 248)						int _g2 = destView->width;
HXDLIN( 248)						while((_g3 < _g2)){
HXLINE( 248)							_g3 = (_g3 + (int)1);
HXDLIN( 248)							int x = (_g3 - (int)1);
HXLINE( 250)							{
HXLINE( 250)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 250)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 250)										int srcData1 = srcData->byteOffset;
HXDLIN( 250)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData1 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 250)										int srcData2 = srcData->byteOffset;
HXDLIN( 250)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData2 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 250)										int srcData3 = srcData->byteOffset;
HXDLIN( 250)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData3 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 250)										int srcData4 = srcData->byteOffset;
HXDLIN( 250)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData4 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 250)										int srcData5 = srcData->byteOffset;
HXDLIN( 250)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData5 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 250)										int srcData6 = srcData->byteOffset;
HXDLIN( 250)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData6 + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN( 250)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 250)										int srcData7 = srcData->byteOffset;
HXDLIN( 250)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData7 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 250)										int srcData8 = srcData->byteOffset;
HXDLIN( 250)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData8 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 250)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 250)										int srcData9 = srcData->byteOffset;
HXDLIN( 250)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData9 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 250)								if (srcPremultiplied) {
HXLINE( 250)									bool _hx_tmp1;
HXDLIN( 250)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE( 250)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 250)										_hx_tmp1 = false;
            									}
HXDLIN( 250)									if (_hx_tmp1) {
HXLINE( 250)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN( 250)										{
HXLINE( 250)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 250)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 250)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 250)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 250)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 250)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 251)							{
HXLINE( 251)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 251)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 251)										int destData1 = destData->byteOffset;
HXDLIN( 251)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 251)										int destData2 = destData->byteOffset;
HXDLIN( 251)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 251)										int destData3 = destData->byteOffset;
HXDLIN( 251)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 251)										int destData4 = destData->byteOffset;
HXDLIN( 251)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 251)										int destData5 = destData->byteOffset;
HXDLIN( 251)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 251)										int destData6 = destData->byteOffset;
HXDLIN( 251)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 251)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 251)										int destData7 = destData->byteOffset;
HXDLIN( 251)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 251)										int destData8 = destData->byteOffset;
HXDLIN( 251)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 251)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 251)										int destData9 = destData->byteOffset;
HXDLIN( 251)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 251)								if (destPremultiplied) {
HXLINE( 251)									bool _hx_tmp2;
HXDLIN( 251)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 251)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 251)										_hx_tmp2 = false;
            									}
HXDLIN( 251)									if (_hx_tmp2) {
HXLINE( 251)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 251)										{
HXLINE( 251)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 251)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 251)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 251)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 251)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 251)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 253)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 256)									value = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
            								}
            								break;
            								case (int)1: {
HXLINE( 258)									value = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
            								}
            								break;
            								case (int)2: {
HXLINE( 260)									value = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
            								}
            								break;
            								case (int)3: {
HXLINE( 262)									value = ((int)srcPixel & (int)(int)255);
            								}
            								break;
            							}
HXLINE( 265)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 268)									destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 270)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 272)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)3: {
HXLINE( 274)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            								}
            								break;
            							}
HXLINE( 277)							{
HXLINE( 277)								if (destPremultiplied) {
HXLINE( 277)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 277)										if ((destPixel != (int)0)) {
HXLINE( 277)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 277)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 277)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 277)											int this8 = this7->byteOffset;
HXDLIN( 277)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 277)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 277)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 277)										{
HXLINE( 277)											int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 277)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData10 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData11 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData12 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 277)										{
HXLINE( 277)											int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 277)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData13 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData14 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData15 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 277)										{
HXLINE( 277)											int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 277)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData16 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData17 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN( 277)										{
HXLINE( 277)											int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 277)											{
HXLINE( 277)												int destData18 = destData->byteOffset;
HXDLIN( 277)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 279)							srcPosition = (srcPosition + (int)4);
HXLINE( 280)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 285)		image->dirty = true;
HXLINE( 286)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_291_copyPixels)
HXLINE( 292)		bool _hx_tmp;
HXDLIN( 292)		bool _hx_tmp1;
HXDLIN( 292)		bool _hx_tmp2;
HXDLIN( 292)		bool _hx_tmp3;
HXDLIN( 292)		bool _hx_tmp4;
HXDLIN( 292)		bool _hx_tmp5;
HXDLIN( 292)		bool _hx_tmp6;
HXDLIN( 292)		bool _hx_tmp7;
HXDLIN( 292)		bool _hx_tmp8;
HXDLIN( 292)		bool _hx_tmp9;
HXDLIN( 292)		bool _hx_tmp10;
HXDLIN( 292)		if ((image->width == sourceImage->width)) {
HXLINE( 292)			_hx_tmp10 = (image->height == sourceImage->height);
            		}
            		else {
HXLINE( 292)			_hx_tmp10 = false;
            		}
HXDLIN( 292)		if (_hx_tmp10) {
HXLINE( 292)			_hx_tmp9 = (sourceRect->width == sourceImage->width);
            		}
            		else {
HXLINE( 292)			_hx_tmp9 = false;
            		}
HXDLIN( 292)		if (_hx_tmp9) {
HXLINE( 292)			_hx_tmp8 = (sourceRect->height == sourceImage->height);
            		}
            		else {
HXLINE( 292)			_hx_tmp8 = false;
            		}
HXDLIN( 292)		if (_hx_tmp8) {
HXLINE( 292)			_hx_tmp7 = (sourceRect->x == (int)0);
            		}
            		else {
HXLINE( 292)			_hx_tmp7 = false;
            		}
HXDLIN( 292)		if (_hx_tmp7) {
HXLINE( 292)			_hx_tmp6 = (sourceRect->y == (int)0);
            		}
            		else {
HXLINE( 292)			_hx_tmp6 = false;
            		}
HXDLIN( 292)		if (_hx_tmp6) {
HXLINE( 292)			_hx_tmp5 = (destPoint->x == (int)0);
            		}
            		else {
HXLINE( 292)			_hx_tmp5 = false;
            		}
HXDLIN( 292)		if (_hx_tmp5) {
HXLINE( 292)			_hx_tmp4 = (destPoint->y == (int)0);
            		}
            		else {
HXLINE( 292)			_hx_tmp4 = false;
            		}
HXDLIN( 292)		if (_hx_tmp4) {
HXLINE( 292)			_hx_tmp3 = hx::IsNull( alphaImage );
            		}
            		else {
HXLINE( 292)			_hx_tmp3 = false;
            		}
HXDLIN( 292)		if (_hx_tmp3) {
HXLINE( 292)			_hx_tmp2 = hx::IsNull( alphaPoint );
            		}
            		else {
HXLINE( 292)			_hx_tmp2 = false;
            		}
HXDLIN( 292)		if (_hx_tmp2) {
HXLINE( 292)			_hx_tmp1 = (mergeAlpha == false);
            		}
            		else {
HXLINE( 292)			_hx_tmp1 = false;
            		}
HXDLIN( 292)		if (_hx_tmp1) {
HXLINE( 303)			int _hx_tmp11 = image->get_format();
HXLINE( 292)			_hx_tmp = (_hx_tmp11 == sourceImage->get_format());
            		}
            		else {
HXLINE( 292)			_hx_tmp = false;
            		}
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 305)			 ::lime::utils::ArrayBufferView _this = image->buffer->data;
HXDLIN( 305)			 ::lime::utils::ArrayBufferView view = sourceImage->buffer->data;
HXDLIN( 305)			int offset = (int)0;
HXDLIN( 305)			if (hx::IsNotNull( view )) {
HXLINE( 305)				 ::haxe::io::Bytes _this1 = _this->buffer;
HXDLIN( 305)				_this1->blit((offset * _this->bytesPerElement),view->buffer,view->byteOffset,view->byteLength);
            			}
            			else {
HXLINE( 305)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
            		else {
HXLINE( 310)			if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 310)				::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_copy_pixels(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),hx::DynamicPtr(alphaImage),hx::DynamicPtr(alphaPoint),mergeAlpha);
            			}
            			else {
HXLINE( 314)				 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 315)				 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 317)				bool _hx_tmp12;
HXDLIN( 317)				if (hx::IsNotNull( sourceData )) {
HXLINE( 317)					_hx_tmp12 = hx::IsNull( destData );
            				}
            				else {
HXLINE( 317)					_hx_tmp12 = true;
            				}
HXDLIN( 317)				if (_hx_tmp12) {
HXLINE( 317)					return;
            				}
HXLINE( 319)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 320)				 ::lime::math::Rectangle destRect =  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height);
HXLINE( 321)				 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,destRect);
HXLINE( 323)				int sourceFormat = sourceImage->buffer->format;
HXLINE( 324)				int destFormat = image->buffer->format;
HXLINE( 326)				int sourcePosition;
HXDLIN( 326)				int destPosition;
HXLINE( 327)				Float sourceAlpha;
HXDLIN( 327)				Float destAlpha;
HXDLIN( 327)				Float oneMinusSourceAlpha;
HXDLIN( 327)				Float blendAlpha;
HXLINE( 328)				int sourcePixel;
HXDLIN( 328)				int destPixel;
HXLINE( 330)				bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 331)				bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 332)				int sourceBytesPerPixel = ::Std_obj::_hx_int(((Float)sourceImage->buffer->bitsPerPixel / (Float)(int)8));
HXLINE( 333)				int destBytesPerPixel = ::Std_obj::_hx_int(((Float)image->buffer->bitsPerPixel / (Float)(int)8));
HXLINE( 335)				bool useAlphaImage;
HXDLIN( 335)				if (hx::IsNotNull( alphaImage )) {
HXLINE( 335)					useAlphaImage = alphaImage->get_transparent();
            				}
            				else {
HXLINE( 335)					useAlphaImage = false;
            				}
HXLINE( 336)				bool blend;
HXDLIN( 336)				if (!(mergeAlpha)) {
HXLINE( 336)					if (useAlphaImage) {
HXLINE( 336)						blend = !(image->get_transparent());
            					}
            					else {
HXLINE( 336)						blend = false;
            					}
            				}
            				else {
HXLINE( 336)					blend = true;
            				}
HXLINE( 338)				if (!(useAlphaImage)) {
HXLINE( 340)					if (blend) {
HXLINE( 342)						int _g1 = (int)0;
HXDLIN( 342)						int _g = destView->height;
HXDLIN( 342)						while((_g1 < _g)){
HXLINE( 342)							_g1 = (_g1 + (int)1);
HXDLIN( 342)							int y = (_g1 - (int)1);
HXLINE( 344)							int sourceView1 = sourceView->byteOffset;
HXDLIN( 344)							sourcePosition = (sourceView1 + (sourceView->stride * y));
HXLINE( 345)							int destView1 = destView->byteOffset;
HXDLIN( 345)							destPosition = (destView1 + (destView->stride * y));
HXLINE( 347)							{
HXLINE( 347)								int _g3 = (int)0;
HXDLIN( 347)								int _g2 = destView->width;
HXDLIN( 347)								while((_g3 < _g2)){
HXLINE( 347)									_g3 = (_g3 + (int)1);
HXDLIN( 347)									int x = (_g3 - (int)1);
HXLINE( 349)									{
HXLINE( 349)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 349)												int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 349)												int sourceData1 = sourceData->byteOffset;
HXDLIN( 349)												int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 349)												int sourceData2 = sourceData->byteOffset;
HXDLIN( 349)												int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 349)												int sourceData3 = sourceData->byteOffset;
HXDLIN( 349)												sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 349)												int sourceData4 = sourceData->byteOffset;
HXDLIN( 349)												int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 349)												int sourceData5 = sourceData->byteOffset;
HXDLIN( 349)												int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 349)												int sourceData6 = sourceData->byteOffset;
HXDLIN( 349)												int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 349)												sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 349)												int sourceData7 = sourceData->byteOffset;
HXDLIN( 349)												int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 349)												int sourceData8 = sourceData->byteOffset;
HXDLIN( 349)												int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 349)												int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 349)												int sourceData9 = sourceData->byteOffset;
HXDLIN( 349)												sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 349)										if (sourcePremultiplied) {
HXLINE( 349)											bool _hx_tmp13;
HXDLIN( 349)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 349)												_hx_tmp13 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 349)												_hx_tmp13 = false;
            											}
HXDLIN( 349)											if (_hx_tmp13) {
HXLINE( 349)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 349)												{
HXLINE( 349)													 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 349)													int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 349)													 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 349)													int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 349)													 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 349)													sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 350)									{
HXLINE( 350)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 350)												int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 350)												int destData1 = destData->byteOffset;
HXDLIN( 350)												int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 350)												int destData2 = destData->byteOffset;
HXDLIN( 350)												int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 350)												int destData3 = destData->byteOffset;
HXDLIN( 350)												destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 350)												int destData4 = destData->byteOffset;
HXDLIN( 350)												int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 350)												int destData5 = destData->byteOffset;
HXDLIN( 350)												int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 350)												int destData6 = destData->byteOffset;
HXDLIN( 350)												int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 350)												destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 350)												int destData7 = destData->byteOffset;
HXDLIN( 350)												int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 350)												int destData8 = destData->byteOffset;
HXDLIN( 350)												int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 350)												int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 350)												int destData9 = destData->byteOffset;
HXDLIN( 350)												destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 350)										if (destPremultiplied) {
HXLINE( 350)											bool _hx_tmp14;
HXDLIN( 350)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 350)												_hx_tmp14 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 350)												_hx_tmp14 = false;
            											}
HXDLIN( 350)											if (_hx_tmp14) {
HXLINE( 350)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 350)												{
HXLINE( 350)													 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 350)													int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 350)													 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 350)													int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 350)													 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 350)													destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 352)									sourceAlpha = ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 353)									destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 354)									oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 355)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 357)									if ((blendAlpha == (int)0)) {
HXLINE( 359)										destPixel = (int)0;
            									}
            									else {
HXLINE( 363)										{
HXLINE( 363)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 363)											int value = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 363)											destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 366)										{
HXLINE( 366)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 366)											int value1 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 366)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 369)										{
HXLINE( 369)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 369)											int value2 = ((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 369)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 372)										{
HXLINE( 372)											 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 372)											int value3 = ((int)::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255);
HXDLIN( 372)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            										}
            									}
HXLINE( 375)									{
HXLINE( 375)										if (destPremultiplied) {
HXLINE( 375)											if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 375)												if ((destPixel != (int)0)) {
HXLINE( 375)													destPixel = (int)0;
            												}
            											}
            											else {
HXLINE( 375)												if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 375)													 ::lime::utils::ArrayBufferView this11 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 375)													int this12 = this11->byteOffset;
HXDLIN( 375)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this11->buffer->b,(this12 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 375)													destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
HXDLIN( 375)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 375)												{
HXLINE( 375)													int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 375)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData10 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            													}
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData11 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            													}
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData12 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            													}
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 375)												{
HXLINE( 375)													int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 375)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData13 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            													}
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData14 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            													}
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData15 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            													}
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 375)												{
HXLINE( 375)													int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 375)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData16 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            													}
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData17 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            													}
            												}
HXDLIN( 375)												{
HXLINE( 375)													int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 375)													{
HXLINE( 375)														int destData18 = destData->byteOffset;
HXDLIN( 375)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            													}
            												}
            											}
            											break;
            										}
            									}
HXLINE( 377)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 378)									destPosition = (destPosition + (int)4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 382)						bool _hx_tmp15;
HXDLIN( 382)						bool _hx_tmp16;
HXDLIN( 382)						if ((sourceFormat == destFormat)) {
HXLINE( 382)							_hx_tmp16 = (sourcePremultiplied == destPremultiplied);
            						}
            						else {
HXLINE( 382)							_hx_tmp16 = false;
            						}
HXDLIN( 382)						if (_hx_tmp16) {
HXLINE( 382)							_hx_tmp15 = (sourceBytesPerPixel == destBytesPerPixel);
            						}
            						else {
HXLINE( 382)							_hx_tmp15 = false;
            						}
HXDLIN( 382)						if (_hx_tmp15) {
HXLINE( 386)							int _g11 = (int)0;
HXDLIN( 386)							int _g4 = destView->height;
HXDLIN( 386)							while((_g11 < _g4)){
HXLINE( 386)								_g11 = (_g11 + (int)1);
HXDLIN( 386)								int y1 = (_g11 - (int)1);
HXLINE( 388)								int sourceView2 = sourceView->byteOffset;
HXDLIN( 388)								sourcePosition = (sourceView2 + (sourceView->stride * y1));
HXLINE( 389)								int destView2 = destView->byteOffset;
HXDLIN( 389)								destPosition = (destView2 + (destView->stride * y1));
HXLINE( 395)								 ::haxe::io::Bytes destData19 = destData->buffer;
HXDLIN( 395)								 ::haxe::io::Bytes sourceData10 = sourceData->buffer;
HXDLIN( 395)								destData19->blit(destPosition,sourceData10,sourcePosition,(destView->width * destBytesPerPixel));
            							}
            						}
            						else {
HXLINE( 401)							int _g12 = (int)0;
HXDLIN( 401)							int _g5 = destView->height;
HXDLIN( 401)							while((_g12 < _g5)){
HXLINE( 401)								_g12 = (_g12 + (int)1);
HXDLIN( 401)								int y2 = (_g12 - (int)1);
HXLINE( 403)								int sourceView3 = sourceView->byteOffset;
HXDLIN( 403)								sourcePosition = (sourceView3 + (sourceView->stride * y2));
HXLINE( 404)								int destView3 = destView->byteOffset;
HXDLIN( 404)								destPosition = (destView3 + (destView->stride * y2));
HXLINE( 406)								{
HXLINE( 406)									int _g31 = (int)0;
HXDLIN( 406)									int _g21 = destView->width;
HXDLIN( 406)									while((_g31 < _g21)){
HXLINE( 406)										_g31 = (_g31 + (int)1);
HXDLIN( 406)										int x1 = (_g31 - (int)1);
HXLINE( 408)										{
HXLINE( 408)											switch((int)(sourceFormat)){
            												case (int)0: {
HXLINE( 408)													int r8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 408)													int sourceData11 = sourceData->byteOffset;
HXDLIN( 408)													int g8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData11 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 408)													int sourceData12 = sourceData->byteOffset;
HXDLIN( 408)													int b6 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData12 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 408)													int sourceData13 = sourceData->byteOffset;
HXDLIN( 408)													sourcePixel = ((int)((int)((int)((int)((int)r8 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g8 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData13 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            												case (int)1: {
HXLINE( 408)													int sourceData14 = sourceData->byteOffset;
HXDLIN( 408)													int r9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData14 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 408)													int sourceData15 = sourceData->byteOffset;
HXDLIN( 408)													int g9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData15 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 408)													int sourceData16 = sourceData->byteOffset;
HXDLIN( 408)													int b7 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData16 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 408)													sourcePixel = ((int)((int)((int)((int)((int)r9 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g9 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b7 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            												case (int)2: {
HXLINE( 408)													int sourceData17 = sourceData->byteOffset;
HXDLIN( 408)													int r10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData17 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 408)													int sourceData18 = sourceData->byteOffset;
HXDLIN( 408)													int g10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData18 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 408)													int b8 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 408)													int sourceData19 = sourceData->byteOffset;
HXDLIN( 408)													sourcePixel = ((int)((int)((int)((int)((int)r10 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g10 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b8 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData19 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            												}
            												break;
            											}
HXDLIN( 408)											if (sourcePremultiplied) {
HXLINE( 408)												bool _hx_tmp17;
HXDLIN( 408)												if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 408)													_hx_tmp17 = (((int)sourcePixel & (int)(int)255) != (int)255);
            												}
            												else {
HXLINE( 408)													_hx_tmp17 = false;
            												}
HXDLIN( 408)												if (_hx_tmp17) {
HXLINE( 408)													::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 408)													{
HXLINE( 408)														 ::lime::utils::ArrayBufferView this13 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														int r11 = ((int)::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 408)														 ::lime::utils::ArrayBufferView this14 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														int g11 = ((int)::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 408)														 ::lime::utils::ArrayBufferView this15 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 408)														sourcePixel = ((int)((int)((int)((int)((int)r11 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g11 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this15->buffer->b,(this15->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
            										}
HXLINE( 409)										{
HXLINE( 409)											if (destPremultiplied) {
HXLINE( 409)												if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 409)													if ((sourcePixel != (int)0)) {
HXLINE( 409)														sourcePixel = (int)0;
            													}
            												}
            												else {
HXLINE( 409)													if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 409)														 ::lime::utils::ArrayBufferView this16 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 409)														int this17 = this16->byteOffset;
HXDLIN( 409)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this16->buffer->b,(this17 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 409)														sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
HXDLIN( 409)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 409)													{
HXLINE( 409)														int val12 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 409)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val13 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData20 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData20 + (destPosition + (int)1)),val13);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val14 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData21 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData21 + (destPosition + (int)2)),val14);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val15 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData22 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData22 + (destPosition + (int)3)),val15);
            														}
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 409)													{
HXLINE( 409)														int val16 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 409)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val17 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData23 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData23 + (destPosition + (int)1)),val17);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val18 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData24 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData24 + (destPosition + (int)2)),val18);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val19 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData25 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData25 + (destPosition + (int)3)),val19);
            														}
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 409)													{
HXLINE( 409)														int val20 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 409)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val21 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData26 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData26 + (destPosition + (int)1)),val21);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val22 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData27 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData27 + (destPosition + (int)2)),val22);
            														}
            													}
HXDLIN( 409)													{
HXLINE( 409)														int val23 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 409)														{
HXLINE( 409)															int destData28 = destData->byteOffset;
HXDLIN( 409)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData28 + (destPosition + (int)3)),val23);
            														}
            													}
            												}
            												break;
            											}
            										}
HXLINE( 411)										sourcePosition = (sourcePosition + (int)4);
HXLINE( 412)										destPosition = (destPosition + (int)4);
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 419)					if (hx::IsNull( alphaPoint )) {
HXLINE( 419)						alphaPoint =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            					}
HXLINE( 421)					 ::lime::utils::ArrayBufferView alphaData = alphaImage->buffer->data;
HXLINE( 422)					int alphaFormat = alphaImage->buffer->format;
HXLINE( 423)					int alphaPosition;
HXDLIN( 423)					int alphaPixel;
HXLINE( 425)					 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView alphaView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,alphaPoint->x,alphaPoint->y,alphaImage->width,alphaImage->height));
HXLINE( 427)					int _hx_tmp18 = ::Std_obj::_hx_int(destPoint->x);
HXDLIN( 427)					int _hx_tmp19 = ::Std_obj::_hx_int(destPoint->y);
HXDLIN( 427)					destView->clip(_hx_tmp18,_hx_tmp19,alphaView->width,alphaView->height);
HXLINE( 429)					if (blend) {
HXLINE( 431)						int _g13 = (int)0;
HXDLIN( 431)						int _g6 = destView->height;
HXDLIN( 431)						while((_g13 < _g6)){
HXLINE( 431)							_g13 = (_g13 + (int)1);
HXDLIN( 431)							int y3 = (_g13 - (int)1);
HXLINE( 433)							int sourceView4 = sourceView->byteOffset;
HXDLIN( 433)							sourcePosition = (sourceView4 + (sourceView->stride * y3));
HXLINE( 434)							int destView4 = destView->byteOffset;
HXDLIN( 434)							destPosition = (destView4 + (destView->stride * y3));
HXLINE( 435)							int alphaView1 = alphaView->byteOffset;
HXDLIN( 435)							alphaPosition = (alphaView1 + (alphaView->stride * y3));
HXLINE( 437)							{
HXLINE( 437)								int _g32 = (int)0;
HXDLIN( 437)								int _g22 = destView->width;
HXDLIN( 437)								while((_g32 < _g22)){
HXLINE( 437)									_g32 = (_g32 + (int)1);
HXDLIN( 437)									int x2 = (_g32 - (int)1);
HXLINE( 439)									{
HXLINE( 439)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 439)												int r12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 439)												int sourceData20 = sourceData->byteOffset;
HXDLIN( 439)												int g12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData20 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 439)												int sourceData21 = sourceData->byteOffset;
HXDLIN( 439)												int b9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData21 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 439)												int sourceData22 = sourceData->byteOffset;
HXDLIN( 439)												sourcePixel = ((int)((int)((int)((int)((int)r12 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g12 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b9 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData22 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 439)												int sourceData23 = sourceData->byteOffset;
HXDLIN( 439)												int r13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData23 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 439)												int sourceData24 = sourceData->byteOffset;
HXDLIN( 439)												int g13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData24 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 439)												int sourceData25 = sourceData->byteOffset;
HXDLIN( 439)												int b10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData25 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 439)												sourcePixel = ((int)((int)((int)((int)((int)r13 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g13 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b10 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 439)												int sourceData26 = sourceData->byteOffset;
HXDLIN( 439)												int r14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData26 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 439)												int sourceData27 = sourceData->byteOffset;
HXDLIN( 439)												int g14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData27 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 439)												int b11 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 439)												int sourceData28 = sourceData->byteOffset;
HXDLIN( 439)												sourcePixel = ((int)((int)((int)((int)((int)r14 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g14 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b11 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData28 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 439)										if (sourcePremultiplied) {
HXLINE( 439)											bool _hx_tmp20;
HXDLIN( 439)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 439)												_hx_tmp20 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 439)												_hx_tmp20 = false;
            											}
HXDLIN( 439)											if (_hx_tmp20) {
HXLINE( 439)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 439)												{
HXLINE( 439)													 ::lime::utils::ArrayBufferView this18 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 439)													int r15 = ((int)::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 439)													 ::lime::utils::ArrayBufferView this19 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 439)													int g15 = ((int)::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 439)													 ::lime::utils::ArrayBufferView this20 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 439)													sourcePixel = ((int)((int)((int)((int)((int)r15 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g15 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 440)									{
HXLINE( 440)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 440)												int r16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 440)												int destData29 = destData->byteOffset;
HXDLIN( 440)												int g16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData29 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 440)												int destData30 = destData->byteOffset;
HXDLIN( 440)												int b12 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData30 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 440)												int destData31 = destData->byteOffset;
HXDLIN( 440)												destPixel = ((int)((int)((int)((int)((int)r16 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g16 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b12 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData31 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 440)												int destData32 = destData->byteOffset;
HXDLIN( 440)												int r17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData32 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 440)												int destData33 = destData->byteOffset;
HXDLIN( 440)												int g17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData33 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 440)												int destData34 = destData->byteOffset;
HXDLIN( 440)												int b13 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData34 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 440)												destPixel = ((int)((int)((int)((int)((int)r17 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g17 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b13 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 440)												int destData35 = destData->byteOffset;
HXDLIN( 440)												int r18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData35 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 440)												int destData36 = destData->byteOffset;
HXDLIN( 440)												int g18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData36 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 440)												int b14 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 440)												int destData37 = destData->byteOffset;
HXDLIN( 440)												destPixel = ((int)((int)((int)((int)((int)r18 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g18 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b14 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData37 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 440)										if (destPremultiplied) {
HXLINE( 440)											bool _hx_tmp21;
HXDLIN( 440)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 440)												_hx_tmp21 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 440)												_hx_tmp21 = false;
            											}
HXDLIN( 440)											if (_hx_tmp21) {
HXLINE( 440)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 440)												{
HXLINE( 440)													 ::lime::utils::ArrayBufferView this21 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 440)													int r19 = ((int)::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 440)													 ::lime::utils::ArrayBufferView this22 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 440)													int g19 = ((int)::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 440)													 ::lime::utils::ArrayBufferView this23 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 440)													destPixel = ((int)((int)((int)((int)((int)r19 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g19 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 441)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 441)											int r20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 441)											int alphaData1 = alphaData->byteOffset;
HXDLIN( 441)											int g20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData1 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 441)											int alphaData2 = alphaData->byteOffset;
HXDLIN( 441)											int b15 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData2 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 441)											int alphaData3 = alphaData->byteOffset;
HXDLIN( 441)											alphaPixel = ((int)((int)((int)((int)((int)r20 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g20 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b15 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData3 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 441)											int alphaData4 = alphaData->byteOffset;
HXDLIN( 441)											int r21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData4 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 441)											int alphaData5 = alphaData->byteOffset;
HXDLIN( 441)											int g21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData5 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 441)											int alphaData6 = alphaData->byteOffset;
HXDLIN( 441)											int b16 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData6 + (alphaPosition + (int)3))) & (int)(int)255);
HXDLIN( 441)											alphaPixel = ((int)((int)((int)((int)((int)r21 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g21 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b16 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 441)											int alphaData7 = alphaData->byteOffset;
HXDLIN( 441)											int r22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData7 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 441)											int alphaData8 = alphaData->byteOffset;
HXDLIN( 441)											int g22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData8 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 441)											int b17 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 441)											int alphaData9 = alphaData->byteOffset;
HXDLIN( 441)											alphaPixel = ((int)((int)((int)((int)((int)r22 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g22 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b17 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData9 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXLINE( 443)									sourceAlpha = (((Float)((int)alphaPixel & (int)(int)255) / (Float)((Float)255.0)) * ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0)));
HXLINE( 445)									if ((sourceAlpha > (int)0)) {
HXLINE( 447)										destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 448)										oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 449)										blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 451)										{
HXLINE( 451)											 ::lime::utils::ArrayBufferView this24 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 451)											int value4 = ((int)::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 451)											destPixel = ((int)((int)((int)((int)((int)value4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 454)										{
HXLINE( 454)											 ::lime::utils::ArrayBufferView this25 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 454)											int value5 = ((int)::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 454)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 457)										{
HXLINE( 457)											 ::lime::utils::ArrayBufferView this26 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 457)											int value6 = ((int)::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 457)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 460)										{
HXLINE( 460)											 ::lime::utils::ArrayBufferView this27 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 460)											int value7 = ((int)::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255);
HXDLIN( 460)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value7 & (int)(int)255));
            										}
HXLINE( 462)										{
HXLINE( 462)											if (destPremultiplied) {
HXLINE( 462)												if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 462)													if ((destPixel != (int)0)) {
HXLINE( 462)														destPixel = (int)0;
            													}
            												}
            												else {
HXLINE( 462)													if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 462)														 ::lime::utils::ArrayBufferView this28 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 462)														int this29 = this28->byteOffset;
HXDLIN( 462)														::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this28->buffer->b,(this29 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 462)														destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            													}
            												}
            											}
HXDLIN( 462)											switch((int)(destFormat)){
            												case (int)0: {
HXLINE( 462)													{
HXLINE( 462)														int val24 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 462)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val24);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val25 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData38 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData38 + (destPosition + (int)1)),val25);
            														}
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val26 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData39 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData39 + (destPosition + (int)2)),val26);
            														}
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val27 = ((int)destPixel & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData40 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData40 + (destPosition + (int)3)),val27);
            														}
            													}
            												}
            												break;
            												case (int)1: {
HXLINE( 462)													{
HXLINE( 462)														int val28 = ((int)destPixel & (int)(int)255);
HXDLIN( 462)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val28);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val29 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData41 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData41 + (destPosition + (int)1)),val29);
            														}
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val30 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData42 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData42 + (destPosition + (int)2)),val30);
            														}
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val31 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData43 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData43 + (destPosition + (int)3)),val31);
            														}
            													}
            												}
            												break;
            												case (int)2: {
HXLINE( 462)													{
HXLINE( 462)														int val32 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 462)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val32);
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val33 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData44 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData44 + (destPosition + (int)1)),val33);
            														}
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val34 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData45 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData45 + (destPosition + (int)2)),val34);
            														}
            													}
HXDLIN( 462)													{
HXLINE( 462)														int val35 = ((int)destPixel & (int)(int)255);
HXDLIN( 462)														{
HXLINE( 462)															int destData46 = destData->byteOffset;
HXDLIN( 462)															::__hxcpp_memory_set_byte(destData->buffer->b,(destData46 + (destPosition + (int)3)),val35);
            														}
            													}
            												}
            												break;
            											}
            										}
            									}
HXLINE( 465)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 466)									destPosition = (destPosition + (int)4);
HXLINE( 467)									alphaPosition = (alphaPosition + (int)4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 473)						int _g14 = (int)0;
HXDLIN( 473)						int _g7 = destView->height;
HXDLIN( 473)						while((_g14 < _g7)){
HXLINE( 473)							_g14 = (_g14 + (int)1);
HXDLIN( 473)							int y4 = (_g14 - (int)1);
HXLINE( 475)							int sourceView5 = sourceView->byteOffset;
HXDLIN( 475)							sourcePosition = (sourceView5 + (sourceView->stride * y4));
HXLINE( 476)							int destView5 = destView->byteOffset;
HXDLIN( 476)							destPosition = (destView5 + (destView->stride * y4));
HXLINE( 477)							int alphaView2 = alphaView->byteOffset;
HXDLIN( 477)							alphaPosition = (alphaView2 + (alphaView->stride * y4));
HXLINE( 479)							{
HXLINE( 479)								int _g33 = (int)0;
HXDLIN( 479)								int _g23 = destView->width;
HXDLIN( 479)								while((_g33 < _g23)){
HXLINE( 479)									_g33 = (_g33 + (int)1);
HXDLIN( 479)									int x3 = (_g33 - (int)1);
HXLINE( 481)									{
HXLINE( 481)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 481)												int r23 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 481)												int sourceData29 = sourceData->byteOffset;
HXDLIN( 481)												int g23 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData29 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 481)												int sourceData30 = sourceData->byteOffset;
HXDLIN( 481)												int b18 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData30 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 481)												int sourceData31 = sourceData->byteOffset;
HXDLIN( 481)												sourcePixel = ((int)((int)((int)((int)((int)r23 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g23 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b18 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData31 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 481)												int sourceData32 = sourceData->byteOffset;
HXDLIN( 481)												int r24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData32 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 481)												int sourceData33 = sourceData->byteOffset;
HXDLIN( 481)												int g24 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData33 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 481)												int sourceData34 = sourceData->byteOffset;
HXDLIN( 481)												int b19 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData34 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 481)												sourcePixel = ((int)((int)((int)((int)((int)r24 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g24 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b19 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 481)												int sourceData35 = sourceData->byteOffset;
HXDLIN( 481)												int r25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData35 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 481)												int sourceData36 = sourceData->byteOffset;
HXDLIN( 481)												int g25 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData36 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 481)												int b20 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 481)												int sourceData37 = sourceData->byteOffset;
HXDLIN( 481)												sourcePixel = ((int)((int)((int)((int)((int)r25 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g25 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b20 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData37 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 481)										if (sourcePremultiplied) {
HXLINE( 481)											bool _hx_tmp22;
HXDLIN( 481)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 481)												_hx_tmp22 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 481)												_hx_tmp22 = false;
            											}
HXDLIN( 481)											if (_hx_tmp22) {
HXLINE( 481)												::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 481)												{
HXLINE( 481)													 ::lime::utils::ArrayBufferView this30 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 481)													int r26 = ((int)::__hxcpp_memory_get_byte(this30->buffer->b,(this30->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 481)													 ::lime::utils::ArrayBufferView this31 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 481)													int g26 = ((int)::__hxcpp_memory_get_byte(this31->buffer->b,(this31->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 481)													 ::lime::utils::ArrayBufferView this32 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 481)													sourcePixel = ((int)((int)((int)((int)((int)r26 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g26 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this32->buffer->b,(this32->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 482)									switch((int)(alphaFormat)){
            										case (int)0: {
HXLINE( 482)											int r27 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 482)											int alphaData10 = alphaData->byteOffset;
HXDLIN( 482)											int g27 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData10 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 482)											int alphaData11 = alphaData->byteOffset;
HXDLIN( 482)											int b21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData11 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 482)											int alphaData12 = alphaData->byteOffset;
HXDLIN( 482)											alphaPixel = ((int)((int)((int)((int)((int)r27 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g27 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b21 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData12 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 482)											int alphaData13 = alphaData->byteOffset;
HXDLIN( 482)											int r28 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData13 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 482)											int alphaData14 = alphaData->byteOffset;
HXDLIN( 482)											int g28 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData14 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 482)											int alphaData15 = alphaData->byteOffset;
HXDLIN( 482)											int b22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData15 + (alphaPosition + (int)3))) & (int)(int)255);
HXDLIN( 482)											alphaPixel = ((int)((int)((int)((int)((int)r28 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g28 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b22 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 482)											int alphaData16 = alphaData->byteOffset;
HXDLIN( 482)											int r29 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData16 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 482)											int alphaData17 = alphaData->byteOffset;
HXDLIN( 482)											int g29 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData17 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 482)											int b23 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 482)											int alphaData18 = alphaData->byteOffset;
HXDLIN( 482)											alphaPixel = ((int)((int)((int)((int)((int)r29 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g29 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b23 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData18 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXLINE( 484)									{
HXLINE( 484)										int value8 = ::Math_obj::round((((int)sourcePixel & (int)(int)255) * ((Float)((int)alphaPixel & (int)(int)255) / (Float)(int)255)));
HXDLIN( 484)										sourcePixel = ((int)((int)((int)((int)((int)((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value8 & (int)(int)255));
            									}
HXLINE( 485)									{
HXLINE( 485)										if (destPremultiplied) {
HXLINE( 485)											if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 485)												if ((sourcePixel != (int)0)) {
HXLINE( 485)													sourcePixel = (int)0;
            												}
            											}
            											else {
HXLINE( 485)												if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 485)													 ::lime::utils::ArrayBufferView this33 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 485)													int this34 = this33->byteOffset;
HXDLIN( 485)													::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this33->buffer->b,(this34 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 485)													sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
HXDLIN( 485)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 485)												{
HXLINE( 485)													int val36 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 485)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val36);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val37 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData47 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData47 + (destPosition + (int)1)),val37);
            													}
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val38 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData48 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData48 + (destPosition + (int)2)),val38);
            													}
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val39 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData49 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData49 + (destPosition + (int)3)),val39);
            													}
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 485)												{
HXLINE( 485)													int val40 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 485)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val40);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val41 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData50 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData50 + (destPosition + (int)1)),val41);
            													}
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val42 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData51 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData51 + (destPosition + (int)2)),val42);
            													}
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val43 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData52 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData52 + (destPosition + (int)3)),val43);
            													}
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 485)												{
HXLINE( 485)													int val44 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 485)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val44);
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val45 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData53 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData53 + (destPosition + (int)1)),val45);
            													}
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val46 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData54 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData54 + (destPosition + (int)2)),val46);
            													}
            												}
HXDLIN( 485)												{
HXLINE( 485)													int val47 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 485)													{
HXLINE( 485)														int destData55 = destData->byteOffset;
HXDLIN( 485)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData55 + (destPosition + (int)3)),val47);
            													}
            												}
            											}
            											break;
            										}
            									}
HXLINE( 487)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 488)									destPosition = (destPosition + (int)4);
HXLINE( 489)									alphaPosition = (alphaPosition + (int)4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 497)		image->dirty = true;
HXLINE( 498)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_502_fillRect)
HXLINE( 503)		int fillColor;
HXLINE( 505)		switch((int)(format)){
            			case (int)1: {
HXLINE( 508)				int argb = color;
HXDLIN( 508)				int this1 = (int)0;
HXDLIN( 508)				int rgba = this1;
HXDLIN( 508)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 508)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 510)				int bgra = color;
HXDLIN( 510)				int this2 = (int)0;
HXDLIN( 510)				int rgba1 = this2;
HXDLIN( 510)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 510)				fillColor = rgba1;
            			}
            			break;
            			default:{
HXLINE( 512)				fillColor = color;
            			}
            		}
HXLINE( 515)		if (!(image->get_transparent())) {
HXLINE( 517)			fillColor = ((int)((int)((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 520)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 521)		if (hx::IsNull( data )) {
HXLINE( 521)			return;
            		}
HXLINE( 524)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 524)			 ::Dynamic _hx_tmp = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN( 524)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_fill_rect(hx::DynamicPtr(image),hx::DynamicPtr(rect),((int)((int)fillColor >> (int)(int)16) & (int)(int)65535),((int)fillColor & (int)(int)65535));
            		}
            		else {
HXLINE( 529)			int format1 = image->buffer->format;
HXLINE( 530)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 531)			if (premultiplied) {
HXLINE( 531)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 531)					if ((fillColor != (int)0)) {
HXLINE( 531)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 531)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 531)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 531)						int this4 = this3->byteOffset;
HXDLIN( 531)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 531)						fillColor = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXLINE( 533)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 534)			int row;
HXLINE( 536)			{
HXLINE( 536)				int _g1 = (int)0;
HXDLIN( 536)				int _g = dataView->height;
HXDLIN( 536)				while((_g1 < _g)){
HXLINE( 536)					_g1 = (_g1 + (int)1);
HXDLIN( 536)					int y = (_g1 - (int)1);
HXLINE( 538)					int dataView1 = dataView->byteOffset;
HXDLIN( 538)					row = (dataView1 + (dataView->stride * y));
HXLINE( 540)					{
HXLINE( 540)						int _g3 = (int)0;
HXDLIN( 540)						int _g2 = dataView->width;
HXDLIN( 540)						while((_g3 < _g2)){
HXLINE( 540)							_g3 = (_g3 + (int)1);
HXDLIN( 540)							int x = (_g3 - (int)1);
HXLINE( 542)							{
HXLINE( 542)								int offset = (row + (x * (int)4));
HXDLIN( 542)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 542)										{
HXLINE( 542)											int val = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 542)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val1 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data1 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val2 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data2 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val3 = ((int)fillColor & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data3 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 542)										{
HXLINE( 542)											int val4 = ((int)fillColor & (int)(int)255);
HXDLIN( 542)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val5 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data4 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val6 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data5 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val7 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data6 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 542)										{
HXLINE( 542)											int val8 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 542)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val9 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data7 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val10 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data8 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN( 542)										{
HXLINE( 542)											int val11 = ((int)fillColor & (int)(int)255);
HXDLIN( 542)											{
HXLINE( 542)												int data9 = data->byteOffset;
HXDLIN( 542)												::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 547)		image->dirty = true;
HXLINE( 548)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

void ImageDataUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_552_floodFill)
HXLINE( 553)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 554)		if (hx::IsNull( data )) {
HXLINE( 554)			return;
            		}
HXLINE( 556)		if ((format == (int)1)) {
HXLINE( 556)			color = ((int)((int)((int)color & (int)(int)16777215) << (int)(int)8) | (int)((int)((int)color >> (int)(int)24) & (int)(int)255));
            		}
HXLINE( 559)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 559)			 ::Dynamic _hx_tmp = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN( 559)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_flood_fill(hx::DynamicPtr(image),x,y,((int)((int)color >> (int)(int)16) & (int)(int)65535),((int)color & (int)(int)65535));
            		}
            		else {
HXLINE( 564)			int format1 = image->buffer->format;
HXLINE( 565)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 567)			int fillColor = color;
HXLINE( 569)			int hitColor;
HXLINE( 570)			{
HXLINE( 570)				int offset = (y + image->offsetY);
HXDLIN( 570)				int offset1 = (offset * (image->buffer->width * (int)4));
HXDLIN( 570)				int offset2 = (offset1 + ((x + image->offsetX) * (int)4));
HXDLIN( 570)				switch((int)(format1)){
            					case (int)0: {
HXLINE( 570)						int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255);
HXDLIN( 570)						int data1 = data->byteOffset;
HXDLIN( 570)						int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 570)						int data2 = data->byteOffset;
HXDLIN( 570)						int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 570)						int data3 = data->byteOffset;
HXDLIN( 570)						hitColor = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset2 + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)1: {
HXLINE( 570)						int data4 = data->byteOffset;
HXDLIN( 570)						int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 570)						int data5 = data->byteOffset;
HXDLIN( 570)						int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 570)						int data6 = data->byteOffset;
HXDLIN( 570)						int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset2 + (int)3))) & (int)(int)255);
HXDLIN( 570)						hitColor = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)2: {
HXLINE( 570)						int data7 = data->byteOffset;
HXDLIN( 570)						int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 570)						int data8 = data->byteOffset;
HXDLIN( 570)						int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 570)						int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255);
HXDLIN( 570)						int data9 = data->byteOffset;
HXDLIN( 570)						hitColor = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset2 + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            				}
HXDLIN( 570)				if (premultiplied) {
HXLINE( 570)					bool _hx_tmp1;
HXDLIN( 570)					if ((((int)hitColor & (int)(int)255) != (int)0)) {
HXLINE( 570)						_hx_tmp1 = (((int)hitColor & (int)(int)255) != (int)255);
            					}
            					else {
HXLINE( 570)						_hx_tmp1 = false;
            					}
HXDLIN( 570)					if (_hx_tmp1) {
HXLINE( 570)						::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)hitColor & (int)(int)255));
HXDLIN( 570)						{
HXLINE( 570)							 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 570)							int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 570)							 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 570)							int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 570)							 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 570)							hitColor = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hitColor & (int)(int)255) & (int)(int)255));
            						}
            					}
            				}
            			}
HXLINE( 572)			if (!(image->get_transparent())) {
HXLINE( 574)				fillColor = ((int)((int)((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 575)				hitColor = ((int)((int)((int)((int)((int)((int)hx::UShr(hitColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(hitColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(hitColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            			}
HXLINE( 578)			if ((fillColor == hitColor)) {
HXLINE( 578)				return;
            			}
HXLINE( 580)			if (premultiplied) {
HXLINE( 580)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 580)					if ((fillColor != (int)0)) {
HXLINE( 580)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 580)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 580)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 580)						int this5 = this4->byteOffset;
HXDLIN( 580)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 580)						fillColor = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXLINE( 582)			::Array< int > dx = ::Array_obj< int >::fromData( _hx_array_data_0eb0fdcf_29,4);
HXLINE( 583)			::Array< int > dy = ::Array_obj< int >::fromData( _hx_array_data_0eb0fdcf_30,4);
HXLINE( 585)			int minX = -(image->offsetX);
HXLINE( 586)			int minY = -(image->offsetY);
HXLINE( 587)			int maxX = (minX + image->width);
HXLINE( 588)			int maxY = (minY + image->height);
HXLINE( 590)			::Array< int > queue = ::Array_obj< int >::__new();
HXLINE( 591)			queue->push(x);
HXLINE( 592)			queue->push(y);
HXLINE( 594)			 ::Dynamic curPointX;
HXDLIN( 594)			 ::Dynamic curPointY;
HXDLIN( 594)			int nextPointX;
HXDLIN( 594)			int nextPointY;
HXDLIN( 594)			int nextPointOffset;
HXDLIN( 594)			int readColor;
HXLINE( 596)			while((queue->length > (int)0)){
HXLINE( 598)				curPointY = queue->pop();
HXLINE( 599)				curPointX = queue->pop();
HXLINE( 601)				{
HXLINE( 601)					int _g = (int)0;
HXDLIN( 601)					while((_g < (int)4)){
HXLINE( 601)						_g = (_g + (int)1);
HXDLIN( 601)						int i = (_g - (int)1);
HXLINE( 603)						nextPointX = (curPointX + dx->__get(i));
HXLINE( 604)						nextPointY = (curPointY + dy->__get(i));
HXLINE( 606)						bool _hx_tmp2;
HXDLIN( 606)						bool _hx_tmp3;
HXDLIN( 606)						bool _hx_tmp4;
HXDLIN( 606)						if ((nextPointX >= minX)) {
HXLINE( 606)							_hx_tmp4 = (nextPointY < minY);
            						}
            						else {
HXLINE( 606)							_hx_tmp4 = true;
            						}
HXDLIN( 606)						if (!(_hx_tmp4)) {
HXLINE( 606)							_hx_tmp3 = (nextPointX >= maxX);
            						}
            						else {
HXLINE( 606)							_hx_tmp3 = true;
            						}
HXDLIN( 606)						if (!(_hx_tmp3)) {
HXLINE( 606)							_hx_tmp2 = (nextPointY >= maxY);
            						}
            						else {
HXLINE( 606)							_hx_tmp2 = true;
            						}
HXDLIN( 606)						if (_hx_tmp2) {
HXLINE( 608)							continue;
            						}
HXLINE( 611)						nextPointOffset = (((nextPointY * image->width) + nextPointX) * (int)4);
HXLINE( 612)						{
HXLINE( 612)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 612)									int r4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 612)									int data10 = data->byteOffset;
HXDLIN( 612)									int g4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data10 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 612)									int data11 = data->byteOffset;
HXDLIN( 612)									int b3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data11 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 612)									int data12 = data->byteOffset;
HXDLIN( 612)									readColor = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data12 + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 612)									int data13 = data->byteOffset;
HXDLIN( 612)									int r5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data13 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 612)									int data14 = data->byteOffset;
HXDLIN( 612)									int g5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data14 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 612)									int data15 = data->byteOffset;
HXDLIN( 612)									int b4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data15 + (nextPointOffset + (int)3))) & (int)(int)255);
HXDLIN( 612)									readColor = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 612)									int data16 = data->byteOffset;
HXDLIN( 612)									int r6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data16 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 612)									int data17 = data->byteOffset;
HXDLIN( 612)									int g6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data17 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 612)									int b5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 612)									int data18 = data->byteOffset;
HXDLIN( 612)									readColor = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data18 + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 612)							if (premultiplied) {
HXLINE( 612)								bool _hx_tmp5;
HXDLIN( 612)								if ((((int)readColor & (int)(int)255) != (int)0)) {
HXLINE( 612)									_hx_tmp5 = (((int)readColor & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 612)									_hx_tmp5 = false;
            								}
HXDLIN( 612)								if (_hx_tmp5) {
HXLINE( 612)									::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)readColor & (int)(int)255));
HXDLIN( 612)									{
HXLINE( 612)										 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 612)										int r7 = ((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 612)										 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 612)										int g7 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 612)										 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 612)										readColor = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)readColor & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 614)						if ((readColor == hitColor)) {
HXLINE( 616)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 616)									{
HXLINE( 616)										int val = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 616)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val1 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data19 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data19 + (nextPointOffset + (int)1)),val1);
            										}
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val2 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data20 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data20 + (nextPointOffset + (int)2)),val2);
            										}
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val3 = ((int)fillColor & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data21 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data21 + (nextPointOffset + (int)3)),val3);
            										}
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 616)									{
HXLINE( 616)										int val4 = ((int)fillColor & (int)(int)255);
HXDLIN( 616)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val4);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val5 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data22 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data22 + (nextPointOffset + (int)1)),val5);
            										}
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val6 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data23 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data23 + (nextPointOffset + (int)2)),val6);
            										}
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val7 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data24 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data24 + (nextPointOffset + (int)3)),val7);
            										}
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 616)									{
HXLINE( 616)										int val8 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 616)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val8);
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val9 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data25 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data25 + (nextPointOffset + (int)1)),val9);
            										}
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val10 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data26 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data26 + (nextPointOffset + (int)2)),val10);
            										}
            									}
HXDLIN( 616)									{
HXLINE( 616)										int val11 = ((int)fillColor & (int)(int)255);
HXDLIN( 616)										{
HXLINE( 616)											int data27 = data->byteOffset;
HXDLIN( 616)											::__hxcpp_memory_set_byte(data->buffer->b,(data27 + (nextPointOffset + (int)3)),val11);
            										}
            									}
            								}
            								break;
            							}
HXLINE( 618)							queue->push(nextPointX);
HXLINE( 619)							queue->push(nextPointY);
            						}
            					}
            				}
            			}
            		}
HXLINE( 625)		image->dirty = true;
HXLINE( 626)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,floodFill,(void))

 ::lime::graphics::Image ImageDataUtil_obj::gaussianBlur( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< int >  __o_quality,hx::Null< Float >  __o_strength, ::Dynamic color){
Float blurX = __o_blurX.Default(4);
Float blurY = __o_blurY.Default(4);
int quality = __o_quality.Default(1);
Float strength = __o_strength.Default(1);
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_631_gaussianBlur)
HXLINE( 635)		bool imagePremultiplied = image->get_premultiplied();
HXLINE( 636)		if (imagePremultiplied) {
HXLINE( 636)			image->set_premultiplied(false);
            		}
HXLINE( 646)		::lime::_internal::graphics::StackBlur_obj::blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
HXLINE( 648)		image->dirty = true;
HXLINE( 649)		image->version++;
HXLINE( 651)		if (imagePremultiplied) {
HXLINE( 651)			image->set_premultiplied(true);
            		}
HXLINE( 653)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(ImageDataUtil_obj,gaussianBlur,return )

 ::lime::math::Rectangle ImageDataUtil_obj::getColorBoundsRect( ::lime::graphics::Image image,int mask,int color,bool findColor,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_657_getColorBoundsRect)
HXLINE( 658)		int left = (image->width + (int)1);
HXLINE( 659)		int right = (int)0;
HXLINE( 660)		int top = (image->height + (int)1);
HXLINE( 661)		int bottom = (int)0;
HXLINE( 663)		int _color;
HXDLIN( 663)		int _mask;
HXLINE( 665)		switch((int)(format)){
            			case (int)1: {
HXLINE( 668)				int argb = color;
HXDLIN( 668)				int this1 = (int)0;
HXDLIN( 668)				int rgba = this1;
HXDLIN( 668)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 668)				_color = rgba;
HXLINE( 669)				int argb1 = mask;
HXDLIN( 669)				int this2 = (int)0;
HXDLIN( 669)				int rgba1 = this2;
HXDLIN( 669)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 669)				_mask = rgba1;
            			}
            			break;
            			case (int)2: {
HXLINE( 672)				int bgra = color;
HXDLIN( 672)				int this3 = (int)0;
HXDLIN( 672)				int rgba2 = this3;
HXDLIN( 672)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 672)				_color = rgba2;
HXLINE( 673)				int bgra1 = mask;
HXDLIN( 673)				int this4 = (int)0;
HXDLIN( 673)				int rgba3 = this4;
HXDLIN( 673)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN( 673)				_mask = rgba3;
            			}
            			break;
            			default:{
HXLINE( 676)				_color = color;
HXLINE( 677)				_mask = mask;
            			}
            		}
HXLINE( 680)		if (!(image->get_transparent())) {
HXLINE( 682)			_color = ((int)((int)((int)((int)((int)((int)hx::UShr(_color,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(_color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 683)			_mask = ((int)((int)((int)((int)((int)((int)hx::UShr(_mask,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_mask,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(_mask,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 686)		int pixel;
HXDLIN( 686)		bool hit;
HXLINE( 688)		{
HXLINE( 688)			int _g1 = (int)0;
HXDLIN( 688)			int _g = image->width;
HXDLIN( 688)			while((_g1 < _g)){
HXLINE( 688)				_g1 = (_g1 + (int)1);
HXDLIN( 688)				int x = (_g1 - (int)1);
HXLINE( 690)				hit = false;
HXLINE( 692)				{
HXLINE( 692)					int _g3 = (int)0;
HXDLIN( 692)					int _g2 = image->height;
HXDLIN( 692)					while((_g3 < _g2)){
HXLINE( 692)						_g3 = (_g3 + (int)1);
HXDLIN( 692)						int y = (_g3 - (int)1);
HXLINE( 694)						pixel = image->getPixel32(x,y,(int)0);
HXLINE( 695)						if (findColor) {
HXLINE( 695)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 695)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 697)						if (hit) {
HXLINE( 699)							if ((x < left)) {
HXLINE( 699)								left = x;
            							}
HXLINE( 700)							goto _hx_goto_33;
            						}
            					}
            					_hx_goto_33:;
            				}
HXLINE( 704)				if (hit) {
HXLINE( 706)					goto _hx_goto_32;
            				}
            			}
            			_hx_goto_32:;
            		}
HXLINE( 710)		int ix;
HXLINE( 712)		{
HXLINE( 712)			int _g11 = (int)0;
HXDLIN( 712)			int _g4 = image->width;
HXDLIN( 712)			while((_g11 < _g4)){
HXLINE( 712)				_g11 = (_g11 + (int)1);
HXDLIN( 712)				int x1 = (_g11 - (int)1);
HXLINE( 714)				ix = ((image->width - (int)1) - x1);
HXLINE( 715)				hit = false;
HXLINE( 717)				{
HXLINE( 717)					int _g31 = (int)0;
HXDLIN( 717)					int _g21 = image->height;
HXDLIN( 717)					while((_g31 < _g21)){
HXLINE( 717)						_g31 = (_g31 + (int)1);
HXDLIN( 717)						int y1 = (_g31 - (int)1);
HXLINE( 719)						pixel = image->getPixel32(ix,y1,(int)0);
HXLINE( 720)						if (findColor) {
HXLINE( 720)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 720)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 722)						if (hit) {
HXLINE( 724)							if ((ix > right)) {
HXLINE( 724)								right = ix;
            							}
HXLINE( 725)							goto _hx_goto_35;
            						}
            					}
            					_hx_goto_35:;
            				}
HXLINE( 729)				if (hit) {
HXLINE( 731)					goto _hx_goto_34;
            				}
            			}
            			_hx_goto_34:;
            		}
HXLINE( 735)		{
HXLINE( 735)			int _g12 = (int)0;
HXDLIN( 735)			int _g5 = image->height;
HXDLIN( 735)			while((_g12 < _g5)){
HXLINE( 735)				_g12 = (_g12 + (int)1);
HXDLIN( 735)				int y2 = (_g12 - (int)1);
HXLINE( 737)				hit = false;
HXLINE( 739)				{
HXLINE( 739)					int _g32 = (int)0;
HXDLIN( 739)					int _g22 = image->width;
HXDLIN( 739)					while((_g32 < _g22)){
HXLINE( 739)						_g32 = (_g32 + (int)1);
HXDLIN( 739)						int x2 = (_g32 - (int)1);
HXLINE( 741)						pixel = image->getPixel32(x2,y2,(int)0);
HXLINE( 742)						if (findColor) {
HXLINE( 742)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 742)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 744)						if (hit) {
HXLINE( 746)							if ((y2 < top)) {
HXLINE( 746)								top = y2;
            							}
HXLINE( 747)							goto _hx_goto_37;
            						}
            					}
            					_hx_goto_37:;
            				}
HXLINE( 751)				if (hit) {
HXLINE( 753)					goto _hx_goto_36;
            				}
            			}
            			_hx_goto_36:;
            		}
HXLINE( 757)		int iy;
HXLINE( 759)		{
HXLINE( 759)			int _g13 = (int)0;
HXDLIN( 759)			int _g6 = image->height;
HXDLIN( 759)			while((_g13 < _g6)){
HXLINE( 759)				_g13 = (_g13 + (int)1);
HXDLIN( 759)				int y3 = (_g13 - (int)1);
HXLINE( 761)				iy = ((image->height - (int)1) - y3);
HXLINE( 762)				hit = false;
HXLINE( 764)				{
HXLINE( 764)					int _g33 = (int)0;
HXDLIN( 764)					int _g23 = image->width;
HXDLIN( 764)					while((_g33 < _g23)){
HXLINE( 764)						_g33 = (_g33 + (int)1);
HXDLIN( 764)						int x3 = (_g33 - (int)1);
HXLINE( 766)						pixel = image->getPixel32(x3,iy,(int)0);
HXLINE( 767)						if (findColor) {
HXLINE( 767)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 767)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 769)						if (hit) {
HXLINE( 771)							if ((iy > bottom)) {
HXLINE( 771)								bottom = iy;
            							}
HXLINE( 772)							goto _hx_goto_39;
            						}
            					}
            					_hx_goto_39:;
            				}
HXLINE( 776)				if (hit) {
HXLINE( 778)					goto _hx_goto_38;
            				}
            			}
            			_hx_goto_38:;
            		}
HXLINE( 782)		int w = (right - left);
HXLINE( 783)		int h = (bottom - top);
HXLINE( 785)		if ((w > (int)0)) {
HXLINE( 785)			w = (w + (int)1);
            		}
HXLINE( 786)		if ((h > (int)0)) {
HXLINE( 786)			h = (h + (int)1);
            		}
HXLINE( 788)		if ((w < (int)0)) {
HXLINE( 788)			w = (int)0;
            		}
HXLINE( 789)		if ((h < (int)0)) {
HXLINE( 789)			h = (int)0;
            		}
HXLINE( 791)		if ((left == right)) {
HXLINE( 791)			w = (int)1;
            		}
HXLINE( 792)		if ((top == bottom)) {
HXLINE( 792)			h = (int)1;
            		}
HXLINE( 794)		if ((left > image->width)) {
HXLINE( 794)			left = (int)0;
            		}
HXLINE( 795)		if ((top > image->height)) {
HXLINE( 795)			top = (int)0;
            		}
HXLINE( 797)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,left,top,w,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,getColorBoundsRect,return )

int ImageDataUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_801_getPixel)
HXLINE( 802)		int pixel;
HXLINE( 804)		{
HXLINE( 804)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 804)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN( 804)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN( 804)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 804)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 804)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 804)					int data1 = data->byteOffset;
HXDLIN( 804)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 804)					int data2 = data->byteOffset;
HXDLIN( 804)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 804)					int data3 = data->byteOffset;
HXDLIN( 804)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 804)					int data4 = data->byteOffset;
HXDLIN( 804)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 804)					int data5 = data->byteOffset;
HXDLIN( 804)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 804)					int data6 = data->byteOffset;
HXDLIN( 804)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN( 804)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 804)					int data7 = data->byteOffset;
HXDLIN( 804)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 804)					int data8 = data->byteOffset;
HXDLIN( 804)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 804)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 804)					int data9 = data->byteOffset;
HXDLIN( 804)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 804)			if (premultiplied) {
HXLINE( 804)				bool _hx_tmp;
HXDLIN( 804)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 804)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 804)					_hx_tmp = false;
            				}
HXDLIN( 804)				if (_hx_tmp) {
HXLINE( 804)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 804)					{
HXLINE( 804)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 804)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 804)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 804)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 804)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 804)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 806)		pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)0);
HXLINE( 808)		switch((int)(format)){
            			case (int)1: {
HXLINE( 811)				int this4 = (int)0;
HXDLIN( 811)				int argb = this4;
HXDLIN( 811)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 811)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 813)				int this5 = (int)0;
HXDLIN( 813)				int bgra = this5;
HXDLIN( 813)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 813)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 815)				return pixel;
            			}
            		}
HXLINE( 808)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel,return )

int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_820_getPixel32)
HXLINE( 821)		int pixel;
HXLINE( 823)		{
HXLINE( 823)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 823)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN( 823)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN( 823)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 823)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 823)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 823)					int data1 = data->byteOffset;
HXDLIN( 823)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 823)					int data2 = data->byteOffset;
HXDLIN( 823)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 823)					int data3 = data->byteOffset;
HXDLIN( 823)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 823)					int data4 = data->byteOffset;
HXDLIN( 823)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 823)					int data5 = data->byteOffset;
HXDLIN( 823)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 823)					int data6 = data->byteOffset;
HXDLIN( 823)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN( 823)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 823)					int data7 = data->byteOffset;
HXDLIN( 823)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 823)					int data8 = data->byteOffset;
HXDLIN( 823)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 823)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 823)					int data9 = data->byteOffset;
HXDLIN( 823)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 823)			if (premultiplied) {
HXLINE( 823)				bool _hx_tmp;
HXDLIN( 823)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 823)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 823)					_hx_tmp = false;
            				}
HXDLIN( 823)				if (_hx_tmp) {
HXLINE( 823)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 823)					{
HXLINE( 823)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 823)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 823)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 823)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 823)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 823)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 826)		switch((int)(format)){
            			case (int)1: {
HXLINE( 829)				int this4 = (int)0;
HXDLIN( 829)				int argb = this4;
HXDLIN( 829)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 829)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 831)				int this5 = (int)0;
HXDLIN( 831)				int bgra = this5;
HXDLIN( 831)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 831)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 833)				return pixel;
            			}
            		}
HXLINE( 826)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageDataUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_838_getPixels)
HXLINE( 839)		if (hx::IsNull( image->buffer->data )) {
HXLINE( 839)			return null();
            		}
HXLINE( 841)		int length = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 842)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((length * (int)4));
HXLINE( 845)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 845)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_get_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),format,hx::DynamicPtr(bytes));
            		}
            		else {
HXLINE( 849)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 850)			int sourceFormat = image->buffer->format;
HXLINE( 851)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 853)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 854)			int position;
HXDLIN( 854)			int argb;
HXDLIN( 854)			int bgra;
HXDLIN( 854)			int pixel;
HXLINE( 855)			int destPosition = (int)0;
HXLINE( 857)			{
HXLINE( 857)				int _g1 = (int)0;
HXDLIN( 857)				int _g = dataView->height;
HXDLIN( 857)				while((_g1 < _g)){
HXLINE( 857)					_g1 = (_g1 + (int)1);
HXDLIN( 857)					int y = (_g1 - (int)1);
HXLINE( 859)					int dataView1 = dataView->byteOffset;
HXDLIN( 859)					position = (dataView1 + (dataView->stride * y));
HXLINE( 861)					{
HXLINE( 861)						int _g3 = (int)0;
HXDLIN( 861)						int _g2 = dataView->width;
HXDLIN( 861)						while((_g3 < _g2)){
HXLINE( 861)							_g3 = (_g3 + (int)1);
HXDLIN( 861)							int x = (_g3 - (int)1);
HXLINE( 863)							{
HXLINE( 863)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 863)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 863)										int data1 = data->byteOffset;
HXDLIN( 863)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (position + (int)1))) & (int)(int)255);
HXDLIN( 863)										int data2 = data->byteOffset;
HXDLIN( 863)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (position + (int)2))) & (int)(int)255);
HXDLIN( 863)										int data3 = data->byteOffset;
HXDLIN( 863)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 863)										int data4 = data->byteOffset;
HXDLIN( 863)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (position + (int)1))) & (int)(int)255);
HXDLIN( 863)										int data5 = data->byteOffset;
HXDLIN( 863)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (position + (int)2))) & (int)(int)255);
HXDLIN( 863)										int data6 = data->byteOffset;
HXDLIN( 863)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (position + (int)3))) & (int)(int)255);
HXDLIN( 863)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 863)										int data7 = data->byteOffset;
HXDLIN( 863)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (position + (int)2))) & (int)(int)255);
HXDLIN( 863)										int data8 = data->byteOffset;
HXDLIN( 863)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (position + (int)1))) & (int)(int)255);
HXDLIN( 863)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 863)										int data9 = data->byteOffset;
HXDLIN( 863)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 863)								if (premultiplied) {
HXLINE( 863)									bool _hx_tmp;
HXDLIN( 863)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 863)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 863)										_hx_tmp = false;
            									}
HXDLIN( 863)									if (_hx_tmp) {
HXLINE( 863)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 863)										{
HXLINE( 863)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 863)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 863)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 863)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 863)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 863)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 865)							switch((int)(format)){
            								case (int)1: {
HXLINE( 868)									int this4 = (int)0;
HXDLIN( 868)									int argb1 = this4;
HXDLIN( 868)									argb1 = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 868)									argb = argb1;
HXLINE( 869)									pixel = argb;
            								}
            								break;
            								case (int)2: {
HXLINE( 871)									int this5 = (int)0;
HXDLIN( 871)									int bgra1 = this5;
HXDLIN( 871)									bgra1 = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 871)									bgra = bgra1;
HXLINE( 872)									pixel = bgra;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 876)							{
HXLINE( 876)								destPosition = (destPosition + (int)1);
HXDLIN( 876)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
            							}
HXLINE( 877)							{
HXLINE( 877)								destPosition = (destPosition + (int)1);
HXDLIN( 877)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
            							}
HXLINE( 878)							{
HXLINE( 878)								destPosition = (destPosition + (int)1);
HXDLIN( 878)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
            							}
HXLINE( 879)							{
HXLINE( 879)								destPosition = (destPosition + (int)1);
HXDLIN( 879)								bytes->b[(destPosition - (int)1)] = ((int)pixel & (int)(int)255);
            							}
HXLINE( 881)							position = (position + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 886)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,getPixels,return )

void ImageDataUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_891_merge)
HXLINE( 892)		bool _hx_tmp;
HXDLIN( 892)		if (hx::IsNotNull( image->buffer->data )) {
HXLINE( 892)			_hx_tmp = hx::IsNull( sourceImage->buffer->data );
            		}
            		else {
HXLINE( 892)			_hx_tmp = true;
            		}
HXDLIN( 892)		if (_hx_tmp) {
HXLINE( 892)			return;
            		}
HXLINE( 895)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 895)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_merge(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            		}
            		else {
HXLINE( 900)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView sourceView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 901)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 903)			 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 904)			 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 905)			int sourceFormat = sourceImage->buffer->format;
HXLINE( 906)			int destFormat = image->buffer->format;
HXLINE( 907)			bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 908)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 910)			int sourcePosition;
HXDLIN( 910)			int destPosition;
HXDLIN( 910)			int sourcePixel;
HXDLIN( 910)			int destPixel;
HXLINE( 912)			{
HXLINE( 912)				int _g1 = (int)0;
HXDLIN( 912)				int _g = destView->height;
HXDLIN( 912)				while((_g1 < _g)){
HXLINE( 912)					_g1 = (_g1 + (int)1);
HXDLIN( 912)					int y = (_g1 - (int)1);
HXLINE( 914)					int sourceView1 = sourceView->byteOffset;
HXDLIN( 914)					sourcePosition = (sourceView1 + (sourceView->stride * y));
HXLINE( 915)					int destView1 = destView->byteOffset;
HXDLIN( 915)					destPosition = (destView1 + (destView->stride * y));
HXLINE( 917)					{
HXLINE( 917)						int _g3 = (int)0;
HXDLIN( 917)						int _g2 = destView->width;
HXDLIN( 917)						while((_g3 < _g2)){
HXLINE( 917)							_g3 = (_g3 + (int)1);
HXDLIN( 917)							int x = (_g3 - (int)1);
HXLINE( 919)							{
HXLINE( 919)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 919)										int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 919)										int sourceData1 = sourceData->byteOffset;
HXDLIN( 919)										int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 919)										int sourceData2 = sourceData->byteOffset;
HXDLIN( 919)										int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 919)										int sourceData3 = sourceData->byteOffset;
HXDLIN( 919)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 919)										int sourceData4 = sourceData->byteOffset;
HXDLIN( 919)										int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 919)										int sourceData5 = sourceData->byteOffset;
HXDLIN( 919)										int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 919)										int sourceData6 = sourceData->byteOffset;
HXDLIN( 919)										int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 919)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 919)										int sourceData7 = sourceData->byteOffset;
HXDLIN( 919)										int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 919)										int sourceData8 = sourceData->byteOffset;
HXDLIN( 919)										int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 919)										int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 919)										int sourceData9 = sourceData->byteOffset;
HXDLIN( 919)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 919)								if (sourcePremultiplied) {
HXLINE( 919)									bool _hx_tmp1;
HXDLIN( 919)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 919)										_hx_tmp1 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 919)										_hx_tmp1 = false;
            									}
HXDLIN( 919)									if (_hx_tmp1) {
HXLINE( 919)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 919)										{
HXLINE( 919)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 919)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 919)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 919)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 919)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 919)											sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 920)							{
HXLINE( 920)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 920)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 920)										int destData1 = destData->byteOffset;
HXDLIN( 920)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 920)										int destData2 = destData->byteOffset;
HXDLIN( 920)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 920)										int destData3 = destData->byteOffset;
HXDLIN( 920)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 920)										int destData4 = destData->byteOffset;
HXDLIN( 920)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 920)										int destData5 = destData->byteOffset;
HXDLIN( 920)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 920)										int destData6 = destData->byteOffset;
HXDLIN( 920)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 920)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 920)										int destData7 = destData->byteOffset;
HXDLIN( 920)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 920)										int destData8 = destData->byteOffset;
HXDLIN( 920)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 920)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 920)										int destData9 = destData->byteOffset;
HXDLIN( 920)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 920)								if (destPremultiplied) {
HXLINE( 920)									bool _hx_tmp2;
HXDLIN( 920)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 920)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 920)										_hx_tmp2 = false;
            									}
HXDLIN( 920)									if (_hx_tmp2) {
HXLINE( 920)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 920)										{
HXLINE( 920)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 920)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 920)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 920)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 920)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 920)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 922)							{
HXLINE( 922)								int value = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * redMultiplier) + (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ((int)256 - redMultiplier))) / (Float)(int)256));
HXDLIN( 922)								destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 923)							{
HXLINE( 923)								int value1 = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * greenMultiplier) + (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ((int)256 - greenMultiplier))) / (Float)(int)256));
HXDLIN( 923)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 924)							{
HXLINE( 924)								int value2 = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * blueMultiplier) + (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ((int)256 - blueMultiplier))) / (Float)(int)256));
HXDLIN( 924)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 925)							{
HXLINE( 925)								int value3 = ::Std_obj::_hx_int(((Float)((((int)sourcePixel & (int)(int)255) * alphaMultiplier) + (((int)destPixel & (int)(int)255) * ((int)256 - alphaMultiplier))) / (Float)(int)256));
HXDLIN( 925)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            							}
HXLINE( 927)							{
HXLINE( 927)								if (destPremultiplied) {
HXLINE( 927)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 927)										if ((destPixel != (int)0)) {
HXLINE( 927)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 927)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 927)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 927)											int this8 = this7->byteOffset;
HXDLIN( 927)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 927)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 927)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 927)										{
HXLINE( 927)											int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 927)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData10 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData11 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData12 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 927)										{
HXLINE( 927)											int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 927)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData13 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData14 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData15 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 927)										{
HXLINE( 927)											int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 927)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData16 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData17 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN( 927)										{
HXLINE( 927)											int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 927)											{
HXLINE( 927)												int destData18 = destData->byteOffset;
HXDLIN( 927)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 929)							sourcePosition = (sourcePosition + (int)4);
HXLINE( 930)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 935)		image->dirty = true;
HXLINE( 936)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,merge,(void))

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_940_multiplyAlpha)
HXLINE( 941)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 942)		bool _hx_tmp;
HXDLIN( 942)		if (hx::IsNotNull( data )) {
HXLINE( 942)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE( 942)			_hx_tmp = true;
            		}
HXDLIN( 942)		if (_hx_tmp) {
HXLINE( 942)			return;
            		}
HXLINE( 945)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 945)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_multiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE( 949)			int format = image->buffer->format;
HXLINE( 950)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE( 951)			int pixel;
HXLINE( 953)			{
HXLINE( 953)				int _g1 = (int)0;
HXDLIN( 953)				int _g = length;
HXDLIN( 953)				while((_g1 < _g)){
HXLINE( 953)					_g1 = (_g1 + (int)1);
HXDLIN( 953)					int i = (_g1 - (int)1);
HXLINE( 955)					{
HXLINE( 955)						int offset = (i * (int)4);
HXDLIN( 955)						switch((int)(format)){
            							case (int)0: {
HXLINE( 955)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 955)								int data1 = data->byteOffset;
HXDLIN( 955)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 955)								int data2 = data->byteOffset;
HXDLIN( 955)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 955)								int data3 = data->byteOffset;
HXDLIN( 955)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE( 955)								int data4 = data->byteOffset;
HXDLIN( 955)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 955)								int data5 = data->byteOffset;
HXDLIN( 955)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 955)								int data6 = data->byteOffset;
HXDLIN( 955)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN( 955)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE( 955)								int data7 = data->byteOffset;
HXDLIN( 955)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 955)								int data8 = data->byteOffset;
HXDLIN( 955)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 955)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 955)								int data9 = data->byteOffset;
HXDLIN( 955)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
            					}
HXLINE( 956)					{
HXLINE( 956)						int offset1 = (i * (int)4);
HXDLIN( 956)						if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE( 956)							if ((pixel != (int)0)) {
HXLINE( 956)								pixel = (int)0;
            							}
            						}
            						else {
HXLINE( 956)							if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE( 956)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 956)								int this2 = this1->byteOffset;
HXDLIN( 956)								::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this1->buffer->b,(this2 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN( 956)								pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
HXDLIN( 956)						switch((int)(format)){
            							case (int)0: {
HXLINE( 956)								{
HXLINE( 956)									int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 956)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data10 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset1 + (int)1)),val1);
            									}
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data11 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset1 + (int)2)),val2);
            									}
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val3 = ((int)pixel & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data12 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset1 + (int)3)),val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 956)								{
HXLINE( 956)									int val4 = ((int)pixel & (int)(int)255);
HXDLIN( 956)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data13 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset1 + (int)1)),val5);
            									}
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data14 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset1 + (int)2)),val6);
            									}
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data15 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset1 + (int)3)),val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 956)								{
HXLINE( 956)									int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 956)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data16 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset1 + (int)1)),val9);
            									}
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data17 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset1 + (int)2)),val10);
            									}
            								}
HXDLIN( 956)								{
HXLINE( 956)									int val11 = ((int)pixel & (int)(int)255);
HXDLIN( 956)									{
HXLINE( 956)										int data18 = data->byteOffset;
HXDLIN( 956)										::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset1 + (int)3)),val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE( 960)		image->buffer->premultiplied = true;
HXLINE( 961)		image->dirty = true;
HXLINE( 962)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_966_resize)
HXLINE( 967)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE( 968)		bool _hx_tmp;
HXDLIN( 968)		if ((buffer->width == newWidth)) {
HXLINE( 968)			_hx_tmp = (buffer->height == newHeight);
            		}
            		else {
HXLINE( 968)			_hx_tmp = false;
            		}
HXDLIN( 968)		if (_hx_tmp) {
HXLINE( 968)			return;
            		}
HXLINE( 969)		 ::Dynamic elements = ((newWidth * newHeight) * (int)4);
HXDLIN( 969)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 969)		if (hx::IsNotNull( elements )) {
HXLINE( 969)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE( 969)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 969)		 ::lime::graphics::ImageBuffer newBuffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,newWidth,newHeight,null(),null());
HXLINE( 972)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 972)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_resize(hx::DynamicPtr(image),hx::DynamicPtr(newBuffer),newWidth,newHeight);
            		}
            		else {
HXLINE( 976)			int imageWidth = image->width;
HXLINE( 977)			int imageHeight = image->height;
HXLINE( 979)			 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE( 980)			 ::lime::utils::ArrayBufferView newData = newBuffer->data;
HXLINE( 981)			int sourceIndex;
HXDLIN( 981)			int sourceIndexX;
HXDLIN( 981)			int sourceIndexY;
HXDLIN( 981)			int sourceIndexXY;
HXDLIN( 981)			int index;
HXLINE( 982)			int sourceX;
HXDLIN( 982)			int sourceY;
HXLINE( 983)			Float u;
HXDLIN( 983)			Float v;
HXDLIN( 983)			Float uRatio;
HXDLIN( 983)			Float vRatio;
HXDLIN( 983)			Float uOpposite;
HXDLIN( 983)			Float vOpposite;
HXLINE( 985)			{
HXLINE( 985)				int _g1 = (int)0;
HXDLIN( 985)				int _g = newHeight;
HXDLIN( 985)				while((_g1 < _g)){
HXLINE( 985)					_g1 = (_g1 + (int)1);
HXDLIN( 985)					int y = (_g1 - (int)1);
HXLINE( 987)					{
HXLINE( 987)						int _g3 = (int)0;
HXDLIN( 987)						int _g2 = newWidth;
HXDLIN( 987)						while((_g3 < _g2)){
HXLINE( 987)							_g3 = (_g3 + (int)1);
HXDLIN( 987)							int x = (_g3 - (int)1);
HXLINE( 991)							u = ((((Float)(x + ((Float)0.5)) / (Float)newWidth) * imageWidth) - ((Float)0.5));
HXLINE( 992)							v = ((((Float)(y + ((Float)0.5)) / (Float)newHeight) * imageHeight) - ((Float)0.5));
HXLINE( 994)							sourceX = ::Std_obj::_hx_int(u);
HXLINE( 995)							sourceY = ::Std_obj::_hx_int(v);
HXLINE( 997)							sourceIndex = (((sourceY * imageWidth) + sourceX) * (int)4);
HXLINE( 998)							if ((sourceX < (imageWidth - (int)1))) {
HXLINE( 998)								sourceIndexX = (sourceIndex + (int)4);
            							}
            							else {
HXLINE( 998)								sourceIndexX = sourceIndex;
            							}
HXLINE( 999)							if ((sourceY < (imageHeight - (int)1))) {
HXLINE( 999)								sourceIndexY = (sourceIndex + (imageWidth * (int)4));
            							}
            							else {
HXLINE( 999)								sourceIndexY = sourceIndex;
            							}
HXLINE(1000)							if ((sourceIndexX != sourceIndex)) {
HXLINE(1000)								sourceIndexXY = (sourceIndexY + (int)4);
            							}
            							else {
HXLINE(1000)								sourceIndexXY = sourceIndexY;
            							}
HXLINE(1002)							index = (((y * newWidth) + x) * (int)4);
HXLINE(1004)							uRatio = (u - sourceX);
HXLINE(1005)							vRatio = (v - sourceY);
HXLINE(1006)							uOpposite = ((int)1 - uRatio);
HXLINE(1007)							vOpposite = ((int)1 - vRatio);
HXLINE(1009)							{
HXLINE(1009)								int _hx_int = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN(1009)								Float val;
HXDLIN(1009)								if ((_hx_int < (int)0)) {
HXLINE(1009)									val = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1009)									val = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1009)								Float val1 = (val * uOpposite);
HXDLIN(1009)								int int1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexX)) & (int)(int)255);
HXDLIN(1009)								Float val2;
HXDLIN(1009)								if ((int1 < (int)0)) {
HXLINE(1009)									val2 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1009)									val2 = (int1 + ((Float)0.0));
            								}
HXDLIN(1009)								Float val3 = ((val1 + (val2 * uRatio)) * vOpposite);
HXLINE(1010)								int int2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexY)) & (int)(int)255);
HXDLIN(1010)								Float val4;
HXDLIN(1010)								if ((int2 < (int)0)) {
HXLINE(1010)									val4 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1010)									val4 = (int2 + ((Float)0.0));
            								}
HXDLIN(1010)								Float val5 = (val4 * uOpposite);
HXDLIN(1010)								int int3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexXY)) & (int)(int)255);
HXDLIN(1010)								Float val6;
HXDLIN(1010)								if ((int3 < (int)0)) {
HXLINE(1010)									val6 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1010)									val6 = (int3 + ((Float)0.0));
            								}
HXLINE(1009)								int val7 = ::Std_obj::_hx_int((val3 + ((val5 + (val6 * uRatio)) * vRatio)));
HXDLIN(1009)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val7);
            							}
HXLINE(1011)							{
HXLINE(1011)								int data1 = data->byteOffset;
HXDLIN(1011)								int int4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN(1011)								Float val8;
HXDLIN(1011)								if ((int4 < (int)0)) {
HXLINE(1011)									val8 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1011)									val8 = (int4 + ((Float)0.0));
            								}
HXDLIN(1011)								Float val9 = (val8 * uOpposite);
HXDLIN(1011)								int data2 = data->byteOffset;
HXDLIN(1011)								int int5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (sourceIndexX + (int)1))) & (int)(int)255);
HXDLIN(1011)								Float val10;
HXDLIN(1011)								if ((int5 < (int)0)) {
HXLINE(1011)									val10 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1011)									val10 = (int5 + ((Float)0.0));
            								}
HXDLIN(1011)								Float val11 = ((val9 + (val10 * uRatio)) * vOpposite);
HXLINE(1012)								int data3 = data->byteOffset;
HXDLIN(1012)								int int6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (sourceIndexY + (int)1))) & (int)(int)255);
HXDLIN(1012)								Float val12;
HXDLIN(1012)								if ((int6 < (int)0)) {
HXLINE(1012)									val12 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1012)									val12 = (int6 + ((Float)0.0));
            								}
HXDLIN(1012)								Float val13 = (val12 * uOpposite);
HXDLIN(1012)								int data4 = data->byteOffset;
HXDLIN(1012)								int int7 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (sourceIndexXY + (int)1))) & (int)(int)255);
HXDLIN(1012)								Float val14;
HXDLIN(1012)								if ((int7 < (int)0)) {
HXLINE(1012)									val14 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1012)									val14 = (int7 + ((Float)0.0));
            								}
HXLINE(1011)								int val15 = ::Std_obj::_hx_int((val11 + ((val13 + (val14 * uRatio)) * vRatio)));
HXDLIN(1011)								{
HXLINE(1011)									int newData1 = newData->byteOffset;
HXDLIN(1011)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData1 + (index + (int)1)),val15);
            								}
            							}
HXLINE(1013)							{
HXLINE(1013)								int data5 = data->byteOffset;
HXDLIN(1013)								int int8 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN(1013)								Float val16;
HXDLIN(1013)								if ((int8 < (int)0)) {
HXLINE(1013)									val16 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1013)									val16 = (int8 + ((Float)0.0));
            								}
HXDLIN(1013)								Float val17 = (val16 * uOpposite);
HXDLIN(1013)								int data6 = data->byteOffset;
HXDLIN(1013)								int int9 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (sourceIndexX + (int)2))) & (int)(int)255);
HXDLIN(1013)								Float val18;
HXDLIN(1013)								if ((int9 < (int)0)) {
HXLINE(1013)									val18 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1013)									val18 = (int9 + ((Float)0.0));
            								}
HXDLIN(1013)								Float val19 = ((val17 + (val18 * uRatio)) * vOpposite);
HXLINE(1014)								int data7 = data->byteOffset;
HXDLIN(1014)								int int10 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (sourceIndexY + (int)2))) & (int)(int)255);
HXDLIN(1014)								Float val20;
HXDLIN(1014)								if ((int10 < (int)0)) {
HXLINE(1014)									val20 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1014)									val20 = (int10 + ((Float)0.0));
            								}
HXDLIN(1014)								Float val21 = (val20 * uOpposite);
HXDLIN(1014)								int data8 = data->byteOffset;
HXDLIN(1014)								int int11 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (sourceIndexXY + (int)2))) & (int)(int)255);
HXDLIN(1014)								Float val22;
HXDLIN(1014)								if ((int11 < (int)0)) {
HXLINE(1014)									val22 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1014)									val22 = (int11 + ((Float)0.0));
            								}
HXLINE(1013)								int val23 = ::Std_obj::_hx_int((val19 + ((val21 + (val22 * uRatio)) * vRatio)));
HXDLIN(1013)								{
HXLINE(1013)									int newData2 = newData->byteOffset;
HXDLIN(1013)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData2 + (index + (int)2)),val23);
            								}
            							}
HXLINE(1018)							bool _hx_tmp1;
HXDLIN(1018)							bool _hx_tmp2;
HXDLIN(1018)							int data9 = data->byteOffset;
HXDLIN(1018)							if (hx::IsNotEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (sourceIndexX + (int)3))) & (int)(int)255),(int)0 )) {
HXLINE(1018)								int data10 = data->byteOffset;
HXDLIN(1018)								_hx_tmp2 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data10 + (sourceIndexY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE(1018)								_hx_tmp2 = true;
            							}
HXDLIN(1018)							if (!(_hx_tmp2)) {
HXLINE(1018)								int data11 = data->byteOffset;
HXDLIN(1018)								_hx_tmp1 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data11 + (sourceIndexXY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE(1018)								_hx_tmp1 = true;
            							}
HXDLIN(1018)							if (_hx_tmp1) {
HXLINE(1020)								int newData3 = newData->byteOffset;
HXDLIN(1020)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData3 + (index + (int)3)),(int)0);
            							}
            							else {
HXLINE(1024)								int data12 = data->byteOffset;
HXDLIN(1024)								int val24 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data12 + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN(1024)								{
HXLINE(1024)									int newData4 = newData->byteOffset;
HXDLIN(1024)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData4 + (index + (int)3)),val24);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1030)		buffer->data = newBuffer->data;
HXLINE(1031)		buffer->width = newWidth;
HXLINE(1032)		buffer->height = newHeight;
HXLINE(1041)		image->dirty = true;
HXLINE(1042)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resize,(void))

void ImageDataUtil_obj::resizeBuffer( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1046_resizeBuffer)
HXLINE(1047)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE(1048)		 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE(1049)		 ::Dynamic elements = ((newWidth * newHeight) * (int)4);
HXDLIN(1049)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(1049)		if (hx::IsNotNull( elements )) {
HXLINE(1049)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE(1049)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(1049)		 ::lime::utils::ArrayBufferView newData = this1;
HXLINE(1050)		int sourceIndex;
HXDLIN(1050)		int index;
HXLINE(1052)		{
HXLINE(1052)			int _g1 = (int)0;
HXDLIN(1052)			int _g = buffer->height;
HXDLIN(1052)			while((_g1 < _g)){
HXLINE(1052)				_g1 = (_g1 + (int)1);
HXDLIN(1052)				int y = (_g1 - (int)1);
HXLINE(1054)				{
HXLINE(1054)					int _g3 = (int)0;
HXDLIN(1054)					int _g2 = buffer->width;
HXDLIN(1054)					while((_g3 < _g2)){
HXLINE(1054)						_g3 = (_g3 + (int)1);
HXDLIN(1054)						int x = (_g3 - (int)1);
HXLINE(1056)						sourceIndex = (((y * buffer->width) + x) * (int)4);
HXLINE(1057)						index = (((y * newWidth) + x) * (int)4);
HXLINE(1059)						{
HXLINE(1059)							int val = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN(1059)							::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val);
            						}
HXLINE(1060)						{
HXLINE(1060)							int data1 = data->byteOffset;
HXDLIN(1060)							int val1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN(1060)							{
HXLINE(1060)								int newData1 = newData->byteOffset;
HXDLIN(1060)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData1 + (index + (int)1)),val1);
            							}
            						}
HXLINE(1061)						{
HXLINE(1061)							int data2 = data->byteOffset;
HXDLIN(1061)							int val2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN(1061)							{
HXLINE(1061)								int newData2 = newData->byteOffset;
HXDLIN(1061)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData2 + (index + (int)2)),val2);
            							}
            						}
HXLINE(1062)						{
HXLINE(1062)							int data3 = data->byteOffset;
HXDLIN(1062)							int val3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN(1062)							{
HXLINE(1062)								int newData3 = newData->byteOffset;
HXDLIN(1062)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData3 + (index + (int)3)),val3);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1066)		buffer->data = newData;
HXLINE(1067)		buffer->width = newWidth;
HXLINE(1068)		buffer->height = newHeight;
HXLINE(1077)		image->dirty = true;
HXLINE(1078)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resizeBuffer,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1082_setFormat)
HXLINE(1083)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1084)		if (hx::IsNull( data )) {
HXLINE(1084)			return;
            		}
HXLINE(1087)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1087)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_format(hx::DynamicPtr(image),format);
            		}
            		else {
HXLINE(1091)			int index;
HXDLIN(1091)			 ::Dynamic a16;
HXLINE(1092)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1093)			int r1;
HXDLIN(1093)			int g1;
HXDLIN(1093)			int b1;
HXDLIN(1093)			int a1;
HXDLIN(1093)			int r2;
HXDLIN(1093)			int g2;
HXDLIN(1093)			int b2;
HXDLIN(1093)			int a2;
HXLINE(1094)			 ::Dynamic r;
HXDLIN(1094)			 ::Dynamic g;
HXDLIN(1094)			 ::Dynamic b;
HXDLIN(1094)			 ::Dynamic a;
HXLINE(1096)			{
HXLINE(1096)				int _g = image->get_format();
HXDLIN(1096)				switch((int)(_g)){
            					case (int)0: {
HXLINE(1099)						r1 = (int)0;
HXLINE(1100)						g1 = (int)1;
HXLINE(1101)						b1 = (int)2;
HXLINE(1102)						a1 = (int)3;
            					}
            					break;
            					case (int)1: {
HXLINE(1105)						r1 = (int)1;
HXLINE(1106)						g1 = (int)2;
HXLINE(1107)						b1 = (int)3;
HXLINE(1108)						a1 = (int)0;
            					}
            					break;
            					case (int)2: {
HXLINE(1111)						r1 = (int)2;
HXLINE(1112)						g1 = (int)1;
HXLINE(1113)						b1 = (int)0;
HXLINE(1114)						a1 = (int)3;
            					}
            					break;
            				}
            			}
HXLINE(1117)			switch((int)(format)){
            				case (int)0: {
HXLINE(1120)					r2 = (int)0;
HXLINE(1121)					g2 = (int)1;
HXLINE(1122)					b2 = (int)2;
HXLINE(1123)					a2 = (int)3;
            				}
            				break;
            				case (int)1: {
HXLINE(1126)					r2 = (int)1;
HXLINE(1127)					g2 = (int)2;
HXLINE(1128)					b2 = (int)3;
HXLINE(1129)					a2 = (int)0;
            				}
            				break;
            				case (int)2: {
HXLINE(1132)					r2 = (int)2;
HXLINE(1133)					g2 = (int)1;
HXLINE(1134)					b2 = (int)0;
HXLINE(1135)					a2 = (int)3;
            				}
            				break;
            			}
HXLINE(1138)			{
HXLINE(1138)				int _g2 = (int)0;
HXDLIN(1138)				int _g1 = length;
HXDLIN(1138)				while((_g2 < _g1)){
HXLINE(1138)					_g2 = (_g2 + (int)1);
HXDLIN(1138)					int i = (_g2 - (int)1);
HXLINE(1140)					index = (i * (int)4);
HXLINE(1142)					int data1 = data->byteOffset;
HXDLIN(1142)					r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (index + r1))) & (int)(int)255);
HXLINE(1143)					int data2 = data->byteOffset;
HXDLIN(1143)					g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (index + g1))) & (int)(int)255);
HXLINE(1144)					int data3 = data->byteOffset;
HXDLIN(1144)					b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (index + b1))) & (int)(int)255);
HXLINE(1145)					int data4 = data->byteOffset;
HXDLIN(1145)					a = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (index + a1))) & (int)(int)255);
HXLINE(1147)					{
HXLINE(1147)						int val = r;
HXDLIN(1147)						{
HXLINE(1147)							int data5 = data->byteOffset;
HXDLIN(1147)							::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (index + r2)),val);
            						}
            					}
HXLINE(1148)					{
HXLINE(1148)						int val1 = g;
HXDLIN(1148)						{
HXLINE(1148)							int data6 = data->byteOffset;
HXDLIN(1148)							::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (index + g2)),val1);
            						}
            					}
HXLINE(1149)					{
HXLINE(1149)						int val2 = b;
HXDLIN(1149)						{
HXLINE(1149)							int data7 = data->byteOffset;
HXDLIN(1149)							::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (index + b2)),val2);
            						}
            					}
HXLINE(1150)					{
HXLINE(1150)						int val3 = a;
HXDLIN(1150)						{
HXLINE(1150)							int data8 = data->byteOffset;
HXDLIN(1150)							::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (index + a2)),val3);
            						}
            					}
            				}
            			}
            		}
HXLINE(1154)		image->buffer->format = format;
HXLINE(1155)		image->dirty = true;
HXLINE(1156)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1160_setPixel)
HXLINE(1161)		int pixel;
HXLINE(1163)		switch((int)(format)){
            			case (int)1: {
HXLINE(1166)				int argb = color;
HXDLIN(1166)				int this1 = (int)0;
HXDLIN(1166)				int rgba = this1;
HXDLIN(1166)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1166)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1168)				int bgra = color;
HXDLIN(1168)				int this2 = (int)0;
HXDLIN(1168)				int rgba1 = this2;
HXDLIN(1168)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1168)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1170)				pixel = color;
            			}
            		}
HXLINE(1175)		int this3 = (int)0;
HXDLIN(1175)		int source = this3;
HXLINE(1176)		{
HXLINE(1176)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1176)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1176)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN(1176)			bool premultiplied = image->buffer->premultiplied;
HXDLIN(1176)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE(1176)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN(1176)					int data1 = data->byteOffset;
HXDLIN(1176)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1176)					int data2 = data->byteOffset;
HXDLIN(1176)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1176)					int data3 = data->byteOffset;
HXDLIN(1176)					source = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE(1176)					int data4 = data->byteOffset;
HXDLIN(1176)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1176)					int data5 = data->byteOffset;
HXDLIN(1176)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1176)					int data6 = data->byteOffset;
HXDLIN(1176)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN(1176)					source = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE(1176)					int data7 = data->byteOffset;
HXDLIN(1176)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1176)					int data8 = data->byteOffset;
HXDLIN(1176)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1176)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN(1176)					int data9 = data->byteOffset;
HXDLIN(1176)					source = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN(1176)			if (premultiplied) {
HXLINE(1176)				bool _hx_tmp;
HXDLIN(1176)				if ((((int)source & (int)(int)255) != (int)0)) {
HXLINE(1176)					_hx_tmp = (((int)source & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE(1176)					_hx_tmp = false;
            				}
HXDLIN(1176)				if (_hx_tmp) {
HXLINE(1176)					::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)source & (int)(int)255));
HXDLIN(1176)					{
HXLINE(1176)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1176)						int r3 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1176)						 ::lime::utils::ArrayBufferView this5 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1176)						int g3 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1176)						 ::lime::utils::ArrayBufferView this6 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1176)						source = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)source & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE(1179)		{
HXLINE(1179)			int value = ((int)source & (int)(int)255);
HXDLIN(1179)			pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            		}
HXLINE(1180)		{
HXLINE(1180)			 ::lime::utils::ArrayBufferView data10 = image->buffer->data;
HXDLIN(1180)			int offset2 = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1180)			int offset3 = (offset2 + ((x + image->offsetX) * (int)4));
HXDLIN(1180)			int format1 = image->buffer->format;
HXDLIN(1180)			if (image->buffer->premultiplied) {
HXLINE(1180)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1180)					if ((pixel != (int)0)) {
HXLINE(1180)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1180)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1180)						 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1180)						int this8 = this7->byteOffset;
HXDLIN(1180)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1180)						pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1180)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1180)					{
HXLINE(1180)						int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1180)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val);
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data11 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data11 + (offset3 + (int)1)),val1);
            						}
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data12 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data12 + (offset3 + (int)2)),val2);
            						}
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data13 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data13 + (offset3 + (int)3)),val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1180)					{
HXLINE(1180)						int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1180)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val4);
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data14 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data14 + (offset3 + (int)1)),val5);
            						}
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data15 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data15 + (offset3 + (int)2)),val6);
            						}
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data16 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data16 + (offset3 + (int)3)),val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1180)					{
HXLINE(1180)						int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1180)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val8);
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data17 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data17 + (offset3 + (int)1)),val9);
            						}
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data18 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data18 + (offset3 + (int)2)),val10);
            						}
            					}
HXDLIN(1180)					{
HXLINE(1180)						int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1180)						{
HXLINE(1180)							int data19 = data10->byteOffset;
HXDLIN(1180)							::__hxcpp_memory_set_byte(data10->buffer->b,(data19 + (offset3 + (int)3)),val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1183)		image->dirty = true;
HXLINE(1184)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1188_setPixel32)
HXLINE(1189)		int pixel;
HXLINE(1191)		switch((int)(format)){
            			case (int)1: {
HXLINE(1194)				int argb = color;
HXDLIN(1194)				int this1 = (int)0;
HXDLIN(1194)				int rgba = this1;
HXDLIN(1194)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1194)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1196)				int bgra = color;
HXDLIN(1196)				int this2 = (int)0;
HXDLIN(1196)				int rgba1 = this2;
HXDLIN(1196)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1196)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1198)				pixel = color;
            			}
            		}
HXLINE(1201)		if (!(image->get_transparent())) {
HXLINE(1201)			pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE(1202)		{
HXLINE(1202)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1202)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1202)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN(1202)			int format1 = image->buffer->format;
HXDLIN(1202)			if (image->buffer->premultiplied) {
HXLINE(1202)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1202)					if ((pixel != (int)0)) {
HXLINE(1202)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1202)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1202)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1202)						int this4 = this3->byteOffset;
HXDLIN(1202)						::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1202)						pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1202)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1202)					{
HXLINE(1202)						int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1202)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data1 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset1 + (int)1)),val1);
            						}
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data2 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset1 + (int)2)),val2);
            						}
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data3 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset1 + (int)3)),val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1202)					{
HXLINE(1202)						int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1202)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data4 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset1 + (int)1)),val5);
            						}
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data5 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset1 + (int)2)),val6);
            						}
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data6 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset1 + (int)3)),val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1202)					{
HXLINE(1202)						int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1202)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data7 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset1 + (int)1)),val9);
            						}
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data8 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset1 + (int)2)),val10);
            						}
            					}
HXDLIN(1202)					{
HXLINE(1202)						int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1202)						{
HXLINE(1202)							int data9 = data->byteOffset;
HXDLIN(1202)							::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset1 + (int)3)),val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1205)		image->dirty = true;
HXLINE(1206)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::BytePointerData bytePointer,int format, ::lime::_hx_system::Endian endian){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1210_setPixels)
HXLINE(1211)		if (hx::IsNull( image->buffer->data )) {
HXLINE(1211)			return;
            		}
HXLINE(1214)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1214)			int _hx_tmp;
HXDLIN(1214)			if (hx::IsEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() )) {
HXLINE(1214)				_hx_tmp = (int)1;
            			}
            			else {
HXLINE(1214)				_hx_tmp = (int)0;
            			}
HXDLIN(1214)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_set_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(bytePointer->bytes),bytePointer->offset,format,_hx_tmp);
            		}
            		else {
HXLINE(1218)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1219)			int sourceFormat = image->buffer->format;
HXLINE(1220)			bool premultiplied = image->buffer->premultiplied;
HXLINE(1221)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView dataView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(1222)			int row;
HXDLIN(1222)			int color;
HXDLIN(1222)			int pixel;
HXLINE(1223)			bool transparent = image->get_transparent();
HXLINE(1224)			 ::haxe::io::Bytes bytes = bytePointer->bytes;
HXLINE(1225)			int dataPosition = bytePointer->offset;
HXLINE(1226)			bool littleEndian = hx::IsNotEq( endian,::lime::_hx_system::Endian_obj::_hx_BIG_ENDIAN_dyn() );
HXLINE(1228)			{
HXLINE(1228)				int _g1 = (int)0;
HXDLIN(1228)				int _g = dataView->height;
HXDLIN(1228)				while((_g1 < _g)){
HXLINE(1228)					_g1 = (_g1 + (int)1);
HXDLIN(1228)					int y = (_g1 - (int)1);
HXLINE(1230)					int dataView1 = dataView->byteOffset;
HXDLIN(1230)					row = (dataView1 + (dataView->stride * y));
HXLINE(1232)					{
HXLINE(1232)						int _g3 = (int)0;
HXDLIN(1232)						int _g2 = dataView->width;
HXDLIN(1232)						while((_g3 < _g2)){
HXLINE(1232)							_g3 = (_g3 + (int)1);
HXDLIN(1232)							int x = (_g3 - (int)1);
HXLINE(1234)							if (littleEndian) {
HXLINE(1236)								int bytes1 = bytes->b->__get(dataPosition);
HXDLIN(1236)								::Array< unsigned char > bytes2 = bytes->b;
HXDLIN(1236)								int color1 = ((int)bytes1 | (int)((int)bytes2->__get((dataPosition + (int)1)) << (int)(int)8));
HXDLIN(1236)								::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(1236)								int color2 = ((int)color1 | (int)((int)bytes3->__get((dataPosition + (int)2)) << (int)(int)16));
HXDLIN(1236)								::Array< unsigned char > bytes4 = bytes->b;
HXDLIN(1236)								color = ((int)color2 | (int)((int)bytes4->__get((dataPosition + (int)3)) << (int)(int)24));
            							}
            							else {
HXLINE(1240)								::Array< unsigned char > bytes5 = bytes->b;
HXDLIN(1240)								int bytes6 = bytes5->__get((dataPosition + (int)3));
HXDLIN(1240)								::Array< unsigned char > bytes7 = bytes->b;
HXDLIN(1240)								int color3 = ((int)bytes6 | (int)((int)bytes7->__get((dataPosition + (int)2)) << (int)(int)8));
HXDLIN(1240)								::Array< unsigned char > bytes8 = bytes->b;
HXDLIN(1240)								int color4 = ((int)color3 | (int)((int)bytes8->__get((dataPosition + (int)1)) << (int)(int)16));
HXDLIN(1240)								color = ((int)color4 | (int)((int)bytes->b->__get(dataPosition) << (int)(int)24));
            							}
HXLINE(1244)							dataPosition = (dataPosition + (int)4);
HXLINE(1246)							switch((int)(format)){
            								case (int)1: {
HXLINE(1249)									int argb = color;
HXDLIN(1249)									int this1 = (int)0;
HXDLIN(1249)									int rgba = this1;
HXDLIN(1249)									rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1249)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1251)									int bgra = color;
HXDLIN(1251)									int this2 = (int)0;
HXDLIN(1251)									int rgba1 = this2;
HXDLIN(1251)									rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1251)									pixel = rgba1;
            								}
            								break;
            								default:{
HXLINE(1253)									pixel = color;
            								}
            							}
HXLINE(1256)							if (!(transparent)) {
HXLINE(1256)								pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            							}
HXLINE(1257)							{
HXLINE(1257)								int offset = (row + (x * (int)4));
HXDLIN(1257)								if (premultiplied) {
HXLINE(1257)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1257)										if ((pixel != (int)0)) {
HXLINE(1257)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(1257)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1257)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1257)											int this4 = this3->byteOffset;
HXDLIN(1257)											::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1257)											pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(1257)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1257)										{
HXLINE(1257)											int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1257)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data1 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data2 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data3 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1257)										{
HXLINE(1257)											int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1257)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data4 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data5 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data6 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1257)										{
HXLINE(1257)											int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1257)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data7 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data8 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN(1257)										{
HXLINE(1257)											int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1257)											{
HXLINE(1257)												int data9 = data->byteOffset;
HXDLIN(1257)												::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1262)		image->dirty = true;
HXLINE(1263)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixels,(void))

int ImageDataUtil_obj::threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,int color,int mask,bool copySource,int format){
            	HX_GC_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1268_threshold)
HXLINE(1269)		int _color;
HXDLIN(1269)		int _mask;
HXDLIN(1269)		int _threshold;
HXLINE(1271)		switch((int)(format)){
            			case (int)1: {
HXLINE(1274)				int argb = color;
HXDLIN(1274)				int this1 = (int)0;
HXDLIN(1274)				int rgba = this1;
HXDLIN(1274)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1274)				_color = rgba;
HXLINE(1275)				int argb1 = mask;
HXDLIN(1275)				int this2 = (int)0;
HXDLIN(1275)				int rgba1 = this2;
HXDLIN(1275)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1275)				_mask = rgba1;
HXLINE(1276)				int argb2 = threshold;
HXDLIN(1276)				int this3 = (int)0;
HXDLIN(1276)				int rgba2 = this3;
HXDLIN(1276)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1276)				_threshold = rgba2;
            			}
            			break;
            			case (int)2: {
HXLINE(1279)				int bgra = color;
HXDLIN(1279)				int this4 = (int)0;
HXDLIN(1279)				int rgba3 = this4;
HXDLIN(1279)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1279)				_color = rgba3;
HXLINE(1280)				int bgra1 = mask;
HXDLIN(1280)				int this5 = (int)0;
HXDLIN(1280)				int rgba4 = this5;
HXDLIN(1280)				rgba4 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN(1280)				_mask = rgba4;
HXLINE(1281)				int bgra2 = threshold;
HXDLIN(1281)				int this6 = (int)0;
HXDLIN(1281)				int rgba5 = this6;
HXDLIN(1281)				rgba5 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra2,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra2 & (int)(int)255) & (int)(int)255));
HXDLIN(1281)				_threshold = rgba5;
            			}
            			break;
            			default:{
HXLINE(1284)				_color = color;
HXLINE(1285)				_mask = mask;
HXLINE(1286)				_threshold = threshold;
            			}
            		}
HXLINE(1289)		int _operation;
HXDLIN(1289)		::String _hx_switch_0 = operation;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1289)			_operation = (int)0;
HXDLIN(1289)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1289)			_operation = (int)2;
HXDLIN(1289)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1289)			_operation = (int)3;
HXDLIN(1289)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1289)			_operation = (int)1;
HXDLIN(1289)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1289)			_operation = (int)4;
HXDLIN(1289)			goto _hx_goto_64;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1289)			_operation = (int)5;
HXDLIN(1289)			goto _hx_goto_64;
            		}
            		/* default */{
HXLINE(1289)			_operation = (int)-1;
            		}
            		_hx_goto_64:;
HXLINE(1300)		if ((_operation == (int)-1)) {
HXLINE(1300)			return (int)0;
            		}
HXLINE(1302)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE(1303)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE(1305)		bool _hx_tmp;
HXDLIN(1305)		if (hx::IsNotNull( srcData )) {
HXLINE(1305)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(1305)			_hx_tmp = true;
            		}
HXDLIN(1305)		if (_hx_tmp) {
HXLINE(1305)			return (int)0;
            		}
HXLINE(1307)		int hits = (int)0;
HXLINE(1310)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1310)			 ::Dynamic hits1 = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN(1310)			hits = ::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_threshold(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),_operation,((int)((int)_threshold >> (int)(int)16) & (int)(int)65535),((int)_threshold & (int)(int)65535),((int)((int)_color >> (int)(int)16) & (int)(int)65535),((int)_color & (int)(int)65535),((int)((int)_mask >> (int)(int)16) & (int)(int)65535),((int)_mask & (int)(int)65535),copySource);
            		}
            		else {
HXLINE(1315)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView srcView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE(1316)			 ::lime::_internal::graphics::_ImageDataUtil::ImageDataView destView =  ::lime::_internal::graphics::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE(1318)			int srcFormat = sourceImage->buffer->format;
HXLINE(1319)			int destFormat = image->buffer->format;
HXLINE(1320)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE(1321)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE(1323)			int srcPosition;
HXDLIN(1323)			int destPosition;
HXDLIN(1323)			int srcPixel;
HXDLIN(1323)			int destPixel;
HXDLIN(1323)			int pixelMask;
HXDLIN(1323)			bool test;
HXDLIN(1323)			int value;
HXLINE(1325)			{
HXLINE(1325)				int _g1 = (int)0;
HXDLIN(1325)				int _g = destView->height;
HXDLIN(1325)				while((_g1 < _g)){
HXLINE(1325)					_g1 = (_g1 + (int)1);
HXDLIN(1325)					int y = (_g1 - (int)1);
HXLINE(1327)					int srcView1 = srcView->byteOffset;
HXDLIN(1327)					srcPosition = (srcView1 + (srcView->stride * y));
HXLINE(1328)					int destView1 = destView->byteOffset;
HXDLIN(1328)					destPosition = (destView1 + (destView->stride * y));
HXLINE(1330)					{
HXLINE(1330)						int _g3 = (int)0;
HXDLIN(1330)						int _g2 = destView->width;
HXDLIN(1330)						while((_g3 < _g2)){
HXLINE(1330)							_g3 = (_g3 + (int)1);
HXDLIN(1330)							int x = (_g3 - (int)1);
HXLINE(1332)							{
HXLINE(1332)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE(1332)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1332)										int srcData1 = srcData->byteOffset;
HXDLIN(1332)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData1 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1332)										int srcData2 = srcData->byteOffset;
HXDLIN(1332)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData2 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1332)										int srcData3 = srcData->byteOffset;
HXDLIN(1332)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData3 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1332)										int srcData4 = srcData->byteOffset;
HXDLIN(1332)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData4 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1332)										int srcData5 = srcData->byteOffset;
HXDLIN(1332)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData5 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1332)										int srcData6 = srcData->byteOffset;
HXDLIN(1332)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData6 + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN(1332)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1332)										int srcData7 = srcData->byteOffset;
HXDLIN(1332)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData7 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1332)										int srcData8 = srcData->byteOffset;
HXDLIN(1332)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData8 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1332)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1332)										int srcData9 = srcData->byteOffset;
HXDLIN(1332)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData9 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(1332)								if (srcPremultiplied) {
HXLINE(1332)									bool _hx_tmp1;
HXDLIN(1332)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE(1332)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(1332)										_hx_tmp1 = false;
            									}
HXDLIN(1332)									if (_hx_tmp1) {
HXLINE(1332)										::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN(1332)										{
HXLINE(1332)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1332)											int r3 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1332)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1332)											int g3 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1332)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1332)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(1334)							pixelMask = ((int)srcPixel & (int)_mask);
HXLINE(1336)							int tmp1;
HXDLIN(1336)							int tmp2;
HXDLIN(1336)							tmp1 = ((int)hx::UShr(pixelMask,(int)24) & (int)(int)255);
HXDLIN(1336)							tmp2 = ((int)hx::UShr(_threshold,(int)24) & (int)(int)255);
HXDLIN(1336)							if ((tmp1 != tmp2)) {
HXLINE(1336)								bool aNeg = (tmp1 < (int)0);
HXDLIN(1336)								bool bNeg = (tmp2 < (int)0);
HXDLIN(1336)								bool value1;
HXDLIN(1336)								if ((aNeg != bNeg)) {
HXLINE(1336)									value1 = aNeg;
            								}
            								else {
HXLINE(1336)									value1 = (tmp1 > tmp2);
            								}
HXDLIN(1336)								if (value1) {
HXLINE(1336)									value = (int)1;
            								}
            								else {
HXLINE(1336)									value = (int)-1;
            								}
            							}
            							else {
HXLINE(1336)								tmp1 = ((int)hx::UShr(pixelMask,(int)16) & (int)(int)255);
HXDLIN(1336)								tmp2 = ((int)hx::UShr(_threshold,(int)16) & (int)(int)255);
HXDLIN(1336)								if ((tmp1 != tmp2)) {
HXLINE(1336)									bool aNeg1 = (tmp1 < (int)0);
HXDLIN(1336)									bool bNeg1 = (tmp2 < (int)0);
HXDLIN(1336)									bool value2;
HXDLIN(1336)									if ((aNeg1 != bNeg1)) {
HXLINE(1336)										value2 = aNeg1;
            									}
            									else {
HXLINE(1336)										value2 = (tmp1 > tmp2);
            									}
HXDLIN(1336)									if (value2) {
HXLINE(1336)										value = (int)1;
            									}
            									else {
HXLINE(1336)										value = (int)-1;
            									}
            								}
            								else {
HXLINE(1336)									tmp1 = ((int)hx::UShr(pixelMask,(int)8) & (int)(int)255);
HXDLIN(1336)									tmp2 = ((int)hx::UShr(_threshold,(int)8) & (int)(int)255);
HXDLIN(1336)									if ((tmp1 != tmp2)) {
HXLINE(1336)										bool aNeg2 = (tmp1 < (int)0);
HXDLIN(1336)										bool bNeg2 = (tmp2 < (int)0);
HXDLIN(1336)										bool value3;
HXDLIN(1336)										if ((aNeg2 != bNeg2)) {
HXLINE(1336)											value3 = aNeg2;
            										}
            										else {
HXLINE(1336)											value3 = (tmp1 > tmp2);
            										}
HXDLIN(1336)										if (value3) {
HXLINE(1336)											value = (int)1;
            										}
            										else {
HXLINE(1336)											value = (int)-1;
            										}
            									}
            									else {
HXLINE(1336)										tmp1 = ((int)pixelMask & (int)(int)255);
HXDLIN(1336)										tmp2 = ((int)_threshold & (int)(int)255);
HXDLIN(1336)										if ((tmp1 != tmp2)) {
HXLINE(1336)											bool aNeg3 = (tmp1 < (int)0);
HXDLIN(1336)											bool bNeg3 = (tmp2 < (int)0);
HXDLIN(1336)											bool value4;
HXDLIN(1336)											if ((aNeg3 != bNeg3)) {
HXLINE(1336)												value4 = aNeg3;
            											}
            											else {
HXLINE(1336)												value4 = (tmp1 > tmp2);
            											}
HXDLIN(1336)											if (value4) {
HXLINE(1336)												value = (int)1;
            											}
            											else {
HXLINE(1336)												value = (int)-1;
            											}
            										}
            										else {
HXLINE(1336)											value = (int)0;
            										}
            									}
            								}
            							}
HXLINE(1338)							switch((int)(_operation)){
            								case (int)0: {
HXLINE(1340)									test = (value != (int)0);
            								}
            								break;
            								case (int)1: {
HXLINE(1341)									test = (value == (int)0);
            								}
            								break;
            								case (int)2: {
HXLINE(1342)									test = (value == (int)-1);
            								}
            								break;
            								case (int)3: {
HXLINE(1343)									if ((value != (int)0)) {
HXLINE(1343)										test = (value == (int)-1);
            									}
            									else {
HXLINE(1343)										test = true;
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1344)									test = (value == (int)1);
            								}
            								break;
            								case (int)5: {
HXLINE(1345)									if ((value != (int)0)) {
HXLINE(1345)										test = (value == (int)1);
            									}
            									else {
HXLINE(1345)										test = true;
            									}
            								}
            								break;
            								default:{
HXLINE(1346)									test = false;
            								}
            							}
HXLINE(1349)							if (test) {
HXLINE(1351)								{
HXLINE(1351)									if (destPremultiplied) {
HXLINE(1351)										if ((((int)_color & (int)(int)255) == (int)0)) {
HXLINE(1351)											if ((_color != (int)0)) {
HXLINE(1351)												_color = (int)0;
            											}
            										}
            										else {
HXLINE(1351)											if ((((int)_color & (int)(int)255) != (int)255)) {
HXLINE(1351)												 ::lime::utils::ArrayBufferView this10 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1351)												int this11 = this10->byteOffset;
HXDLIN(1351)												::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this10->buffer->b,(this11 + (((int)_color & (int)(int)255) * (int)4)));
HXDLIN(1351)												_color = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(_color,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_color & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1351)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1351)											{
HXLINE(1351)												int val = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1351)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val1 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData1 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData1 + (destPosition + (int)1)),val1);
            												}
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val2 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData2 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData2 + (destPosition + (int)2)),val2);
            												}
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val3 = ((int)_color & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData3 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData3 + (destPosition + (int)3)),val3);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1351)											{
HXLINE(1351)												int val4 = ((int)_color & (int)(int)255);
HXDLIN(1351)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val5 = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData4 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData4 + (destPosition + (int)1)),val5);
            												}
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val6 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData5 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData5 + (destPosition + (int)2)),val6);
            												}
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val7 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData6 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData6 + (destPosition + (int)3)),val7);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1351)											{
HXLINE(1351)												int val8 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1351)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val9 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData7 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData7 + (destPosition + (int)1)),val9);
            												}
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val10 = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData8 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData8 + (destPosition + (int)2)),val10);
            												}
            											}
HXDLIN(1351)											{
HXLINE(1351)												int val11 = ((int)_color & (int)(int)255);
HXDLIN(1351)												{
HXLINE(1351)													int destData9 = destData->byteOffset;
HXDLIN(1351)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData9 + (destPosition + (int)3)),val11);
            												}
            											}
            										}
            										break;
            									}
            								}
HXLINE(1352)								hits = (hits + (int)1);
            							}
            							else {
HXLINE(1354)								if (copySource) {
HXLINE(1356)									if (destPremultiplied) {
HXLINE(1356)										if ((((int)srcPixel & (int)(int)255) == (int)0)) {
HXLINE(1356)											if ((srcPixel != (int)0)) {
HXLINE(1356)												srcPixel = (int)0;
            											}
            										}
            										else {
HXLINE(1356)											if ((((int)srcPixel & (int)(int)255) != (int)255)) {
HXLINE(1356)												 ::lime::utils::ArrayBufferView this12 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1356)												int this13 = this12->byteOffset;
HXDLIN(1356)												::lime::math::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this12->buffer->b,(this13 + (((int)srcPixel & (int)(int)255) * (int)4)));
HXDLIN(1356)												srcPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1356)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1356)											{
HXLINE(1356)												int val12 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1356)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val13 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData10 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val13);
            												}
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val14 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData11 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val14);
            												}
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val15 = ((int)srcPixel & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData12 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val15);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1356)											{
HXLINE(1356)												int val16 = ((int)srcPixel & (int)(int)255);
HXDLIN(1356)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val17 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData13 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val17);
            												}
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val18 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData14 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val18);
            												}
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val19 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData15 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val19);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1356)											{
HXLINE(1356)												int val20 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1356)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val21 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData16 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val21);
            												}
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val22 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData17 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val22);
            												}
            											}
HXDLIN(1356)											{
HXLINE(1356)												int val23 = ((int)srcPixel & (int)(int)255);
HXDLIN(1356)												{
HXLINE(1356)													int destData18 = destData->byteOffset;
HXDLIN(1356)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val23);
            												}
            											}
            										}
            										break;
            									}
            								}
            							}
HXLINE(1359)							srcPosition = (srcPosition + (int)4);
HXLINE(1360)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1365)		if ((hits > (int)0)) {
HXLINE(1367)			image->dirty = true;
HXLINE(1368)			image->version++;
            		}
HXLINE(1371)		return hits;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ImageDataUtil_obj,threshold,return )

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1375_unmultiplyAlpha)
HXLINE(1376)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1377)		if (hx::IsNull( data )) {
HXLINE(1377)			return;
            		}
HXLINE(1380)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1380)			::lime::_internal::backend::native::NativeCFFI_obj::lime_image_data_util_unmultiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1384)			int format = image->buffer->format;
HXLINE(1385)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1386)			int pixel;
HXLINE(1388)			{
HXLINE(1388)				int _g1 = (int)0;
HXDLIN(1388)				int _g = length;
HXDLIN(1388)				while((_g1 < _g)){
HXLINE(1388)					_g1 = (_g1 + (int)1);
HXDLIN(1388)					int i = (_g1 - (int)1);
HXLINE(1390)					{
HXLINE(1390)						int offset = (i * (int)4);
HXDLIN(1390)						switch((int)(format)){
            							case (int)0: {
HXLINE(1390)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1390)								int data1 = data->byteOffset;
HXDLIN(1390)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1390)								int data2 = data->byteOffset;
HXDLIN(1390)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1390)								int data3 = data->byteOffset;
HXDLIN(1390)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1390)								int data4 = data->byteOffset;
HXDLIN(1390)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1390)								int data5 = data->byteOffset;
HXDLIN(1390)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1390)								int data6 = data->byteOffset;
HXDLIN(1390)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN(1390)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1390)								int data7 = data->byteOffset;
HXDLIN(1390)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1390)								int data8 = data->byteOffset;
HXDLIN(1390)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1390)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1390)								int data9 = data->byteOffset;
HXDLIN(1390)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
HXDLIN(1390)						bool _hx_tmp;
HXDLIN(1390)						if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(1390)							_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            						}
            						else {
HXLINE(1390)							_hx_tmp = false;
            						}
HXDLIN(1390)						if (_hx_tmp) {
HXLINE(1390)							::lime::math::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(1390)							{
HXLINE(1390)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1390)								int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1390)								 ::lime::utils::ArrayBufferView this2 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1390)								int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1390)								 ::lime::utils::ArrayBufferView this3 = ::lime::math::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1390)								pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
            					}
HXLINE(1391)					{
HXLINE(1391)						int offset1 = (i * (int)4);
HXDLIN(1391)						switch((int)(format)){
            							case (int)0: {
HXLINE(1391)								{
HXLINE(1391)									int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1391)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data10 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset1 + (int)1)),val1);
            									}
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data11 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset1 + (int)2)),val2);
            									}
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data12 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset1 + (int)3)),val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1391)								{
HXLINE(1391)									int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1391)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data13 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset1 + (int)1)),val5);
            									}
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data14 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset1 + (int)2)),val6);
            									}
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data15 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset1 + (int)3)),val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1391)								{
HXLINE(1391)									int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1391)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data16 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset1 + (int)1)),val9);
            									}
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data17 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset1 + (int)2)),val10);
            									}
            								}
HXDLIN(1391)								{
HXLINE(1391)									int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1391)									{
HXLINE(1391)										int data18 = data->byteOffset;
HXDLIN(1391)										::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset1 + (int)3)),val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1395)		image->buffer->premultiplied = false;
HXLINE(1396)		image->dirty = true;
HXLINE(1397)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))

void ImageDataUtil_obj::_hx___boxBlur( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,Float bx,Float by){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1401___boxBlur)
HXLINE(1404)		{
HXLINE(1404)			int offset = (int)0;
HXDLIN(1404)			if (hx::IsNotNull( imgA )) {
HXLINE(1404)				 ::haxe::io::Bytes imgB1 = imgB->buffer;
HXDLIN(1404)				imgB1->blit((offset * imgB->bytesPerElement),imgA->buffer,imgA->byteOffset,imgA->byteLength);
            			}
            			else {
HXLINE(1404)				HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            			}
            		}
HXLINE(1406)		int bx1 = ::Std_obj::_hx_int(bx);
HXLINE(1407)		int by1 = ::Std_obj::_hx_int(by);
HXLINE(1409)		{
HXLINE(1409)			Float iarr = ((Float)(int)1 / (Float)((bx1 + bx1) + (int)1));
HXDLIN(1409)			int ti;
HXDLIN(1409)			int li;
HXDLIN(1409)			int ri;
HXDLIN(1409)			 ::Dynamic fv;
HXDLIN(1409)			 ::Dynamic lv;
HXDLIN(1409)			int val;
HXDLIN(1409)			{
HXLINE(1409)				int _g1 = (int)0;
HXDLIN(1409)				int _g = h;
HXDLIN(1409)				while((_g1 < _g)){
HXLINE(1409)					_g1 = (_g1 + (int)1);
HXDLIN(1409)					int i = (_g1 - (int)1);
HXDLIN(1409)					ti = (i * w);
HXDLIN(1409)					li = ti;
HXDLIN(1409)					ri = (ti + bx1);
HXDLIN(1409)					int imgB2 = imgB->byteOffset;
HXDLIN(1409)					fv = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB2 + (ti * (int)4))) & (int)(int)255);
HXDLIN(1409)					int imgB3 = imgB->byteOffset;
HXDLIN(1409)					lv = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB3 + (((ti + w) - (int)1) * (int)4))) & (int)(int)255);
HXDLIN(1409)					val = ((bx1 + (int)1) * fv);
HXDLIN(1409)					{
HXLINE(1409)						int _g3 = (int)0;
HXDLIN(1409)						int _g2 = bx1;
HXDLIN(1409)						while((_g3 < _g2)){
HXLINE(1409)							_g3 = (_g3 + (int)1);
HXDLIN(1409)							int j = (_g3 - (int)1);
HXDLIN(1409)							int imgB4 = imgB->byteOffset;
HXDLIN(1409)							val = (val + ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB4 + ((ti + j) * (int)4))) & (int)(int)255));
            						}
            					}
HXDLIN(1409)					{
HXLINE(1409)						int _g31 = (int)0;
HXDLIN(1409)						int _g21 = (bx1 + (int)1);
HXDLIN(1409)						while((_g31 < _g21)){
HXLINE(1409)							_g31 = (_g31 + (int)1);
HXDLIN(1409)							int j1 = (_g31 - (int)1);
HXDLIN(1409)							int imgB5 = imgB->byteOffset;
HXDLIN(1409)							val = (val + (((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB5 + (ri * (int)4))) & (int)(int)255) - fv));
HXDLIN(1409)							{
HXLINE(1409)								int _hx_int = val;
HXDLIN(1409)								Float val1;
HXDLIN(1409)								if ((_hx_int < (int)0)) {
HXLINE(1409)									val1 = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE(1409)									val1 = (_hx_int + ((Float)0.0));
            								}
HXDLIN(1409)								int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1409)								{
HXLINE(1409)									int imgA1 = imgA->byteOffset;
HXDLIN(1409)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA1 + (ti * (int)4)),val2);
            								}
            							}
HXDLIN(1409)							ri = (ri + (int)1);
HXDLIN(1409)							ti = (ti + (int)1);
            						}
            					}
HXDLIN(1409)					{
HXLINE(1409)						int _g32 = (bx1 + (int)1);
HXDLIN(1409)						int _g22 = (w - bx1);
HXDLIN(1409)						while((_g32 < _g22)){
HXLINE(1409)							_g32 = (_g32 + (int)1);
HXDLIN(1409)							int j2 = (_g32 - (int)1);
HXDLIN(1409)							int imgB6 = imgB->byteOffset;
HXDLIN(1409)							int a = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB6 + (ri * (int)4))) & (int)(int)255);
HXDLIN(1409)							int imgB7 = imgB->byteOffset;
HXDLIN(1409)							val = (val + (a - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB7 + (li * (int)4))) & (int)(int)255)));
HXDLIN(1409)							{
HXLINE(1409)								int int1 = val;
HXDLIN(1409)								Float val3;
HXDLIN(1409)								if ((int1 < (int)0)) {
HXLINE(1409)									val3 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE(1409)									val3 = (int1 + ((Float)0.0));
            								}
HXDLIN(1409)								int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1409)								{
HXLINE(1409)									int imgA2 = imgA->byteOffset;
HXDLIN(1409)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA2 + (ti * (int)4)),val4);
            								}
            							}
HXDLIN(1409)							ri = (ri + (int)1);
HXDLIN(1409)							li = (li + (int)1);
HXDLIN(1409)							ti = (ti + (int)1);
            						}
            					}
HXDLIN(1409)					{
HXLINE(1409)						int _g33 = (w - bx1);
HXDLIN(1409)						int _g23 = w;
HXDLIN(1409)						while((_g33 < _g23)){
HXLINE(1409)							_g33 = (_g33 + (int)1);
HXDLIN(1409)							int j3 = (_g33 - (int)1);
HXDLIN(1409)							int imgB8 = imgB->byteOffset;
HXDLIN(1409)							val = (val + (lv - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB8 + (li * (int)4))) & (int)(int)255)));
HXDLIN(1409)							{
HXLINE(1409)								int int2 = val;
HXDLIN(1409)								Float val5;
HXDLIN(1409)								if ((int2 < (int)0)) {
HXLINE(1409)									val5 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE(1409)									val5 = (int2 + ((Float)0.0));
            								}
HXDLIN(1409)								int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1409)								{
HXLINE(1409)									int imgA3 = imgA->byteOffset;
HXDLIN(1409)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA3 + (ti * (int)4)),val6);
            								}
            							}
HXDLIN(1409)							li = (li + (int)1);
HXDLIN(1409)							ti = (ti + (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1410)		{
HXLINE(1410)			Float iarr1 = ((Float)(int)1 / (Float)((bx1 + bx1) + (int)1));
HXDLIN(1410)			int ti1;
HXDLIN(1410)			int li1;
HXDLIN(1410)			int ri1;
HXDLIN(1410)			 ::Dynamic fv1;
HXDLIN(1410)			 ::Dynamic lv1;
HXDLIN(1410)			int val7;
HXDLIN(1410)			{
HXLINE(1410)				int _g11 = (int)0;
HXDLIN(1410)				int _g4 = h;
HXDLIN(1410)				while((_g11 < _g4)){
HXLINE(1410)					_g11 = (_g11 + (int)1);
HXDLIN(1410)					int i1 = (_g11 - (int)1);
HXDLIN(1410)					ti1 = (i1 * w);
HXDLIN(1410)					li1 = ti1;
HXDLIN(1410)					ri1 = (ti1 + bx1);
HXDLIN(1410)					int imgB9 = imgB->byteOffset;
HXDLIN(1410)					fv1 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB9 + ((ti1 * (int)4) + (int)1))) & (int)(int)255);
HXDLIN(1410)					int imgB10 = imgB->byteOffset;
HXDLIN(1410)					lv1 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB10 + ((((ti1 + w) - (int)1) * (int)4) + (int)1))) & (int)(int)255);
HXDLIN(1410)					val7 = ((bx1 + (int)1) * fv1);
HXDLIN(1410)					{
HXLINE(1410)						int _g34 = (int)0;
HXDLIN(1410)						int _g24 = bx1;
HXDLIN(1410)						while((_g34 < _g24)){
HXLINE(1410)							_g34 = (_g34 + (int)1);
HXDLIN(1410)							int j4 = (_g34 - (int)1);
HXDLIN(1410)							int imgB11 = imgB->byteOffset;
HXDLIN(1410)							val7 = (val7 + ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB11 + (((ti1 + j4) * (int)4) + (int)1))) & (int)(int)255));
            						}
            					}
HXDLIN(1410)					{
HXLINE(1410)						int _g35 = (int)0;
HXDLIN(1410)						int _g25 = (bx1 + (int)1);
HXDLIN(1410)						while((_g35 < _g25)){
HXLINE(1410)							_g35 = (_g35 + (int)1);
HXDLIN(1410)							int j5 = (_g35 - (int)1);
HXDLIN(1410)							int imgB12 = imgB->byteOffset;
HXDLIN(1410)							val7 = (val7 + (((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB12 + ((ri1 * (int)4) + (int)1))) & (int)(int)255) - fv1));
HXDLIN(1410)							{
HXLINE(1410)								int int3 = val7;
HXDLIN(1410)								Float val8;
HXDLIN(1410)								if ((int3 < (int)0)) {
HXLINE(1410)									val8 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE(1410)									val8 = (int3 + ((Float)0.0));
            								}
HXDLIN(1410)								int val9 = ::Math_obj::round((val8 * iarr1));
HXDLIN(1410)								{
HXLINE(1410)									int imgA4 = imgA->byteOffset;
HXDLIN(1410)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA4 + ((ti1 * (int)4) + (int)1)),val9);
            								}
            							}
HXDLIN(1410)							ri1 = (ri1 + (int)1);
HXDLIN(1410)							ti1 = (ti1 + (int)1);
            						}
            					}
HXDLIN(1410)					{
HXLINE(1410)						int _g36 = (bx1 + (int)1);
HXDLIN(1410)						int _g26 = (w - bx1);
HXDLIN(1410)						while((_g36 < _g26)){
HXLINE(1410)							_g36 = (_g36 + (int)1);
HXDLIN(1410)							int j6 = (_g36 - (int)1);
HXDLIN(1410)							int imgB13 = imgB->byteOffset;
HXDLIN(1410)							int a1 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB13 + ((ri1 * (int)4) + (int)1))) & (int)(int)255);
HXDLIN(1410)							int imgB14 = imgB->byteOffset;
HXDLIN(1410)							val7 = (val7 + (a1 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB14 + ((li1 * (int)4) + (int)1))) & (int)(int)255)));
HXDLIN(1410)							{
HXLINE(1410)								int int4 = val7;
HXDLIN(1410)								Float val10;
HXDLIN(1410)								if ((int4 < (int)0)) {
HXLINE(1410)									val10 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE(1410)									val10 = (int4 + ((Float)0.0));
            								}
HXDLIN(1410)								int val11 = ::Math_obj::round((val10 * iarr1));
HXDLIN(1410)								{
HXLINE(1410)									int imgA5 = imgA->byteOffset;
HXDLIN(1410)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA5 + ((ti1 * (int)4) + (int)1)),val11);
            								}
            							}
HXDLIN(1410)							ri1 = (ri1 + (int)1);
HXDLIN(1410)							li1 = (li1 + (int)1);
HXDLIN(1410)							ti1 = (ti1 + (int)1);
            						}
            					}
HXDLIN(1410)					{
HXLINE(1410)						int _g37 = (w - bx1);
HXDLIN(1410)						int _g27 = w;
HXDLIN(1410)						while((_g37 < _g27)){
HXLINE(1410)							_g37 = (_g37 + (int)1);
HXDLIN(1410)							int j7 = (_g37 - (int)1);
HXDLIN(1410)							int imgB15 = imgB->byteOffset;
HXDLIN(1410)							val7 = (val7 + (lv1 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB15 + ((li1 * (int)4) + (int)1))) & (int)(int)255)));
HXDLIN(1410)							{
HXLINE(1410)								int int5 = val7;
HXDLIN(1410)								Float val12;
HXDLIN(1410)								if ((int5 < (int)0)) {
HXLINE(1410)									val12 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE(1410)									val12 = (int5 + ((Float)0.0));
            								}
HXDLIN(1410)								int val13 = ::Math_obj::round((val12 * iarr1));
HXDLIN(1410)								{
HXLINE(1410)									int imgA6 = imgA->byteOffset;
HXDLIN(1410)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA6 + ((ti1 * (int)4) + (int)1)),val13);
            								}
            							}
HXDLIN(1410)							li1 = (li1 + (int)1);
HXDLIN(1410)							ti1 = (ti1 + (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1411)		{
HXLINE(1411)			Float iarr2 = ((Float)(int)1 / (Float)((bx1 + bx1) + (int)1));
HXDLIN(1411)			int ti2;
HXDLIN(1411)			int li2;
HXDLIN(1411)			int ri2;
HXDLIN(1411)			 ::Dynamic fv2;
HXDLIN(1411)			 ::Dynamic lv2;
HXDLIN(1411)			int val14;
HXDLIN(1411)			{
HXLINE(1411)				int _g12 = (int)0;
HXDLIN(1411)				int _g5 = h;
HXDLIN(1411)				while((_g12 < _g5)){
HXLINE(1411)					_g12 = (_g12 + (int)1);
HXDLIN(1411)					int i2 = (_g12 - (int)1);
HXDLIN(1411)					ti2 = (i2 * w);
HXDLIN(1411)					li2 = ti2;
HXDLIN(1411)					ri2 = (ti2 + bx1);
HXDLIN(1411)					int imgB16 = imgB->byteOffset;
HXDLIN(1411)					fv2 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB16 + ((ti2 * (int)4) + (int)2))) & (int)(int)255);
HXDLIN(1411)					int imgB17 = imgB->byteOffset;
HXDLIN(1411)					lv2 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB17 + ((((ti2 + w) - (int)1) * (int)4) + (int)2))) & (int)(int)255);
HXDLIN(1411)					val14 = ((bx1 + (int)1) * fv2);
HXDLIN(1411)					{
HXLINE(1411)						int _g38 = (int)0;
HXDLIN(1411)						int _g28 = bx1;
HXDLIN(1411)						while((_g38 < _g28)){
HXLINE(1411)							_g38 = (_g38 + (int)1);
HXDLIN(1411)							int j8 = (_g38 - (int)1);
HXDLIN(1411)							int imgB18 = imgB->byteOffset;
HXDLIN(1411)							val14 = (val14 + ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB18 + (((ti2 + j8) * (int)4) + (int)2))) & (int)(int)255));
            						}
            					}
HXDLIN(1411)					{
HXLINE(1411)						int _g39 = (int)0;
HXDLIN(1411)						int _g29 = (bx1 + (int)1);
HXDLIN(1411)						while((_g39 < _g29)){
HXLINE(1411)							_g39 = (_g39 + (int)1);
HXDLIN(1411)							int j9 = (_g39 - (int)1);
HXDLIN(1411)							int imgB19 = imgB->byteOffset;
HXDLIN(1411)							val14 = (val14 + (((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB19 + ((ri2 * (int)4) + (int)2))) & (int)(int)255) - fv2));
HXDLIN(1411)							{
HXLINE(1411)								int int6 = val14;
HXDLIN(1411)								Float val15;
HXDLIN(1411)								if ((int6 < (int)0)) {
HXLINE(1411)									val15 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE(1411)									val15 = (int6 + ((Float)0.0));
            								}
HXDLIN(1411)								int val16 = ::Math_obj::round((val15 * iarr2));
HXDLIN(1411)								{
HXLINE(1411)									int imgA7 = imgA->byteOffset;
HXDLIN(1411)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA7 + ((ti2 * (int)4) + (int)2)),val16);
            								}
            							}
HXDLIN(1411)							ri2 = (ri2 + (int)1);
HXDLIN(1411)							ti2 = (ti2 + (int)1);
            						}
            					}
HXDLIN(1411)					{
HXLINE(1411)						int _g310 = (bx1 + (int)1);
HXDLIN(1411)						int _g210 = (w - bx1);
HXDLIN(1411)						while((_g310 < _g210)){
HXLINE(1411)							_g310 = (_g310 + (int)1);
HXDLIN(1411)							int j10 = (_g310 - (int)1);
HXDLIN(1411)							int imgB20 = imgB->byteOffset;
HXDLIN(1411)							int a2 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB20 + ((ri2 * (int)4) + (int)2))) & (int)(int)255);
HXDLIN(1411)							int imgB21 = imgB->byteOffset;
HXDLIN(1411)							val14 = (val14 + (a2 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB21 + ((li2 * (int)4) + (int)2))) & (int)(int)255)));
HXDLIN(1411)							{
HXLINE(1411)								int int7 = val14;
HXDLIN(1411)								Float val17;
HXDLIN(1411)								if ((int7 < (int)0)) {
HXLINE(1411)									val17 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE(1411)									val17 = (int7 + ((Float)0.0));
            								}
HXDLIN(1411)								int val18 = ::Math_obj::round((val17 * iarr2));
HXDLIN(1411)								{
HXLINE(1411)									int imgA8 = imgA->byteOffset;
HXDLIN(1411)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA8 + ((ti2 * (int)4) + (int)2)),val18);
            								}
            							}
HXDLIN(1411)							ri2 = (ri2 + (int)1);
HXDLIN(1411)							li2 = (li2 + (int)1);
HXDLIN(1411)							ti2 = (ti2 + (int)1);
            						}
            					}
HXDLIN(1411)					{
HXLINE(1411)						int _g311 = (w - bx1);
HXDLIN(1411)						int _g211 = w;
HXDLIN(1411)						while((_g311 < _g211)){
HXLINE(1411)							_g311 = (_g311 + (int)1);
HXDLIN(1411)							int j11 = (_g311 - (int)1);
HXDLIN(1411)							int imgB22 = imgB->byteOffset;
HXDLIN(1411)							val14 = (val14 + (lv2 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB22 + ((li2 * (int)4) + (int)2))) & (int)(int)255)));
HXDLIN(1411)							{
HXLINE(1411)								int int8 = val14;
HXDLIN(1411)								Float val19;
HXDLIN(1411)								if ((int8 < (int)0)) {
HXLINE(1411)									val19 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE(1411)									val19 = (int8 + ((Float)0.0));
            								}
HXDLIN(1411)								int val20 = ::Math_obj::round((val19 * iarr2));
HXDLIN(1411)								{
HXLINE(1411)									int imgA9 = imgA->byteOffset;
HXDLIN(1411)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA9 + ((ti2 * (int)4) + (int)2)),val20);
            								}
            							}
HXDLIN(1411)							li2 = (li2 + (int)1);
HXDLIN(1411)							ti2 = (ti2 + (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1412)		{
HXLINE(1412)			Float iarr3 = ((Float)(int)1 / (Float)((bx1 + bx1) + (int)1));
HXDLIN(1412)			int ti3;
HXDLIN(1412)			int li3;
HXDLIN(1412)			int ri3;
HXDLIN(1412)			 ::Dynamic fv3;
HXDLIN(1412)			 ::Dynamic lv3;
HXDLIN(1412)			int val21;
HXDLIN(1412)			{
HXLINE(1412)				int _g13 = (int)0;
HXDLIN(1412)				int _g6 = h;
HXDLIN(1412)				while((_g13 < _g6)){
HXLINE(1412)					_g13 = (_g13 + (int)1);
HXDLIN(1412)					int i3 = (_g13 - (int)1);
HXDLIN(1412)					ti3 = (i3 * w);
HXDLIN(1412)					li3 = ti3;
HXDLIN(1412)					ri3 = (ti3 + bx1);
HXDLIN(1412)					int imgB23 = imgB->byteOffset;
HXDLIN(1412)					fv3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB23 + ((ti3 * (int)4) + (int)3))) & (int)(int)255);
HXDLIN(1412)					int imgB24 = imgB->byteOffset;
HXDLIN(1412)					lv3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB24 + ((((ti3 + w) - (int)1) * (int)4) + (int)3))) & (int)(int)255);
HXDLIN(1412)					val21 = ((bx1 + (int)1) * fv3);
HXDLIN(1412)					{
HXLINE(1412)						int _g312 = (int)0;
HXDLIN(1412)						int _g212 = bx1;
HXDLIN(1412)						while((_g312 < _g212)){
HXLINE(1412)							_g312 = (_g312 + (int)1);
HXDLIN(1412)							int j12 = (_g312 - (int)1);
HXDLIN(1412)							int imgB25 = imgB->byteOffset;
HXDLIN(1412)							val21 = (val21 + ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB25 + (((ti3 + j12) * (int)4) + (int)3))) & (int)(int)255));
            						}
            					}
HXDLIN(1412)					{
HXLINE(1412)						int _g313 = (int)0;
HXDLIN(1412)						int _g213 = (bx1 + (int)1);
HXDLIN(1412)						while((_g313 < _g213)){
HXLINE(1412)							_g313 = (_g313 + (int)1);
HXDLIN(1412)							int j13 = (_g313 - (int)1);
HXDLIN(1412)							int imgB26 = imgB->byteOffset;
HXDLIN(1412)							val21 = (val21 + (((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB26 + ((ri3 * (int)4) + (int)3))) & (int)(int)255) - fv3));
HXDLIN(1412)							{
HXLINE(1412)								int int9 = val21;
HXDLIN(1412)								Float val22;
HXDLIN(1412)								if ((int9 < (int)0)) {
HXLINE(1412)									val22 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE(1412)									val22 = (int9 + ((Float)0.0));
            								}
HXDLIN(1412)								int val23 = ::Math_obj::round((val22 * iarr3));
HXDLIN(1412)								{
HXLINE(1412)									int imgA10 = imgA->byteOffset;
HXDLIN(1412)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA10 + ((ti3 * (int)4) + (int)3)),val23);
            								}
            							}
HXDLIN(1412)							ri3 = (ri3 + (int)1);
HXDLIN(1412)							ti3 = (ti3 + (int)1);
            						}
            					}
HXDLIN(1412)					{
HXLINE(1412)						int _g314 = (bx1 + (int)1);
HXDLIN(1412)						int _g214 = (w - bx1);
HXDLIN(1412)						while((_g314 < _g214)){
HXLINE(1412)							_g314 = (_g314 + (int)1);
HXDLIN(1412)							int j14 = (_g314 - (int)1);
HXDLIN(1412)							int imgB27 = imgB->byteOffset;
HXDLIN(1412)							int a3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB27 + ((ri3 * (int)4) + (int)3))) & (int)(int)255);
HXDLIN(1412)							int imgB28 = imgB->byteOffset;
HXDLIN(1412)							val21 = (val21 + (a3 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB28 + ((li3 * (int)4) + (int)3))) & (int)(int)255)));
HXDLIN(1412)							{
HXLINE(1412)								int int10 = val21;
HXDLIN(1412)								Float val24;
HXDLIN(1412)								if ((int10 < (int)0)) {
HXLINE(1412)									val24 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE(1412)									val24 = (int10 + ((Float)0.0));
            								}
HXDLIN(1412)								int val25 = ::Math_obj::round((val24 * iarr3));
HXDLIN(1412)								{
HXLINE(1412)									int imgA11 = imgA->byteOffset;
HXDLIN(1412)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA11 + ((ti3 * (int)4) + (int)3)),val25);
            								}
            							}
HXDLIN(1412)							ri3 = (ri3 + (int)1);
HXDLIN(1412)							li3 = (li3 + (int)1);
HXDLIN(1412)							ti3 = (ti3 + (int)1);
            						}
            					}
HXDLIN(1412)					{
HXLINE(1412)						int _g315 = (w - bx1);
HXDLIN(1412)						int _g215 = w;
HXDLIN(1412)						while((_g315 < _g215)){
HXLINE(1412)							_g315 = (_g315 + (int)1);
HXDLIN(1412)							int j15 = (_g315 - (int)1);
HXDLIN(1412)							int imgB29 = imgB->byteOffset;
HXDLIN(1412)							val21 = (val21 + (lv3 - ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB29 + ((li3 * (int)4) + (int)3))) & (int)(int)255)));
HXDLIN(1412)							{
HXLINE(1412)								int int11 = val21;
HXDLIN(1412)								Float val26;
HXDLIN(1412)								if ((int11 < (int)0)) {
HXLINE(1412)									val26 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE(1412)									val26 = (int11 + ((Float)0.0));
            								}
HXDLIN(1412)								int val27 = ::Math_obj::round((val26 * iarr3));
HXDLIN(1412)								{
HXLINE(1412)									int imgA12 = imgA->byteOffset;
HXDLIN(1412)									::__hxcpp_memory_set_byte(imgA->buffer->b,(imgA12 + ((ti3 * (int)4) + (int)3)),val27);
            								}
            							}
HXDLIN(1412)							li3 = (li3 + (int)1);
HXDLIN(1412)							ti3 = (ti3 + (int)1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1414)		{
HXLINE(1414)			Float iarr4 = ((Float)(int)1 / (Float)((by1 + by1) + (int)1));
HXDLIN(1414)			int ws = (w * (int)4);
HXDLIN(1414)			int ti4;
HXDLIN(1414)			int li4;
HXDLIN(1414)			int ri4;
HXDLIN(1414)			 ::Dynamic fv4;
HXDLIN(1414)			 ::Dynamic lv4;
HXDLIN(1414)			int val28;
HXDLIN(1414)			{
HXLINE(1414)				int _g14 = (int)0;
HXDLIN(1414)				int _g7 = w;
HXDLIN(1414)				while((_g14 < _g7)){
HXLINE(1414)					_g14 = (_g14 + (int)1);
HXDLIN(1414)					int i4 = (_g14 - (int)1);
HXDLIN(1414)					ti4 = (i4 * (int)4);
HXDLIN(1414)					li4 = ti4;
HXDLIN(1414)					ri4 = (ti4 + (by1 * ws));
HXDLIN(1414)					fv4 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti4)) & (int)(int)255);
HXDLIN(1414)					int imgA13 = imgA->byteOffset;
HXDLIN(1414)					lv4 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA13 + (ti4 + (ws * (h - (int)1))))) & (int)(int)255);
HXDLIN(1414)					val28 = ((by1 + (int)1) * fv4);
HXDLIN(1414)					{
HXLINE(1414)						int _g316 = (int)0;
HXDLIN(1414)						int _g216 = by1;
HXDLIN(1414)						while((_g316 < _g216)){
HXLINE(1414)							_g316 = (_g316 + (int)1);
HXDLIN(1414)							int j16 = (_g316 - (int)1);
HXDLIN(1414)							int imgA14 = imgA->byteOffset;
HXDLIN(1414)							val28 = (val28 + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA14 + (ti4 + (j16 * ws)))) & (int)(int)255));
            						}
            					}
HXDLIN(1414)					{
HXLINE(1414)						int _g317 = (int)0;
HXDLIN(1414)						int _g217 = (by1 + (int)1);
HXDLIN(1414)						while((_g317 < _g217)){
HXLINE(1414)							_g317 = (_g317 + (int)1);
HXDLIN(1414)							int j17 = (_g317 - (int)1);
HXDLIN(1414)							val28 = (val28 + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri4)) & (int)(int)255) - fv4));
HXDLIN(1414)							{
HXLINE(1414)								int int12 = val28;
HXDLIN(1414)								Float val29;
HXDLIN(1414)								if ((int12 < (int)0)) {
HXLINE(1414)									val29 = (((Float)4294967296.0) + int12);
            								}
            								else {
HXLINE(1414)									val29 = (int12 + ((Float)0.0));
            								}
HXDLIN(1414)								int val30 = ::Math_obj::round((val29 * iarr4));
HXDLIN(1414)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val30);
            							}
HXDLIN(1414)							ri4 = (ri4 + ws);
HXDLIN(1414)							ti4 = (ti4 + ws);
            						}
            					}
HXDLIN(1414)					{
HXLINE(1414)						int _g318 = (by1 + (int)1);
HXDLIN(1414)						int _g218 = (h - by1);
HXDLIN(1414)						while((_g318 < _g218)){
HXLINE(1414)							_g318 = (_g318 + (int)1);
HXDLIN(1414)							int j18 = (_g318 - (int)1);
HXDLIN(1414)							int a4 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri4)) & (int)(int)255);
HXDLIN(1414)							val28 = (val28 + (a4 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li4)) & (int)(int)255)));
HXDLIN(1414)							{
HXLINE(1414)								int int13 = val28;
HXDLIN(1414)								Float val31;
HXDLIN(1414)								if ((int13 < (int)0)) {
HXLINE(1414)									val31 = (((Float)4294967296.0) + int13);
            								}
            								else {
HXLINE(1414)									val31 = (int13 + ((Float)0.0));
            								}
HXDLIN(1414)								int val32 = ::Math_obj::round((val31 * iarr4));
HXDLIN(1414)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val32);
            							}
HXDLIN(1414)							li4 = (li4 + ws);
HXDLIN(1414)							ri4 = (ri4 + ws);
HXDLIN(1414)							ti4 = (ti4 + ws);
            						}
            					}
HXDLIN(1414)					{
HXLINE(1414)						int _g319 = (h - by1);
HXDLIN(1414)						int _g219 = h;
HXDLIN(1414)						while((_g319 < _g219)){
HXLINE(1414)							_g319 = (_g319 + (int)1);
HXDLIN(1414)							int j19 = (_g319 - (int)1);
HXDLIN(1414)							val28 = (val28 + (lv4 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li4)) & (int)(int)255)));
HXDLIN(1414)							{
HXLINE(1414)								int int14 = val28;
HXDLIN(1414)								Float val33;
HXDLIN(1414)								if ((int14 < (int)0)) {
HXLINE(1414)									val33 = (((Float)4294967296.0) + int14);
            								}
            								else {
HXLINE(1414)									val33 = (int14 + ((Float)0.0));
            								}
HXDLIN(1414)								int val34 = ::Math_obj::round((val33 * iarr4));
HXDLIN(1414)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti4),val34);
            							}
HXDLIN(1414)							li4 = (li4 + ws);
HXDLIN(1414)							ti4 = (ti4 + ws);
            						}
            					}
            				}
            			}
            		}
HXLINE(1415)		{
HXLINE(1415)			Float iarr5 = ((Float)(int)1 / (Float)((by1 + by1) + (int)1));
HXDLIN(1415)			int ws1 = (w * (int)4);
HXDLIN(1415)			int ti5;
HXDLIN(1415)			int li5;
HXDLIN(1415)			int ri5;
HXDLIN(1415)			 ::Dynamic fv5;
HXDLIN(1415)			 ::Dynamic lv5;
HXDLIN(1415)			int val35;
HXDLIN(1415)			{
HXLINE(1415)				int _g15 = (int)0;
HXDLIN(1415)				int _g8 = w;
HXDLIN(1415)				while((_g15 < _g8)){
HXLINE(1415)					_g15 = (_g15 + (int)1);
HXDLIN(1415)					int i5 = (_g15 - (int)1);
HXDLIN(1415)					ti5 = ((i5 * (int)4) + (int)1);
HXDLIN(1415)					li5 = ti5;
HXDLIN(1415)					ri5 = (ti5 + (by1 * ws1));
HXDLIN(1415)					fv5 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti5)) & (int)(int)255);
HXDLIN(1415)					int imgA15 = imgA->byteOffset;
HXDLIN(1415)					lv5 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA15 + (ti5 + (ws1 * (h - (int)1))))) & (int)(int)255);
HXDLIN(1415)					val35 = ((by1 + (int)1) * fv5);
HXDLIN(1415)					{
HXLINE(1415)						int _g320 = (int)0;
HXDLIN(1415)						int _g220 = by1;
HXDLIN(1415)						while((_g320 < _g220)){
HXLINE(1415)							_g320 = (_g320 + (int)1);
HXDLIN(1415)							int j20 = (_g320 - (int)1);
HXDLIN(1415)							int imgA16 = imgA->byteOffset;
HXDLIN(1415)							val35 = (val35 + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA16 + (ti5 + (j20 * ws1)))) & (int)(int)255));
            						}
            					}
HXDLIN(1415)					{
HXLINE(1415)						int _g321 = (int)0;
HXDLIN(1415)						int _g221 = (by1 + (int)1);
HXDLIN(1415)						while((_g321 < _g221)){
HXLINE(1415)							_g321 = (_g321 + (int)1);
HXDLIN(1415)							int j21 = (_g321 - (int)1);
HXDLIN(1415)							val35 = (val35 + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri5)) & (int)(int)255) - fv5));
HXDLIN(1415)							{
HXLINE(1415)								int int15 = val35;
HXDLIN(1415)								Float val36;
HXDLIN(1415)								if ((int15 < (int)0)) {
HXLINE(1415)									val36 = (((Float)4294967296.0) + int15);
            								}
            								else {
HXLINE(1415)									val36 = (int15 + ((Float)0.0));
            								}
HXDLIN(1415)								int val37 = ::Math_obj::round((val36 * iarr5));
HXDLIN(1415)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val37);
            							}
HXDLIN(1415)							ri5 = (ri5 + ws1);
HXDLIN(1415)							ti5 = (ti5 + ws1);
            						}
            					}
HXDLIN(1415)					{
HXLINE(1415)						int _g322 = (by1 + (int)1);
HXDLIN(1415)						int _g222 = (h - by1);
HXDLIN(1415)						while((_g322 < _g222)){
HXLINE(1415)							_g322 = (_g322 + (int)1);
HXDLIN(1415)							int j22 = (_g322 - (int)1);
HXDLIN(1415)							int a5 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri5)) & (int)(int)255);
HXDLIN(1415)							val35 = (val35 + (a5 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li5)) & (int)(int)255)));
HXDLIN(1415)							{
HXLINE(1415)								int int16 = val35;
HXDLIN(1415)								Float val38;
HXDLIN(1415)								if ((int16 < (int)0)) {
HXLINE(1415)									val38 = (((Float)4294967296.0) + int16);
            								}
            								else {
HXLINE(1415)									val38 = (int16 + ((Float)0.0));
            								}
HXDLIN(1415)								int val39 = ::Math_obj::round((val38 * iarr5));
HXDLIN(1415)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val39);
            							}
HXDLIN(1415)							li5 = (li5 + ws1);
HXDLIN(1415)							ri5 = (ri5 + ws1);
HXDLIN(1415)							ti5 = (ti5 + ws1);
            						}
            					}
HXDLIN(1415)					{
HXLINE(1415)						int _g323 = (h - by1);
HXDLIN(1415)						int _g223 = h;
HXDLIN(1415)						while((_g323 < _g223)){
HXLINE(1415)							_g323 = (_g323 + (int)1);
HXDLIN(1415)							int j23 = (_g323 - (int)1);
HXDLIN(1415)							val35 = (val35 + (lv5 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li5)) & (int)(int)255)));
HXDLIN(1415)							{
HXLINE(1415)								int int17 = val35;
HXDLIN(1415)								Float val40;
HXDLIN(1415)								if ((int17 < (int)0)) {
HXLINE(1415)									val40 = (((Float)4294967296.0) + int17);
            								}
            								else {
HXLINE(1415)									val40 = (int17 + ((Float)0.0));
            								}
HXDLIN(1415)								int val41 = ::Math_obj::round((val40 * iarr5));
HXDLIN(1415)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti5),val41);
            							}
HXDLIN(1415)							li5 = (li5 + ws1);
HXDLIN(1415)							ti5 = (ti5 + ws1);
            						}
            					}
            				}
            			}
            		}
HXLINE(1416)		{
HXLINE(1416)			Float iarr6 = ((Float)(int)1 / (Float)((by1 + by1) + (int)1));
HXDLIN(1416)			int ws2 = (w * (int)4);
HXDLIN(1416)			int ti6;
HXDLIN(1416)			int li6;
HXDLIN(1416)			int ri6;
HXDLIN(1416)			 ::Dynamic fv6;
HXDLIN(1416)			 ::Dynamic lv6;
HXDLIN(1416)			int val42;
HXDLIN(1416)			{
HXLINE(1416)				int _g16 = (int)0;
HXDLIN(1416)				int _g9 = w;
HXDLIN(1416)				while((_g16 < _g9)){
HXLINE(1416)					_g16 = (_g16 + (int)1);
HXDLIN(1416)					int i6 = (_g16 - (int)1);
HXDLIN(1416)					ti6 = ((i6 * (int)4) + (int)2);
HXDLIN(1416)					li6 = ti6;
HXDLIN(1416)					ri6 = (ti6 + (by1 * ws2));
HXDLIN(1416)					fv6 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti6)) & (int)(int)255);
HXDLIN(1416)					int imgA17 = imgA->byteOffset;
HXDLIN(1416)					lv6 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA17 + (ti6 + (ws2 * (h - (int)1))))) & (int)(int)255);
HXDLIN(1416)					val42 = ((by1 + (int)1) * fv6);
HXDLIN(1416)					{
HXLINE(1416)						int _g324 = (int)0;
HXDLIN(1416)						int _g224 = by1;
HXDLIN(1416)						while((_g324 < _g224)){
HXLINE(1416)							_g324 = (_g324 + (int)1);
HXDLIN(1416)							int j24 = (_g324 - (int)1);
HXDLIN(1416)							int imgA18 = imgA->byteOffset;
HXDLIN(1416)							val42 = (val42 + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA18 + (ti6 + (j24 * ws2)))) & (int)(int)255));
            						}
            					}
HXDLIN(1416)					{
HXLINE(1416)						int _g325 = (int)0;
HXDLIN(1416)						int _g225 = (by1 + (int)1);
HXDLIN(1416)						while((_g325 < _g225)){
HXLINE(1416)							_g325 = (_g325 + (int)1);
HXDLIN(1416)							int j25 = (_g325 - (int)1);
HXDLIN(1416)							val42 = (val42 + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri6)) & (int)(int)255) - fv6));
HXDLIN(1416)							{
HXLINE(1416)								int int18 = val42;
HXDLIN(1416)								Float val43;
HXDLIN(1416)								if ((int18 < (int)0)) {
HXLINE(1416)									val43 = (((Float)4294967296.0) + int18);
            								}
            								else {
HXLINE(1416)									val43 = (int18 + ((Float)0.0));
            								}
HXDLIN(1416)								int val44 = ::Math_obj::round((val43 * iarr6));
HXDLIN(1416)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val44);
            							}
HXDLIN(1416)							ri6 = (ri6 + ws2);
HXDLIN(1416)							ti6 = (ti6 + ws2);
            						}
            					}
HXDLIN(1416)					{
HXLINE(1416)						int _g326 = (by1 + (int)1);
HXDLIN(1416)						int _g226 = (h - by1);
HXDLIN(1416)						while((_g326 < _g226)){
HXLINE(1416)							_g326 = (_g326 + (int)1);
HXDLIN(1416)							int j26 = (_g326 - (int)1);
HXDLIN(1416)							int a6 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri6)) & (int)(int)255);
HXDLIN(1416)							val42 = (val42 + (a6 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li6)) & (int)(int)255)));
HXDLIN(1416)							{
HXLINE(1416)								int int19 = val42;
HXDLIN(1416)								Float val45;
HXDLIN(1416)								if ((int19 < (int)0)) {
HXLINE(1416)									val45 = (((Float)4294967296.0) + int19);
            								}
            								else {
HXLINE(1416)									val45 = (int19 + ((Float)0.0));
            								}
HXDLIN(1416)								int val46 = ::Math_obj::round((val45 * iarr6));
HXDLIN(1416)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val46);
            							}
HXDLIN(1416)							li6 = (li6 + ws2);
HXDLIN(1416)							ri6 = (ri6 + ws2);
HXDLIN(1416)							ti6 = (ti6 + ws2);
            						}
            					}
HXDLIN(1416)					{
HXLINE(1416)						int _g327 = (h - by1);
HXDLIN(1416)						int _g227 = h;
HXDLIN(1416)						while((_g327 < _g227)){
HXLINE(1416)							_g327 = (_g327 + (int)1);
HXDLIN(1416)							int j27 = (_g327 - (int)1);
HXDLIN(1416)							val42 = (val42 + (lv6 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li6)) & (int)(int)255)));
HXDLIN(1416)							{
HXLINE(1416)								int int20 = val42;
HXDLIN(1416)								Float val47;
HXDLIN(1416)								if ((int20 < (int)0)) {
HXLINE(1416)									val47 = (((Float)4294967296.0) + int20);
            								}
            								else {
HXLINE(1416)									val47 = (int20 + ((Float)0.0));
            								}
HXDLIN(1416)								int val48 = ::Math_obj::round((val47 * iarr6));
HXDLIN(1416)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti6),val48);
            							}
HXDLIN(1416)							li6 = (li6 + ws2);
HXDLIN(1416)							ti6 = (ti6 + ws2);
            						}
            					}
            				}
            			}
            		}
HXLINE(1417)		{
HXLINE(1417)			Float iarr7 = ((Float)(int)1 / (Float)((by1 + by1) + (int)1));
HXDLIN(1417)			int ws3 = (w * (int)4);
HXDLIN(1417)			int ti7;
HXDLIN(1417)			int li7;
HXDLIN(1417)			int ri7;
HXDLIN(1417)			 ::Dynamic fv7;
HXDLIN(1417)			 ::Dynamic lv7;
HXDLIN(1417)			int val49;
HXDLIN(1417)			{
HXLINE(1417)				int _g17 = (int)0;
HXDLIN(1417)				int _g10 = w;
HXDLIN(1417)				while((_g17 < _g10)){
HXLINE(1417)					_g17 = (_g17 + (int)1);
HXDLIN(1417)					int i7 = (_g17 - (int)1);
HXDLIN(1417)					ti7 = ((i7 * (int)4) + (int)3);
HXDLIN(1417)					li7 = ti7;
HXDLIN(1417)					ri7 = (ti7 + (by1 * ws3));
HXDLIN(1417)					fv7 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti7)) & (int)(int)255);
HXDLIN(1417)					int imgA19 = imgA->byteOffset;
HXDLIN(1417)					lv7 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA19 + (ti7 + (ws3 * (h - (int)1))))) & (int)(int)255);
HXDLIN(1417)					val49 = ((by1 + (int)1) * fv7);
HXDLIN(1417)					{
HXLINE(1417)						int _g328 = (int)0;
HXDLIN(1417)						int _g228 = by1;
HXDLIN(1417)						while((_g328 < _g228)){
HXLINE(1417)							_g328 = (_g328 + (int)1);
HXDLIN(1417)							int j28 = (_g328 - (int)1);
HXDLIN(1417)							int imgA20 = imgA->byteOffset;
HXDLIN(1417)							val49 = (val49 + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA20 + (ti7 + (j28 * ws3)))) & (int)(int)255));
            						}
            					}
HXDLIN(1417)					{
HXLINE(1417)						int _g329 = (int)0;
HXDLIN(1417)						int _g229 = (by1 + (int)1);
HXDLIN(1417)						while((_g329 < _g229)){
HXLINE(1417)							_g329 = (_g329 + (int)1);
HXDLIN(1417)							int j29 = (_g329 - (int)1);
HXDLIN(1417)							val49 = (val49 + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri7)) & (int)(int)255) - fv7));
HXDLIN(1417)							{
HXLINE(1417)								int int21 = val49;
HXDLIN(1417)								Float val50;
HXDLIN(1417)								if ((int21 < (int)0)) {
HXLINE(1417)									val50 = (((Float)4294967296.0) + int21);
            								}
            								else {
HXLINE(1417)									val50 = (int21 + ((Float)0.0));
            								}
HXDLIN(1417)								int val51 = ::Math_obj::round((val50 * iarr7));
HXDLIN(1417)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val51);
            							}
HXDLIN(1417)							ri7 = (ri7 + ws3);
HXDLIN(1417)							ti7 = (ti7 + ws3);
            						}
            					}
HXDLIN(1417)					{
HXLINE(1417)						int _g330 = (by1 + (int)1);
HXDLIN(1417)						int _g230 = (h - by1);
HXDLIN(1417)						while((_g330 < _g230)){
HXLINE(1417)							_g330 = (_g330 + (int)1);
HXDLIN(1417)							int j30 = (_g330 - (int)1);
HXDLIN(1417)							int a7 = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri7)) & (int)(int)255);
HXDLIN(1417)							val49 = (val49 + (a7 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li7)) & (int)(int)255)));
HXDLIN(1417)							{
HXLINE(1417)								int int22 = val49;
HXDLIN(1417)								Float val52;
HXDLIN(1417)								if ((int22 < (int)0)) {
HXLINE(1417)									val52 = (((Float)4294967296.0) + int22);
            								}
            								else {
HXLINE(1417)									val52 = (int22 + ((Float)0.0));
            								}
HXDLIN(1417)								int val53 = ::Math_obj::round((val52 * iarr7));
HXDLIN(1417)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val53);
            							}
HXDLIN(1417)							li7 = (li7 + ws3);
HXDLIN(1417)							ri7 = (ri7 + ws3);
HXDLIN(1417)							ti7 = (ti7 + ws3);
            						}
            					}
HXDLIN(1417)					{
HXLINE(1417)						int _g331 = (h - by1);
HXDLIN(1417)						int _g231 = h;
HXDLIN(1417)						while((_g331 < _g231)){
HXLINE(1417)							_g331 = (_g331 + (int)1);
HXDLIN(1417)							int j31 = (_g331 - (int)1);
HXDLIN(1417)							val49 = (val49 + (lv7 - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li7)) & (int)(int)255)));
HXDLIN(1417)							{
HXLINE(1417)								int int23 = val49;
HXDLIN(1417)								Float val54;
HXDLIN(1417)								if ((int23 < (int)0)) {
HXLINE(1417)									val54 = (((Float)4294967296.0) + int23);
            								}
            								else {
HXLINE(1417)									val54 = (int23 + ((Float)0.0));
            								}
HXDLIN(1417)								int val55 = ::Math_obj::round((val54 * iarr7));
HXDLIN(1417)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti7),val55);
            							}
HXDLIN(1417)							li7 = (li7 + ws3);
HXDLIN(1417)							ti7 = (ti7 + ws3);
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlur,(void))

void ImageDataUtil_obj::_hx___boxBlurH( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1421___boxBlurH)
HXLINE(1422)		Float iarr = ((Float)(int)1 / (Float)((r + r) + (int)1));
HXLINE(1423)		int ti;
HXDLIN(1423)		int li;
HXDLIN(1423)		int ri;
HXDLIN(1423)		 ::Dynamic fv;
HXDLIN(1423)		 ::Dynamic lv;
HXDLIN(1423)		int val;
HXLINE(1425)		{
HXLINE(1425)			int _g1 = (int)0;
HXDLIN(1425)			int _g = h;
HXDLIN(1425)			while((_g1 < _g)){
HXLINE(1425)				_g1 = (_g1 + (int)1);
HXDLIN(1425)				int i = (_g1 - (int)1);
HXLINE(1427)				ti = (i * w);
HXLINE(1428)				li = ti;
HXLINE(1429)				ri = (ti + r);
HXLINE(1431)				int imgA1 = imgA->byteOffset;
HXDLIN(1431)				fv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA1 + ((ti * (int)4) + off))) & (int)(int)255);
HXLINE(1432)				int imgA2 = imgA->byteOffset;
HXDLIN(1432)				lv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA2 + ((((ti + w) - (int)1) * (int)4) + off))) & (int)(int)255);
HXLINE(1433)				val = ((r + (int)1) * fv);
HXLINE(1435)				{
HXLINE(1435)					int _g3 = (int)0;
HXDLIN(1435)					int _g2 = r;
HXDLIN(1435)					while((_g3 < _g2)){
HXLINE(1435)						_g3 = (_g3 + (int)1);
HXDLIN(1435)						int j = (_g3 - (int)1);
HXLINE(1437)						int imgA3 = imgA->byteOffset;
HXDLIN(1437)						val = (val + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA3 + (((ti + j) * (int)4) + off))) & (int)(int)255));
            					}
            				}
HXLINE(1440)				{
HXLINE(1440)					int _g31 = (int)0;
HXDLIN(1440)					int _g21 = (r + (int)1);
HXDLIN(1440)					while((_g31 < _g21)){
HXLINE(1440)						_g31 = (_g31 + (int)1);
HXDLIN(1440)						int j1 = (_g31 - (int)1);
HXLINE(1442)						int imgA4 = imgA->byteOffset;
HXDLIN(1442)						val = (val + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA4 + ((ri * (int)4) + off))) & (int)(int)255) - fv));
HXLINE(1443)						{
HXLINE(1443)							int _hx_int = val;
HXDLIN(1443)							Float val1;
HXDLIN(1443)							if ((_hx_int < (int)0)) {
HXLINE(1443)								val1 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(1443)								val1 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(1443)							int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1443)							{
HXLINE(1443)								int imgB1 = imgB->byteOffset;
HXDLIN(1443)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB1 + ((ti * (int)4) + off)),val2);
            							}
            						}
HXLINE(1444)						ri = (ri + (int)1);
HXLINE(1445)						ti = (ti + (int)1);
            					}
            				}
HXLINE(1448)				{
HXLINE(1448)					int _g32 = (r + (int)1);
HXDLIN(1448)					int _g22 = (w - r);
HXDLIN(1448)					while((_g32 < _g22)){
HXLINE(1448)						_g32 = (_g32 + (int)1);
HXDLIN(1448)						int j2 = (_g32 - (int)1);
HXLINE(1450)						int imgA5 = imgA->byteOffset;
HXDLIN(1450)						int a = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA5 + ((ri * (int)4) + off))) & (int)(int)255);
HXDLIN(1450)						int imgA6 = imgA->byteOffset;
HXDLIN(1450)						val = (val + (a - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA6 + ((li * (int)4) + off))) & (int)(int)255)));
HXLINE(1451)						{
HXLINE(1451)							int int1 = val;
HXDLIN(1451)							Float val3;
HXDLIN(1451)							if ((int1 < (int)0)) {
HXLINE(1451)								val3 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(1451)								val3 = (int1 + ((Float)0.0));
            							}
HXDLIN(1451)							int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1451)							{
HXLINE(1451)								int imgB2 = imgB->byteOffset;
HXDLIN(1451)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB2 + ((ti * (int)4) + off)),val4);
            							}
            						}
HXLINE(1452)						ri = (ri + (int)1);
HXLINE(1453)						li = (li + (int)1);
HXLINE(1454)						ti = (ti + (int)1);
            					}
            				}
HXLINE(1457)				{
HXLINE(1457)					int _g33 = (w - r);
HXDLIN(1457)					int _g23 = w;
HXDLIN(1457)					while((_g33 < _g23)){
HXLINE(1457)						_g33 = (_g33 + (int)1);
HXDLIN(1457)						int j3 = (_g33 - (int)1);
HXLINE(1459)						int imgA7 = imgA->byteOffset;
HXDLIN(1459)						val = (val + (lv - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA7 + ((li * (int)4) + off))) & (int)(int)255)));
HXLINE(1460)						{
HXLINE(1460)							int int2 = val;
HXDLIN(1460)							Float val5;
HXDLIN(1460)							if ((int2 < (int)0)) {
HXLINE(1460)								val5 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(1460)								val5 = (int2 + ((Float)0.0));
            							}
HXDLIN(1460)							int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1460)							{
HXLINE(1460)								int imgB3 = imgB->byteOffset;
HXDLIN(1460)								::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB3 + ((ti * (int)4) + off)),val6);
            							}
            						}
HXLINE(1461)						li = (li + (int)1);
HXLINE(1462)						ti = (ti + (int)1);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlurH,(void))

void ImageDataUtil_obj::_hx___boxBlurT( ::lime::utils::ArrayBufferView imgA, ::lime::utils::ArrayBufferView imgB,int w,int h,int r,int off){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1468___boxBlurT)
HXLINE(1469)		Float iarr = ((Float)(int)1 / (Float)((r + r) + (int)1));
HXLINE(1470)		int ws = (w * (int)4);
HXLINE(1471)		int ti;
HXDLIN(1471)		int li;
HXDLIN(1471)		int ri;
HXDLIN(1471)		 ::Dynamic fv;
HXDLIN(1471)		 ::Dynamic lv;
HXDLIN(1471)		int val;
HXLINE(1473)		{
HXLINE(1473)			int _g1 = (int)0;
HXDLIN(1473)			int _g = w;
HXDLIN(1473)			while((_g1 < _g)){
HXLINE(1473)				_g1 = (_g1 + (int)1);
HXDLIN(1473)				int i = (_g1 - (int)1);
HXLINE(1475)				ti = ((i * (int)4) + off);
HXLINE(1476)				li = ti;
HXLINE(1477)				ri = (ti + (r * ws));
HXLINE(1479)				fv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ti)) & (int)(int)255);
HXLINE(1480)				int imgA1 = imgA->byteOffset;
HXDLIN(1480)				lv = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA1 + (ti + (ws * (h - (int)1))))) & (int)(int)255);
HXLINE(1481)				val = ((r + (int)1) * fv);
HXLINE(1483)				{
HXLINE(1483)					int _g3 = (int)0;
HXDLIN(1483)					int _g2 = r;
HXDLIN(1483)					while((_g3 < _g2)){
HXLINE(1483)						_g3 = (_g3 + (int)1);
HXDLIN(1483)						int j = (_g3 - (int)1);
HXLINE(1485)						int imgA2 = imgA->byteOffset;
HXDLIN(1485)						val = (val + ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA2 + (ti + (j * ws)))) & (int)(int)255));
            					}
            				}
HXLINE(1488)				{
HXLINE(1488)					int _g31 = (int)0;
HXDLIN(1488)					int _g21 = (r + (int)1);
HXDLIN(1488)					while((_g31 < _g21)){
HXLINE(1488)						_g31 = (_g31 + (int)1);
HXDLIN(1488)						int j1 = (_g31 - (int)1);
HXLINE(1490)						val = (val + (((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri)) & (int)(int)255) - fv));
HXLINE(1491)						{
HXLINE(1491)							int _hx_int = val;
HXDLIN(1491)							Float val1;
HXDLIN(1491)							if ((_hx_int < (int)0)) {
HXLINE(1491)								val1 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(1491)								val1 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(1491)							int val2 = ::Math_obj::round((val1 * iarr));
HXDLIN(1491)							::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val2);
            						}
HXLINE(1492)						ri = (ri + ws);
HXLINE(1493)						ti = (ti + ws);
            					}
            				}
HXLINE(1496)				{
HXLINE(1496)					int _g32 = (r + (int)1);
HXDLIN(1496)					int _g22 = (h - r);
HXDLIN(1496)					while((_g32 < _g22)){
HXLINE(1496)						_g32 = (_g32 + (int)1);
HXDLIN(1496)						int j2 = (_g32 - (int)1);
HXLINE(1498)						int a = ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + ri)) & (int)(int)255);
HXDLIN(1498)						val = (val + (a - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li)) & (int)(int)255)));
HXLINE(1499)						{
HXLINE(1499)							int int1 = val;
HXDLIN(1499)							Float val3;
HXDLIN(1499)							if ((int1 < (int)0)) {
HXLINE(1499)								val3 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(1499)								val3 = (int1 + ((Float)0.0));
            							}
HXDLIN(1499)							int val4 = ::Math_obj::round((val3 * iarr));
HXDLIN(1499)							::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val4);
            						}
HXLINE(1500)						li = (li + ws);
HXLINE(1501)						ri = (ri + ws);
HXLINE(1502)						ti = (ti + ws);
            					}
            				}
HXLINE(1505)				{
HXLINE(1505)					int _g33 = (h - r);
HXDLIN(1505)					int _g23 = h;
HXDLIN(1505)					while((_g33 < _g23)){
HXLINE(1505)						_g33 = (_g33 + (int)1);
HXDLIN(1505)						int j3 = (_g33 - (int)1);
HXLINE(1507)						val = (val + (lv - ((int)::__hxcpp_memory_get_byte(imgA->buffer->b,(imgA->byteOffset + li)) & (int)(int)255)));
HXLINE(1508)						{
HXLINE(1508)							int int2 = val;
HXDLIN(1508)							Float val5;
HXDLIN(1508)							if ((int2 < (int)0)) {
HXLINE(1508)								val5 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(1508)								val5 = (int2 + ((Float)0.0));
            							}
HXDLIN(1508)							int val6 = ::Math_obj::round((val5 * iarr));
HXDLIN(1508)							::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + ti),val6);
            						}
HXLINE(1509)						li = (li + ws);
HXLINE(1510)						ti = (ti + ws);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,_hx___boxBlurT,(void))

int ImageDataUtil_obj::_hx___calculateSourceOffset( ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int destX,int destY){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1520___calculateSourceOffset)
HXLINE(1521)		int sourceX = (destX - ::Std_obj::_hx_int(destPoint->x));
HXLINE(1522)		int sourceY = (destY - ::Std_obj::_hx_int(destPoint->y));
HXLINE(1524)		int offset = (int)0;
HXLINE(1526)		bool _hx_tmp;
HXDLIN(1526)		bool _hx_tmp1;
HXDLIN(1526)		bool _hx_tmp2;
HXDLIN(1526)		if ((sourceX >= (int)0)) {
HXLINE(1526)			_hx_tmp2 = (sourceY < (int)0);
            		}
            		else {
HXLINE(1526)			_hx_tmp2 = true;
            		}
HXDLIN(1526)		if (!(_hx_tmp2)) {
HXLINE(1526)			_hx_tmp1 = (sourceX >= sourceRect->width);
            		}
            		else {
HXLINE(1526)			_hx_tmp1 = true;
            		}
HXDLIN(1526)		if (!(_hx_tmp1)) {
HXLINE(1526)			_hx_tmp = (sourceY >= sourceRect->height);
            		}
            		else {
HXLINE(1526)			_hx_tmp = true;
            		}
HXDLIN(1526)		if (_hx_tmp) {
HXLINE(1528)			offset = (int)-1;
            		}
            		else {
HXLINE(1532)			offset = ((int)4 * ((sourceY * ::Std_obj::_hx_int(sourceRect->width)) + sourceX));
            		}
HXLINE(1535)		return offset;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,_hx___calculateSourceOffset,return )

::Array< Float > ImageDataUtil_obj::_hx___getBoxesForGaussianBlur(Float sigma,int n){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1539___getBoxesForGaussianBlur)
HXLINE(1540)		Float wIdeal = ::Math_obj::sqrt((((Float)(((int)12 * sigma) * sigma) / (Float)n) + (int)1));
HXLINE(1541)		int wl = ::Math_obj::floor(wIdeal);
HXLINE(1542)		if ((hx::Mod(wl,(int)2) == (int)0)) {
HXLINE(1542)			wl = (wl - (int)1);
            		}
HXLINE(1543)		int wu = (wl + (int)2);
HXLINE(1545)		Float mIdeal = ((Float)((((((int)12 * sigma) * sigma) - ((n * wl) * wl)) - (((int)4 * n) * wl)) - ((int)3 * n)) / (Float)(((int)-4 * wl) - (int)4));
HXLINE(1546)		int m = ::Math_obj::round(mIdeal);
HXLINE(1547)		::Array< Float > sizes = ::Array_obj< Float >::__new(0);
HXLINE(1549)		{
HXLINE(1549)			int _g1 = (int)0;
HXDLIN(1549)			int _g = n;
HXDLIN(1549)			while((_g1 < _g)){
HXLINE(1549)				_g1 = (_g1 + (int)1);
HXDLIN(1549)				int i = (_g1 - (int)1);
HXLINE(1551)				Float _hx_tmp;
HXDLIN(1551)				if ((i < m)) {
HXLINE(1551)					_hx_tmp = wl;
            				}
            				else {
HXLINE(1551)					_hx_tmp = wu;
            				}
HXDLIN(1551)				sizes->push(_hx_tmp);
            			}
            		}
HXLINE(1554)		return sizes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___getBoxesForGaussianBlur,return )

int ImageDataUtil_obj::_hx___pixelCompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1558___pixelCompare)
HXLINE(1559)		int tmp1;
HXLINE(1560)		int tmp2;
HXLINE(1562)		tmp1 = ((int)hx::UShr(n1,(int)24) & (int)(int)255);
HXLINE(1563)		tmp2 = ((int)hx::UShr(n2,(int)24) & (int)(int)255);
HXLINE(1565)		if ((tmp1 != tmp2)) {
HXLINE(1567)			bool aNeg = (tmp1 < (int)0);
HXDLIN(1567)			bool bNeg = (tmp2 < (int)0);
HXDLIN(1567)			bool _hx_tmp;
HXDLIN(1567)			if ((aNeg != bNeg)) {
HXLINE(1567)				_hx_tmp = aNeg;
            			}
            			else {
HXLINE(1567)				_hx_tmp = (tmp1 > tmp2);
            			}
HXDLIN(1567)			if (_hx_tmp) {
HXLINE(1567)				return (int)1;
            			}
            			else {
HXLINE(1567)				return (int)-1;
            			}
            		}
            		else {
HXLINE(1571)			tmp1 = ((int)hx::UShr(n1,(int)16) & (int)(int)255);
HXLINE(1572)			tmp2 = ((int)hx::UShr(n2,(int)16) & (int)(int)255);
HXLINE(1574)			if ((tmp1 != tmp2)) {
HXLINE(1576)				bool aNeg1 = (tmp1 < (int)0);
HXDLIN(1576)				bool bNeg1 = (tmp2 < (int)0);
HXDLIN(1576)				bool _hx_tmp1;
HXDLIN(1576)				if ((aNeg1 != bNeg1)) {
HXLINE(1576)					_hx_tmp1 = aNeg1;
            				}
            				else {
HXLINE(1576)					_hx_tmp1 = (tmp1 > tmp2);
            				}
HXDLIN(1576)				if (_hx_tmp1) {
HXLINE(1576)					return (int)1;
            				}
            				else {
HXLINE(1576)					return (int)-1;
            				}
            			}
            			else {
HXLINE(1580)				tmp1 = ((int)hx::UShr(n1,(int)8) & (int)(int)255);
HXLINE(1581)				tmp2 = ((int)hx::UShr(n2,(int)8) & (int)(int)255);
HXLINE(1583)				if ((tmp1 != tmp2)) {
HXLINE(1585)					bool aNeg2 = (tmp1 < (int)0);
HXDLIN(1585)					bool bNeg2 = (tmp2 < (int)0);
HXDLIN(1585)					bool _hx_tmp2;
HXDLIN(1585)					if ((aNeg2 != bNeg2)) {
HXLINE(1585)						_hx_tmp2 = aNeg2;
            					}
            					else {
HXLINE(1585)						_hx_tmp2 = (tmp1 > tmp2);
            					}
HXDLIN(1585)					if (_hx_tmp2) {
HXLINE(1585)						return (int)1;
            					}
            					else {
HXLINE(1585)						return (int)-1;
            					}
            				}
            				else {
HXLINE(1589)					tmp1 = ((int)n1 & (int)(int)255);
HXLINE(1590)					tmp2 = ((int)n2 & (int)(int)255);
HXLINE(1592)					if ((tmp1 != tmp2)) {
HXLINE(1594)						bool aNeg3 = (tmp1 < (int)0);
HXDLIN(1594)						bool bNeg3 = (tmp2 < (int)0);
HXDLIN(1594)						bool _hx_tmp3;
HXDLIN(1594)						if ((aNeg3 != bNeg3)) {
HXLINE(1594)							_hx_tmp3 = aNeg3;
            						}
            						else {
HXLINE(1594)							_hx_tmp3 = (tmp1 > tmp2);
            						}
HXDLIN(1594)						if (_hx_tmp3) {
HXLINE(1594)							return (int)1;
            						}
            						else {
HXLINE(1594)							return (int)-1;
            						}
            					}
            					else {
HXLINE(1598)						return (int)0;
            					}
            				}
            			}
            		}
HXLINE(1565)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___pixelCompare,return )

void ImageDataUtil_obj::_hx___translatePixel( ::lime::utils::ArrayBufferView imgB, ::lime::math::Rectangle sourceRect, ::lime::math::Rectangle destRect, ::lime::math::Vector2 destPoint,int destX,int destY,Float strength){
            	HX_STACKFRAME(&_hx_pos_68d87270d4f7b5ed_1607___translatePixel)
HXLINE(1608)		int d = ((int)4 * ((destY * ::Std_obj::_hx_int(destRect->width)) + destX));
HXLINE(1609)		int sourceX = (destX - ::Std_obj::_hx_int(destPoint->x));
HXDLIN(1609)		int sourceY = (destY - ::Std_obj::_hx_int(destPoint->y));
HXDLIN(1609)		int offset = (int)0;
HXDLIN(1609)		bool _hx_tmp;
HXDLIN(1609)		bool _hx_tmp1;
HXDLIN(1609)		bool _hx_tmp2;
HXDLIN(1609)		if ((sourceX >= (int)0)) {
HXLINE(1609)			_hx_tmp2 = (sourceY < (int)0);
            		}
            		else {
HXLINE(1609)			_hx_tmp2 = true;
            		}
HXDLIN(1609)		if (!(_hx_tmp2)) {
HXLINE(1609)			_hx_tmp1 = (sourceX >= sourceRect->width);
            		}
            		else {
HXLINE(1609)			_hx_tmp1 = true;
            		}
HXDLIN(1609)		if (!(_hx_tmp1)) {
HXLINE(1609)			_hx_tmp = (sourceY >= sourceRect->height);
            		}
            		else {
HXLINE(1609)			_hx_tmp = true;
            		}
HXDLIN(1609)		if (_hx_tmp) {
HXLINE(1609)			offset = (int)-1;
            		}
            		else {
HXLINE(1609)			offset = ((int)4 * ((sourceY * ::Std_obj::_hx_int(sourceRect->width)) + sourceX));
            		}
HXDLIN(1609)		int s = offset;
HXLINE(1611)		if ((s < (int)0)) {
HXLINE(1613)			{
HXLINE(1613)				int imgB1 = imgB->byteOffset;
HXDLIN(1613)				::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB1 + (d + (int)3)),(int)0);
            			}
HXDLIN(1613)			int val = (int)0;
HXDLIN(1613)			{
HXLINE(1613)				int imgB2 = imgB->byteOffset;
HXDLIN(1613)				::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB2 + (d + (int)2)),val);
            			}
HXDLIN(1613)			int val1 = val;
HXDLIN(1613)			{
HXLINE(1613)				int imgB3 = imgB->byteOffset;
HXDLIN(1613)				::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB3 + (d + (int)1)),val1);
            			}
HXDLIN(1613)			int val2 = val1;
HXDLIN(1613)			::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val2);
            		}
            		else {
HXLINE(1617)			{
HXLINE(1617)				int val3 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB->byteOffset + s)) & (int)(int)255);
HXDLIN(1617)				::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB->byteOffset + d),val3);
            			}
HXLINE(1618)			{
HXLINE(1618)				int imgB4 = imgB->byteOffset;
HXDLIN(1618)				int val4 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB4 + (s + (int)1))) & (int)(int)255);
HXDLIN(1618)				{
HXLINE(1618)					int imgB5 = imgB->byteOffset;
HXDLIN(1618)					::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB5 + (d + (int)1)),val4);
            				}
            			}
HXLINE(1619)			{
HXLINE(1619)				int imgB6 = imgB->byteOffset;
HXDLIN(1619)				int val5 = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB6 + (s + (int)2))) & (int)(int)255);
HXDLIN(1619)				{
HXLINE(1619)					int imgB7 = imgB->byteOffset;
HXDLIN(1619)					::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB7 + (d + (int)2)),val5);
            				}
            			}
HXLINE(1621)			int imgB8 = imgB->byteOffset;
HXDLIN(1621)			int _hx_int = ((int)::__hxcpp_memory_get_byte(imgB->buffer->b,(imgB8 + (s + (int)3))) & (int)(int)255);
HXDLIN(1621)			Float a;
HXDLIN(1621)			if ((_hx_int < (int)0)) {
HXLINE(1621)				a = (((Float)4294967296.0) + _hx_int);
            			}
            			else {
HXLINE(1621)				a = (_hx_int + ((Float)0.0));
            			}
HXDLIN(1621)			int a1 = ::Std_obj::_hx_int((a * strength));
HXLINE(1622)			{
HXLINE(1622)				int val6;
HXDLIN(1622)				if ((a1 < (int)0)) {
HXLINE(1622)					val6 = (int)0;
            				}
            				else {
HXLINE(1622)					if ((a1 > (int)255)) {
HXLINE(1622)						val6 = (int)255;
            					}
            					else {
HXLINE(1622)						val6 = a1;
            					}
            				}
HXDLIN(1622)				{
HXLINE(1622)					int imgB9 = imgB->byteOffset;
HXDLIN(1622)					::__hxcpp_memory_set_byte(imgB->buffer->b,(imgB9 + (d + (int)3)),val6);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,_hx___translatePixel,(void))


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"lerp4f") ) { outValue = lerp4f_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bilinear") ) { outValue = bilinear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerpRGBA") ) { outValue = lerpRGBA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threshold") ) { outValue = threshold_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlur") ) { outValue = _hx___boxBlur_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlurH") ) { outValue = _hx___boxBlurH_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__boxBlurT") ) { outValue = _hx___boxBlurT_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"displaceMap") ) { outValue = displaceMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gaussianBlur") ) { outValue = gaussianBlur_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__pixelCompare") ) { outValue = _hx___pixelCompare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__translatePixel") ) { outValue = _hx___translatePixel_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { outValue = getColorBoundsRect_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__calculateSourceOffset") ) { outValue = _hx___calculateSourceOffset_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"__getBoxesForGaussianBlur") ) { outValue = _hx___getBoxesForGaussianBlur_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageDataUtil_obj_sStaticStorageInfo = 0;
#endif

static void ImageDataUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageDataUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_HCSTRING("displaceMap","\x63","\xff","\x45","\x95"),
	HX_HCSTRING("bilinear","\xec","\xb6","\x3d","\xe0"),
	HX_HCSTRING("lerpRGBA","\xab","\xb2","\x39","\xd1"),
	HX_HCSTRING("lerp4f","\xe9","\x0b","\xb3","\xa1"),
	HX_HCSTRING("lerp","\x77","\x12","\xb0","\x47"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("gaussianBlur","\x42","\xea","\x61","\xf7"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("resizeBuffer","\x14","\x7a","\xa2","\xb4"),
	HX_HCSTRING("setFormat","\x79","\x04","\x36","\x5d"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("__boxBlur","\x32","\xdf","\x2a","\x12"),
	HX_HCSTRING("__boxBlurH","\xd6","\x6c","\x58","\xd3"),
	HX_HCSTRING("__boxBlurT","\xe2","\x6c","\x58","\xd3"),
	HX_HCSTRING("__calculateSourceOffset","\x34","\xce","\x66","\x5a"),
	HX_HCSTRING("__getBoxesForGaussianBlur","\x48","\x14","\xae","\x9c"),
	HX_HCSTRING("__pixelCompare","\xdf","\x79","\xe3","\x8d"),
	HX_HCSTRING("__translatePixel","\x78","\xaf","\x9b","\x5e"),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	hx::Object *dummy = new ImageDataUtil_obj;
	ImageDataUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.graphics.ImageDataUtil","\xcf","\xfd","\xb0","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageDataUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageDataUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace graphics
