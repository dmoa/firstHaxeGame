// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeCFFI
#include <lime/_internal/backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__internal_format_JPEG
#include <lime/_internal/format/JPEG.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4ccd4a1491a42735_30_decodeBytes,"lime._internal.format.JPEG","decodeBytes",0xc3347f43,"lime._internal.format.JPEG.decodeBytes","lime/_internal/format/JPEG.hx",30,0x7b93b1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_4ccd4a1491a42735_55_decodeFile,"lime._internal.format.JPEG","decodeFile",0x1f05faa4,"lime._internal.format.JPEG.decodeFile","lime/_internal/format/JPEG.hx",55,0x7b93b1cb)
HX_LOCAL_STACK_FRAME(_hx_pos_4ccd4a1491a42735_80_encode,"lime._internal.format.JPEG","encode",0x45d4f0f0,"lime._internal.format.JPEG.encode","lime/_internal/format/JPEG.hx",80,0x7b93b1cb)
namespace lime{
namespace _internal{
namespace format{

void JPEG_obj::__construct() { }

Dynamic JPEG_obj::__CreateEmpty() { return new JPEG_obj; }

void *JPEG_obj::_hx_vtable = 0;

Dynamic JPEG_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< JPEG_obj > _hx_result = new JPEG_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool JPEG_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1d9b3ce2;
}

 ::lime::graphics::Image JPEG_obj::decodeBytes( ::haxe::io::Bytes bytes,hx::Null< bool >  __o_decodeData){
bool decodeData = __o_decodeData.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4ccd4a1491a42735_30_decodeBytes)
HXLINE(  33)		 ::Dynamic buffer = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN(  33)		 ::haxe::io::Bytes buffer1 = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(  33)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  33)		if (hx::IsNotNull( buffer1 )) {
HXLINE(  33)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(  33)			int in_byteOffset = (int)0;
HXDLIN(  33)			if ((in_byteOffset < (int)0)) {
HXLINE(  33)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  33)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE(  33)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  33)			int bufferByteLength = buffer1->length;
HXDLIN(  33)			int elementSize = _this->bytesPerElement;
HXDLIN(  33)			int newByteLength = bufferByteLength;
HXDLIN(  33)			{
HXLINE(  33)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  33)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  33)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  33)				if ((newByteLength < (int)0)) {
HXLINE(  33)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  33)			_this->buffer = buffer1;
HXDLIN(  33)			_this->byteOffset = in_byteOffset;
HXDLIN(  33)			_this->byteLength = newByteLength;
HXDLIN(  33)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(  33)			this1 = _this;
            		}
            		else {
HXLINE(  33)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(  33)		 ::hx::Object * buffer2 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_jpeg_decode_bytes(hx::DynamicPtr(bytes),decodeData,hx::DynamicPtr( ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,null(),null(),null(),null())));
HXLINE(  35)		if (hx::IsNotEq( buffer2,hx::DynamicPtr(null()) )) {
HXLINE(  37)			return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,( ( ::Dynamic)(buffer2) ),null(),null(),null(),null(),null(),null());
            		}
HXLINE(  51)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(JPEG_obj,decodeBytes,return )

 ::lime::graphics::Image JPEG_obj::decodeFile(::String path,hx::Null< bool >  __o_decodeData){
bool decodeData = __o_decodeData.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_4ccd4a1491a42735_55_decodeFile)
HXLINE(  58)		 ::Dynamic buffer = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN(  58)		 ::haxe::io::Bytes buffer1 = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(  58)		 ::lime::utils::ArrayBufferView this1;
HXDLIN(  58)		if (hx::IsNotNull( buffer1 )) {
HXLINE(  58)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN(  58)			int in_byteOffset = (int)0;
HXDLIN(  58)			if ((in_byteOffset < (int)0)) {
HXLINE(  58)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  58)			if ((hx::Mod(in_byteOffset,_this->bytesPerElement) != (int)0)) {
HXLINE(  58)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  58)			int bufferByteLength = buffer1->length;
HXDLIN(  58)			int elementSize = _this->bytesPerElement;
HXDLIN(  58)			int newByteLength = bufferByteLength;
HXDLIN(  58)			{
HXLINE(  58)				newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(  58)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  58)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  58)				if ((newByteLength < (int)0)) {
HXLINE(  58)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  58)			_this->buffer = buffer1;
HXDLIN(  58)			_this->byteOffset = in_byteOffset;
HXDLIN(  58)			_this->byteLength = newByteLength;
HXDLIN(  58)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN(  58)			this1 = _this;
            		}
            		else {
HXLINE(  58)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(  58)		 ::hx::Object * buffer2 = ::lime::_internal::backend::native::NativeCFFI_obj::lime_jpeg_decode_file(path,decodeData,hx::DynamicPtr( ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,null(),null(),null(),null())));
HXLINE(  60)		if (hx::IsNotEq( buffer2,hx::DynamicPtr(null()) )) {
HXLINE(  62)			return  ::lime::graphics::Image_obj::__alloc( HX_CTX ,( ( ::Dynamic)(buffer2) ),null(),null(),null(),null(),null(),null());
            		}
HXLINE(  76)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(JPEG_obj,decodeFile,return )

 ::haxe::io::Bytes JPEG_obj::encode( ::lime::graphics::Image image,int quality){
            	HX_STACKFRAME(&_hx_pos_4ccd4a1491a42735_80_encode)
HXLINE(  81)		bool _hx_tmp;
HXDLIN(  81)		if (!(image->get_premultiplied())) {
HXLINE(  81)			_hx_tmp = (image->get_format() != (int)0);
            		}
            		else {
HXLINE(  81)			_hx_tmp = true;
            		}
HXDLIN(  81)		if (_hx_tmp) {
HXLINE(  85)			image = image->clone();
HXLINE(  86)			image->set_premultiplied(false);
HXLINE(  87)			image->set_format((int)0);
            		}
HXLINE(  92)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(  95)			 ::Dynamic _hx_tmp1 = hx::ClassOf< ::lime::_internal::backend::native::NativeCFFI >();
HXDLIN(  95)			 ::lime::graphics::ImageBuffer image1 = image->buffer;
HXDLIN(  95)			 ::haxe::io::Bytes _hx_tmp2 = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(  95)			return ( ( ::Dynamic)(::lime::_internal::backend::native::NativeCFFI_obj::lime_image_encode(hx::DynamicPtr(image1),(int)1,quality,hx::DynamicPtr(_hx_tmp2))) );
            		}
HXLINE( 150)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(JPEG_obj,encode,return )


JPEG_obj::JPEG_obj()
{
}

bool JPEG_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"encode") ) { outValue = encode_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"decodeFile") ) { outValue = decodeFile_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decodeBytes") ) { outValue = decodeBytes_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *JPEG_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *JPEG_obj_sStaticStorageInfo = 0;
#endif

static void JPEG_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(JPEG_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void JPEG_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(JPEG_obj::__mClass,"__mClass");
};

#endif

hx::Class JPEG_obj::__mClass;

static ::String JPEG_obj_sStaticFields[] = {
	HX_HCSTRING("decodeBytes","\x5d","\x94","\xb1","\x85"),
	HX_HCSTRING("decodeFile","\xca","\x86","\x63","\xce"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	::String(null())
};

void JPEG_obj::__register()
{
	hx::Object *dummy = new JPEG_obj;
	JPEG_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.format.JPEG","\x54","\x0a","\x8d","\x65");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &JPEG_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = JPEG_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(JPEG_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< JPEG_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = JPEG_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JPEG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JPEG_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace format
