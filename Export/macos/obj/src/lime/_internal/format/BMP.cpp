// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_format_BMP
#include <lime/_internal/format/BMP.h>
#endif
#ifndef INCLUDED_lime__internal_format_BMPType
#include <lime/_internal/format/BMPType.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b7d25674645dcbd1_14_encode,"lime._internal.format.BMP","encode",0xed49c7eb,"lime._internal.format.BMP.encode","lime/_internal/format/BMP.hx",14,0x5d470ca4)
namespace lime{
namespace _internal{
namespace format{

void BMP_obj::__construct() { }

Dynamic BMP_obj::__CreateEmpty() { return new BMP_obj; }

void *BMP_obj::_hx_vtable = 0;

Dynamic BMP_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BMP_obj > _hx_result = new BMP_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BMP_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x21416cc7;
}

 ::haxe::io::Bytes BMP_obj::encode( ::lime::graphics::Image image, ::lime::_internal::format::BMPType type){
            	HX_GC_STACKFRAME(&_hx_pos_b7d25674645dcbd1_14_encode)
HXLINE(  15)		bool _hx_tmp;
HXDLIN(  15)		if (!(image->get_premultiplied())) {
HXLINE(  15)			_hx_tmp = (image->get_format() != (int)0);
            		}
            		else {
HXLINE(  15)			_hx_tmp = true;
            		}
HXDLIN(  15)		if (_hx_tmp) {
HXLINE(  19)			image = image->clone();
HXLINE(  20)			image->set_premultiplied(false);
HXLINE(  21)			image->set_format((int)0);
            		}
HXLINE(  24)		if (hx::IsNull( type )) {
HXLINE(  26)			type = ::lime::_internal::format::BMPType_obj::RGB_dyn();
            		}
HXLINE(  29)		int fileHeaderLength = (int)14;
HXLINE(  30)		int infoHeaderLength = (int)40;
HXLINE(  31)		int pixelValuesLength = ((image->width * image->height) * (int)4);
HXLINE(  33)		if (hx::IsNotNull( type )) {
HXLINE(  33)			switch((int)(_hx_getEnumValueIndex(type))){
            				case (int)0: {
HXLINE(  43)					int pixelValuesLength1 = (image->width * (int)3);
HXDLIN(  43)					pixelValuesLength = ((pixelValuesLength1 + hx::Mod((image->width * (int)3),(int)4)) * image->height);
            				}
            				break;
            				case (int)1: {
HXLINE(  36)					infoHeaderLength = (int)108;
            				}
            				break;
            				case (int)2: {
HXLINE(  39)					fileHeaderLength = (int)0;
HXLINE(  40)					pixelValuesLength = (pixelValuesLength + (image->width * image->height));
            				}
            				break;
            			}
            		}
HXLINE(  48)		 ::haxe::io::Bytes data = ::haxe::io::Bytes_obj::alloc(((fileHeaderLength + infoHeaderLength) + pixelValuesLength));
HXLINE(  49)		int position = (int)0;
HXLINE(  51)		if ((fileHeaderLength > (int)0)) {
HXLINE(  53)			{
HXLINE(  53)				position = (position + (int)1);
HXDLIN(  53)				data->b[(position - (int)1)] = (int)66;
            			}
HXLINE(  54)			{
HXLINE(  54)				position = (position + (int)1);
HXDLIN(  54)				data->b[(position - (int)1)] = (int)77;
            			}
HXLINE(  55)			{
HXLINE(  55)				int v = data->length;
HXDLIN(  55)				::Array< unsigned char > data1 = data->b;
HXDLIN(  55)				data1[position] = ((int)v & (int)(int)255);
HXDLIN(  55)				::Array< unsigned char > data2 = data->b;
HXDLIN(  55)				data2[(position + (int)1)] = ((int)((int)v >> (int)(int)8) & (int)(int)255);
HXDLIN(  55)				::Array< unsigned char > data3 = data->b;
HXDLIN(  55)				data3[(position + (int)2)] = ((int)((int)v >> (int)(int)16) & (int)(int)255);
HXDLIN(  55)				::Array< unsigned char > data4 = data->b;
HXDLIN(  55)				data4[(position + (int)3)] = ((int)hx::UShr(v,(int)24) & (int)(int)255);
            			}
HXLINE(  56)			position = (position + (int)4);
HXLINE(  57)			{
HXLINE(  57)				data->b[position] = (int)0;
HXDLIN(  57)				::Array< unsigned char > data5 = data->b;
HXDLIN(  57)				data5[(position + (int)1)] = (int)0;
            			}
HXLINE(  58)			position = (position + (int)2);
HXLINE(  59)			{
HXLINE(  59)				data->b[position] = (int)0;
HXDLIN(  59)				::Array< unsigned char > data6 = data->b;
HXDLIN(  59)				data6[(position + (int)1)] = (int)0;
            			}
HXLINE(  60)			position = (position + (int)2);
HXLINE(  61)			{
HXLINE(  61)				int v1 = (fileHeaderLength + infoHeaderLength);
HXDLIN(  61)				::Array< unsigned char > data7 = data->b;
HXDLIN(  61)				data7[position] = ((int)v1 & (int)(int)255);
HXDLIN(  61)				::Array< unsigned char > data8 = data->b;
HXDLIN(  61)				data8[(position + (int)1)] = ((int)((int)v1 >> (int)(int)8) & (int)(int)255);
HXDLIN(  61)				::Array< unsigned char > data9 = data->b;
HXDLIN(  61)				data9[(position + (int)2)] = ((int)((int)v1 >> (int)(int)16) & (int)(int)255);
HXDLIN(  61)				::Array< unsigned char > data10 = data->b;
HXDLIN(  61)				data10[(position + (int)3)] = ((int)hx::UShr(v1,(int)24) & (int)(int)255);
            			}
HXLINE(  62)			position = (position + (int)4);
            		}
HXLINE(  65)		{
HXLINE(  65)			::Array< unsigned char > data11 = data->b;
HXDLIN(  65)			data11[position] = ((int)infoHeaderLength & (int)(int)255);
HXDLIN(  65)			::Array< unsigned char > data12 = data->b;
HXDLIN(  65)			data12[(position + (int)1)] = ((int)((int)infoHeaderLength >> (int)(int)8) & (int)(int)255);
HXDLIN(  65)			::Array< unsigned char > data13 = data->b;
HXDLIN(  65)			data13[(position + (int)2)] = ((int)((int)infoHeaderLength >> (int)(int)16) & (int)(int)255);
HXDLIN(  65)			::Array< unsigned char > data14 = data->b;
HXDLIN(  65)			data14[(position + (int)3)] = ((int)hx::UShr(infoHeaderLength,(int)24) & (int)(int)255);
            		}
HXLINE(  66)		position = (position + (int)4);
HXLINE(  67)		{
HXLINE(  67)			int v2 = image->width;
HXDLIN(  67)			::Array< unsigned char > data15 = data->b;
HXDLIN(  67)			data15[position] = ((int)v2 & (int)(int)255);
HXDLIN(  67)			::Array< unsigned char > data16 = data->b;
HXDLIN(  67)			data16[(position + (int)1)] = ((int)((int)v2 >> (int)(int)8) & (int)(int)255);
HXDLIN(  67)			::Array< unsigned char > data17 = data->b;
HXDLIN(  67)			data17[(position + (int)2)] = ((int)((int)v2 >> (int)(int)16) & (int)(int)255);
HXDLIN(  67)			::Array< unsigned char > data18 = data->b;
HXDLIN(  67)			data18[(position + (int)3)] = ((int)hx::UShr(v2,(int)24) & (int)(int)255);
            		}
HXLINE(  68)		position = (position + (int)4);
HXLINE(  69)		{
HXLINE(  69)			int v3;
HXDLIN(  69)			if (hx::IsEq( type,::lime::_internal::format::BMPType_obj::ICO_dyn() )) {
HXLINE(  69)				v3 = (image->height * (int)2);
            			}
            			else {
HXLINE(  69)				v3 = image->height;
            			}
HXDLIN(  69)			::Array< unsigned char > data19 = data->b;
HXDLIN(  69)			data19[position] = ((int)v3 & (int)(int)255);
HXDLIN(  69)			::Array< unsigned char > data20 = data->b;
HXDLIN(  69)			data20[(position + (int)1)] = ((int)((int)v3 >> (int)(int)8) & (int)(int)255);
HXDLIN(  69)			::Array< unsigned char > data21 = data->b;
HXDLIN(  69)			data21[(position + (int)2)] = ((int)((int)v3 >> (int)(int)16) & (int)(int)255);
HXDLIN(  69)			::Array< unsigned char > data22 = data->b;
HXDLIN(  69)			data22[(position + (int)3)] = ((int)hx::UShr(v3,(int)24) & (int)(int)255);
            		}
HXLINE(  70)		position = (position + (int)4);
HXLINE(  71)		{
HXLINE(  71)			data->b[position] = (int)1;
HXDLIN(  71)			::Array< unsigned char > data23 = data->b;
HXDLIN(  71)			data23[(position + (int)1)] = (int)0;
            		}
HXLINE(  72)		position = (position + (int)2);
HXLINE(  73)		{
HXLINE(  73)			int v4;
HXDLIN(  73)			if (hx::IsEq( type,::lime::_internal::format::BMPType_obj::RGB_dyn() )) {
HXLINE(  73)				v4 = (int)24;
            			}
            			else {
HXLINE(  73)				v4 = (int)32;
            			}
HXDLIN(  73)			data->b[position] = v4;
HXDLIN(  73)			::Array< unsigned char > data24 = data->b;
HXDLIN(  73)			data24[(position + (int)1)] = ((int)v4 >> (int)(int)8);
            		}
HXLINE(  74)		position = (position + (int)2);
HXLINE(  75)		{
HXLINE(  75)			int v5;
HXDLIN(  75)			if (hx::IsEq( type,::lime::_internal::format::BMPType_obj::BITFIELD_dyn() )) {
HXLINE(  75)				v5 = (int)3;
            			}
            			else {
HXLINE(  75)				v5 = (int)0;
            			}
HXDLIN(  75)			::Array< unsigned char > data25 = data->b;
HXDLIN(  75)			data25[position] = ((int)v5 & (int)(int)255);
HXDLIN(  75)			::Array< unsigned char > data26 = data->b;
HXDLIN(  75)			data26[(position + (int)1)] = ((int)((int)v5 >> (int)(int)8) & (int)(int)255);
HXDLIN(  75)			::Array< unsigned char > data27 = data->b;
HXDLIN(  75)			data27[(position + (int)2)] = ((int)((int)v5 >> (int)(int)16) & (int)(int)255);
HXDLIN(  75)			::Array< unsigned char > data28 = data->b;
HXDLIN(  75)			data28[(position + (int)3)] = ((int)hx::UShr(v5,(int)24) & (int)(int)255);
            		}
HXLINE(  76)		position = (position + (int)4);
HXLINE(  77)		{
HXLINE(  77)			::Array< unsigned char > data29 = data->b;
HXDLIN(  77)			data29[position] = ((int)pixelValuesLength & (int)(int)255);
HXDLIN(  77)			::Array< unsigned char > data30 = data->b;
HXDLIN(  77)			data30[(position + (int)1)] = ((int)((int)pixelValuesLength >> (int)(int)8) & (int)(int)255);
HXDLIN(  77)			::Array< unsigned char > data31 = data->b;
HXDLIN(  77)			data31[(position + (int)2)] = ((int)((int)pixelValuesLength >> (int)(int)16) & (int)(int)255);
HXDLIN(  77)			::Array< unsigned char > data32 = data->b;
HXDLIN(  77)			data32[(position + (int)3)] = ((int)hx::UShr(pixelValuesLength,(int)24) & (int)(int)255);
            		}
HXLINE(  78)		position = (position + (int)4);
HXLINE(  79)		{
HXLINE(  79)			data->b[position] = (int)48;
HXDLIN(  79)			::Array< unsigned char > data33 = data->b;
HXDLIN(  79)			data33[(position + (int)1)] = (int)46;
HXDLIN(  79)			::Array< unsigned char > data34 = data->b;
HXDLIN(  79)			data34[(position + (int)2)] = (int)0;
HXDLIN(  79)			::Array< unsigned char > data35 = data->b;
HXDLIN(  79)			data35[(position + (int)3)] = (int)0;
            		}
HXLINE(  80)		position = (position + (int)4);
HXLINE(  81)		{
HXLINE(  81)			data->b[position] = (int)48;
HXDLIN(  81)			::Array< unsigned char > data36 = data->b;
HXDLIN(  81)			data36[(position + (int)1)] = (int)46;
HXDLIN(  81)			::Array< unsigned char > data37 = data->b;
HXDLIN(  81)			data37[(position + (int)2)] = (int)0;
HXDLIN(  81)			::Array< unsigned char > data38 = data->b;
HXDLIN(  81)			data38[(position + (int)3)] = (int)0;
            		}
HXLINE(  82)		position = (position + (int)4);
HXLINE(  83)		{
HXLINE(  83)			data->b[position] = (int)0;
HXDLIN(  83)			::Array< unsigned char > data39 = data->b;
HXDLIN(  83)			data39[(position + (int)1)] = (int)0;
HXDLIN(  83)			::Array< unsigned char > data40 = data->b;
HXDLIN(  83)			data40[(position + (int)2)] = (int)0;
HXDLIN(  83)			::Array< unsigned char > data41 = data->b;
HXDLIN(  83)			data41[(position + (int)3)] = (int)0;
            		}
HXLINE(  84)		position = (position + (int)4);
HXLINE(  85)		{
HXLINE(  85)			data->b[position] = (int)0;
HXDLIN(  85)			::Array< unsigned char > data42 = data->b;
HXDLIN(  85)			data42[(position + (int)1)] = (int)0;
HXDLIN(  85)			::Array< unsigned char > data43 = data->b;
HXDLIN(  85)			data43[(position + (int)2)] = (int)0;
HXDLIN(  85)			::Array< unsigned char > data44 = data->b;
HXDLIN(  85)			data44[(position + (int)3)] = (int)0;
            		}
HXLINE(  86)		position = (position + (int)4);
HXLINE(  88)		if (hx::IsEq( type,::lime::_internal::format::BMPType_obj::BITFIELD_dyn() )) {
HXLINE(  90)			{
HXLINE(  90)				data->b[position] = (int)0;
HXDLIN(  90)				::Array< unsigned char > data45 = data->b;
HXDLIN(  90)				data45[(position + (int)1)] = (int)0;
HXDLIN(  90)				::Array< unsigned char > data46 = data->b;
HXDLIN(  90)				data46[(position + (int)2)] = (int)255;
HXDLIN(  90)				::Array< unsigned char > data47 = data->b;
HXDLIN(  90)				data47[(position + (int)3)] = (int)0;
            			}
HXLINE(  91)			position = (position + (int)4);
HXLINE(  92)			{
HXLINE(  92)				data->b[position] = (int)0;
HXDLIN(  92)				::Array< unsigned char > data48 = data->b;
HXDLIN(  92)				data48[(position + (int)1)] = (int)255;
HXDLIN(  92)				::Array< unsigned char > data49 = data->b;
HXDLIN(  92)				data49[(position + (int)2)] = (int)0;
HXDLIN(  92)				::Array< unsigned char > data50 = data->b;
HXDLIN(  92)				data50[(position + (int)3)] = (int)0;
            			}
HXLINE(  93)			position = (position + (int)4);
HXLINE(  94)			{
HXLINE(  94)				data->b[position] = (int)255;
HXDLIN(  94)				::Array< unsigned char > data51 = data->b;
HXDLIN(  94)				data51[(position + (int)1)] = (int)0;
HXDLIN(  94)				::Array< unsigned char > data52 = data->b;
HXDLIN(  94)				data52[(position + (int)2)] = (int)0;
HXDLIN(  94)				::Array< unsigned char > data53 = data->b;
HXDLIN(  94)				data53[(position + (int)3)] = (int)0;
            			}
HXLINE(  95)			position = (position + (int)4);
HXLINE(  96)			{
HXLINE(  96)				data->b[position] = (int)0;
HXDLIN(  96)				::Array< unsigned char > data54 = data->b;
HXDLIN(  96)				data54[(position + (int)1)] = (int)0;
HXDLIN(  96)				::Array< unsigned char > data55 = data->b;
HXDLIN(  96)				data55[(position + (int)2)] = (int)0;
HXDLIN(  96)				::Array< unsigned char > data56 = data->b;
HXDLIN(  96)				data56[(position + (int)3)] = (int)255;
            			}
HXLINE(  97)			position = (position + (int)4);
HXLINE(  99)			{
HXLINE(  99)				position = (position + (int)1);
HXDLIN(  99)				data->b[(position - (int)1)] = (int)32;
            			}
HXLINE( 100)			{
HXLINE( 100)				position = (position + (int)1);
HXDLIN( 100)				data->b[(position - (int)1)] = (int)110;
            			}
HXLINE( 101)			{
HXLINE( 101)				position = (position + (int)1);
HXDLIN( 101)				data->b[(position - (int)1)] = (int)105;
            			}
HXLINE( 102)			{
HXLINE( 102)				position = (position + (int)1);
HXDLIN( 102)				data->b[(position - (int)1)] = (int)87;
            			}
HXLINE( 104)			{
HXLINE( 104)				int _g = (int)0;
HXDLIN( 104)				while((_g < (int)48)){
HXLINE( 104)					_g = (_g + (int)1);
HXDLIN( 104)					int i = (_g - (int)1);
HXLINE( 106)					{
HXLINE( 106)						position = (position + (int)1);
HXDLIN( 106)						data->b[(position - (int)1)] = (int)0;
            					}
            				}
            			}
            		}
HXLINE( 110)		 ::haxe::io::Bytes pixels = image->getPixels( ::lime::math::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,image->width,image->height),(int)1);
HXLINE( 111)		int readPosition = (int)0;
HXLINE( 112)		int a;
HXDLIN( 112)		int r;
HXDLIN( 112)		int g;
HXDLIN( 112)		int b;
HXLINE( 114)		if (hx::IsNotNull( type )) {
HXLINE( 114)			switch((int)(_hx_getEnumValueIndex(type))){
            				case (int)0: {
HXLINE( 170)					int _g1 = (int)0;
HXDLIN( 170)					int _g2 = image->height;
HXDLIN( 170)					while((_g1 < _g2)){
HXLINE( 170)						_g1 = (_g1 + (int)1);
HXDLIN( 170)						int y = (_g1 - (int)1);
HXLINE( 172)						readPosition = ((((image->height - (int)1) - y) * (int)4) * image->width);
HXLINE( 174)						{
HXLINE( 174)							int _g3 = (int)0;
HXDLIN( 174)							int _g21 = image->width;
HXDLIN( 174)							while((_g3 < _g21)){
HXLINE( 174)								_g3 = (_g3 + (int)1);
HXDLIN( 174)								int x = (_g3 - (int)1);
HXLINE( 176)								readPosition = (readPosition + (int)1);
HXDLIN( 176)								a = pixels->b->__get((readPosition - (int)1));
HXLINE( 177)								readPosition = (readPosition + (int)1);
HXDLIN( 177)								r = pixels->b->__get((readPosition - (int)1));
HXLINE( 178)								readPosition = (readPosition + (int)1);
HXDLIN( 178)								g = pixels->b->__get((readPosition - (int)1));
HXLINE( 179)								readPosition = (readPosition + (int)1);
HXDLIN( 179)								b = pixels->b->__get((readPosition - (int)1));
HXLINE( 181)								{
HXLINE( 181)									position = (position + (int)1);
HXDLIN( 181)									data->b[(position - (int)1)] = b;
            								}
HXLINE( 182)								{
HXLINE( 182)									position = (position + (int)1);
HXDLIN( 182)									data->b[(position - (int)1)] = g;
            								}
HXLINE( 183)								{
HXLINE( 183)									position = (position + (int)1);
HXDLIN( 183)									data->b[(position - (int)1)] = r;
            								}
            							}
            						}
HXLINE( 186)						{
HXLINE( 186)							int _g31 = (int)0;
HXDLIN( 186)							int _g22 = hx::Mod((image->width * (int)3),(int)4);
HXDLIN( 186)							while((_g31 < _g22)){
HXLINE( 186)								_g31 = (_g31 + (int)1);
HXDLIN( 186)								int i1 = (_g31 - (int)1);
HXLINE( 188)								{
HXLINE( 188)									position = (position + (int)1);
HXDLIN( 188)									data->b[(position - (int)1)] = (int)0;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 117)					int _g11 = (int)0;
HXDLIN( 117)					int _g4 = image->height;
HXDLIN( 117)					while((_g11 < _g4)){
HXLINE( 117)						_g11 = (_g11 + (int)1);
HXDLIN( 117)						int y1 = (_g11 - (int)1);
HXLINE( 119)						readPosition = ((((image->height - (int)1) - y1) * (int)4) * image->width);
HXLINE( 121)						{
HXLINE( 121)							int _g32 = (int)0;
HXDLIN( 121)							int _g23 = image->width;
HXDLIN( 121)							while((_g32 < _g23)){
HXLINE( 121)								_g32 = (_g32 + (int)1);
HXDLIN( 121)								int x1 = (_g32 - (int)1);
HXLINE( 123)								readPosition = (readPosition + (int)1);
HXDLIN( 123)								a = pixels->b->__get((readPosition - (int)1));
HXLINE( 124)								readPosition = (readPosition + (int)1);
HXDLIN( 124)								r = pixels->b->__get((readPosition - (int)1));
HXLINE( 125)								readPosition = (readPosition + (int)1);
HXDLIN( 125)								g = pixels->b->__get((readPosition - (int)1));
HXLINE( 126)								readPosition = (readPosition + (int)1);
HXDLIN( 126)								b = pixels->b->__get((readPosition - (int)1));
HXLINE( 128)								{
HXLINE( 128)									position = (position + (int)1);
HXDLIN( 128)									data->b[(position - (int)1)] = b;
            								}
HXLINE( 129)								{
HXLINE( 129)									position = (position + (int)1);
HXDLIN( 129)									data->b[(position - (int)1)] = g;
            								}
HXLINE( 130)								{
HXLINE( 130)									position = (position + (int)1);
HXDLIN( 130)									data->b[(position - (int)1)] = r;
            								}
HXLINE( 131)								{
HXLINE( 131)									position = (position + (int)1);
HXDLIN( 131)									data->b[(position - (int)1)] = a;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 136)					 ::haxe::io::Bytes andMask = ::haxe::io::Bytes_obj::alloc((image->width * image->height));
HXLINE( 137)					int maskPosition = (int)0;
HXLINE( 139)					{
HXLINE( 139)						int _g12 = (int)0;
HXDLIN( 139)						int _g5 = image->height;
HXDLIN( 139)						while((_g12 < _g5)){
HXLINE( 139)							_g12 = (_g12 + (int)1);
HXDLIN( 139)							int y2 = (_g12 - (int)1);
HXLINE( 141)							readPosition = ((((image->height - (int)1) - y2) * (int)4) * image->width);
HXLINE( 143)							{
HXLINE( 143)								int _g33 = (int)0;
HXDLIN( 143)								int _g24 = image->width;
HXDLIN( 143)								while((_g33 < _g24)){
HXLINE( 143)									_g33 = (_g33 + (int)1);
HXDLIN( 143)									int x2 = (_g33 - (int)1);
HXLINE( 145)									readPosition = (readPosition + (int)1);
HXDLIN( 145)									a = pixels->b->__get((readPosition - (int)1));
HXLINE( 146)									readPosition = (readPosition + (int)1);
HXDLIN( 146)									r = pixels->b->__get((readPosition - (int)1));
HXLINE( 147)									readPosition = (readPosition + (int)1);
HXDLIN( 147)									g = pixels->b->__get((readPosition - (int)1));
HXLINE( 148)									readPosition = (readPosition + (int)1);
HXDLIN( 148)									b = pixels->b->__get((readPosition - (int)1));
HXLINE( 150)									{
HXLINE( 150)										position = (position + (int)1);
HXDLIN( 150)										data->b[(position - (int)1)] = b;
            									}
HXLINE( 151)									{
HXLINE( 151)										position = (position + (int)1);
HXDLIN( 151)										data->b[(position - (int)1)] = g;
            									}
HXLINE( 152)									{
HXLINE( 152)										position = (position + (int)1);
HXDLIN( 152)										data->b[(position - (int)1)] = r;
            									}
HXLINE( 153)									{
HXLINE( 153)										position = (position + (int)1);
HXDLIN( 153)										data->b[(position - (int)1)] = a;
            									}
HXLINE( 161)									{
HXLINE( 161)										maskPosition = (maskPosition + (int)1);
HXDLIN( 161)										andMask->b[(maskPosition - (int)1)] = (int)0;
            									}
            								}
            							}
            						}
            					}
HXLINE( 167)					data->blit(position,andMask,(int)0,(image->width * image->height));
            				}
            				break;
            			}
            		}
HXLINE( 195)		return data;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BMP_obj,encode,return )


BMP_obj::BMP_obj()
{
}

bool BMP_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"encode") ) { outValue = encode_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BMP_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BMP_obj_sStaticStorageInfo = 0;
#endif

static void BMP_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BMP_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BMP_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BMP_obj::__mClass,"__mClass");
};

#endif

hx::Class BMP_obj::__mClass;

static ::String BMP_obj_sStaticFields[] = {
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	::String(null())
};

void BMP_obj::__register()
{
	hx::Object *dummy = new BMP_obj;
	BMP_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._internal.format.BMP","\xf9","\xa1","\xcc","\x12");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BMP_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BMP_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BMP_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< BMP_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BMP_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BMP_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BMP_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _internal
} // end namespace format
