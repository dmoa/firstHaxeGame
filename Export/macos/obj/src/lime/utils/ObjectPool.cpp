// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool
#include <lime/utils/ObjectPool.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_22_new,"lime.utils.ObjectPool","new",0x6a851d63,"lime.utils.ObjectPool.new","lime/utils/ObjectPool.hx",22,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_48_add,"lime.utils.ObjectPool","add",0x6a7b3f24,"lime.utils.ObjectPool.add","lime/utils/ObjectPool.hx",48,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_56___default_clean,"lime.utils.ObjectPool","__default_clean",0xb88b96ae,"lime.utils.ObjectPool.__default_clean","lime/utils/ObjectPool.hx",56,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_59_clear,"lime.utils.ObjectPool","clear",0x9b3c4550,"lime.utils.ObjectPool.clear","lime/utils/ObjectPool.hx",59,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_72___default_create,"lime.utils.ObjectPool","__default_create",0x35ffc237,"lime.utils.ObjectPool.__default_create","lime/utils/ObjectPool.hx",72,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_76_get,"lime.utils.ObjectPool","get",0x6a7fcd99,"lime.utils.ObjectPool.get","lime/utils/ObjectPool.hx",76,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_98_release,"lime.utils.ObjectPool","release",0xc47d104a,"lime.utils.ObjectPool.release","lime/utils/ObjectPool.hx",98,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_124___addInactive,"lime.utils.ObjectPool","__addInactive",0xbe535e4f,"lime.utils.ObjectPool.__addInactive","lime/utils/ObjectPool.hx",124,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_146___getInactive,"lime.utils.ObjectPool","__getInactive",0xb2eae9c4,"lime.utils.ObjectPool.__getInactive","lime/utils/ObjectPool.hx",146,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_185___removeInactive,"lime.utils.ObjectPool","__removeInactive",0x1e106c0c,"lime.utils.ObjectPool.__removeInactive","lime/utils/ObjectPool.hx",185,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_222_get_size,"lime.utils.ObjectPool","get_size",0x7e180467,"lime.utils.ObjectPool.get_size","lime/utils/ObjectPool.hx",222,0xc114d76b)
HX_LOCAL_STACK_FRAME(_hx_pos_06bcacad9f56fcf1_226_set_size,"lime.utils.ObjectPool","set_size",0x2c755ddb,"lime.utils.ObjectPool.set_size","lime/utils/ObjectPool.hx",226,0xc114d76b)
namespace lime{
namespace utils{

void ObjectPool_obj::__construct( ::Dynamic create, ::Dynamic clean, ::Dynamic size){
            	HX_GC_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_22_new)
HXLINE(  23)		this->_hx___pool =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  25)		this->activeObjects = (int)0;
HXLINE(  26)		this->inactiveObjects = (int)0;
HXLINE(  28)		this->_hx___inactiveObject0 = null();
HXLINE(  29)		this->_hx___inactiveObject1 = null();
HXLINE(  30)		this->_hx___inactiveObjectList =  ::List_obj::__alloc( HX_CTX );
HXLINE(  32)		if (hx::IsNotNull( create )) {
HXLINE(  34)			this->create = create;
            		}
HXLINE(  36)		if (hx::IsNotNull( clean )) {
HXLINE(  38)			this->clean = clean;
            		}
HXLINE(  40)		if (hx::IsNotNull( size )) {
HXLINE(  42)			this->set_size(size);
            		}
            	}

Dynamic ObjectPool_obj::__CreateEmpty() { return new ObjectPool_obj; }

void *ObjectPool_obj::_hx_vtable = 0;

Dynamic ObjectPool_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ObjectPool_obj > _hx_result = new ObjectPool_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ObjectPool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7cea4d17;
}

void ObjectPool_obj::add( ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_48_add)
HXDLIN(  48)		if (!(::haxe::IMap_obj::exists(this->_hx___pool,object))) {
HXLINE(  50)			::haxe::IMap_obj::set(this->_hx___pool,object,false);
HXLINE(  51)			this->clean(object);
HXLINE(  52)			{
HXLINE(  52)				if (hx::IsNull( this->_hx___inactiveObject0 )) {
HXLINE(  52)					this->_hx___inactiveObject0 = object;
            				}
            				else {
HXLINE(  52)					if (hx::IsNull( this->_hx___inactiveObject1 )) {
HXLINE(  52)						this->_hx___inactiveObject1 = object;
            					}
            					else {
HXLINE(  52)						this->_hx___inactiveObjectList->add(object);
            					}
            				}
HXDLIN(  52)				this->inactiveObjects++;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ObjectPool_obj,add,(void))

HX_BEGIN_DEFAULT_FUNC(__default_clean,ObjectPool_obj)
void _hx_run( ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_56___default_clean)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

void ObjectPool_obj::clear(){
            	HX_GC_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_59_clear)
HXLINE(  60)		this->_hx___pool =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  62)		this->activeObjects = (int)0;
HXLINE(  63)		this->inactiveObjects = (int)0;
HXLINE(  65)		this->_hx___inactiveObject0 = null();
HXLINE(  66)		this->_hx___inactiveObject1 = null();
HXLINE(  67)		this->_hx___inactiveObjectList->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectPool_obj,clear,(void))

HX_BEGIN_DEFAULT_FUNC(__default_create,ObjectPool_obj)
 ::Dynamic _hx_run(){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_72___default_create)
HXDLIN(  72)		return null();
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

 ::Dynamic ObjectPool_obj::get(){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_76_get)
HXLINE(  77)		 ::Dynamic object = null();
HXLINE(  79)		if ((this->inactiveObjects > (int)0)) {
HXLINE(  81)			 ::Dynamic object1 = null();
HXDLIN(  81)			if (hx::IsNotNull( this->_hx___inactiveObject0 )) {
HXLINE(  81)				object1 = this->_hx___inactiveObject0;
HXDLIN(  81)				this->_hx___inactiveObject0 = null();
            			}
            			else {
HXLINE(  81)				if (hx::IsNotNull( this->_hx___inactiveObject1 )) {
HXLINE(  81)					object1 = this->_hx___inactiveObject1;
HXDLIN(  81)					this->_hx___inactiveObject1 = null();
            				}
            				else {
HXLINE(  81)					object1 = this->_hx___inactiveObjectList->pop();
HXDLIN(  81)					if ((this->_hx___inactiveObjectList->length > (int)0)) {
HXLINE(  81)						this->_hx___inactiveObject0 = this->_hx___inactiveObjectList->pop();
            					}
HXDLIN(  81)					if ((this->_hx___inactiveObjectList->length > (int)0)) {
HXLINE(  81)						this->_hx___inactiveObject1 = this->_hx___inactiveObjectList->pop();
            					}
            				}
            			}
HXDLIN(  81)			this->inactiveObjects--;
HXDLIN(  81)			this->activeObjects++;
HXDLIN(  81)			object = object1;
            		}
            		else {
HXLINE(  83)			bool _hx_tmp;
HXDLIN(  83)			if (hx::IsNotNull( this->_hx___size )) {
HXLINE(  83)				_hx_tmp = hx::IsLess( this->activeObjects,this->_hx___size );
            			}
            			else {
HXLINE(  83)				_hx_tmp = true;
            			}
HXDLIN(  83)			if (_hx_tmp) {
HXLINE(  85)				object = this->create();
HXLINE(  87)				if (hx::IsNotNull( object )) {
HXLINE(  89)					::haxe::IMap_obj::set(this->_hx___pool,object,true);
HXLINE(  90)					this->activeObjects++;
            				}
            			}
            		}
HXLINE(  94)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectPool_obj,get,return )

void ObjectPool_obj::release( ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_98_release)
HXLINE( 110)		this->activeObjects--;
HXLINE( 112)		bool _hx_tmp;
HXDLIN( 112)		if (hx::IsNotNull( this->_hx___size )) {
HXLINE( 112)			_hx_tmp = hx::IsLess( (this->activeObjects + this->inactiveObjects),this->_hx___size );
            		}
            		else {
HXLINE( 112)			_hx_tmp = true;
            		}
HXDLIN( 112)		if (_hx_tmp) {
HXLINE( 114)			this->clean(object);
HXLINE( 115)			{
HXLINE( 115)				if (hx::IsNull( this->_hx___inactiveObject0 )) {
HXLINE( 115)					this->_hx___inactiveObject0 = object;
            				}
            				else {
HXLINE( 115)					if (hx::IsNull( this->_hx___inactiveObject1 )) {
HXLINE( 115)						this->_hx___inactiveObject1 = object;
            					}
            					else {
HXLINE( 115)						this->_hx___inactiveObjectList->add(object);
            					}
            				}
HXDLIN( 115)				this->inactiveObjects++;
            			}
            		}
            		else {
HXLINE( 119)			::haxe::IMap_obj::remove(this->_hx___pool,object);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ObjectPool_obj,release,(void))

void ObjectPool_obj::_hx___addInactive( ::Dynamic object){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_124___addInactive)
HXLINE( 129)		if (hx::IsNull( this->_hx___inactiveObject0 )) {
HXLINE( 131)			this->_hx___inactiveObject0 = object;
            		}
            		else {
HXLINE( 133)			if (hx::IsNull( this->_hx___inactiveObject1 )) {
HXLINE( 135)				this->_hx___inactiveObject1 = object;
            			}
            			else {
HXLINE( 139)				this->_hx___inactiveObjectList->add(object);
            			}
            		}
HXLINE( 142)		this->inactiveObjects++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ObjectPool_obj,_hx___addInactive,(void))

 ::Dynamic ObjectPool_obj::_hx___getInactive(){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_146___getInactive)
HXLINE( 147)		 ::Dynamic object = null();
HXLINE( 149)		if (hx::IsNotNull( this->_hx___inactiveObject0 )) {
HXLINE( 151)			object = this->_hx___inactiveObject0;
HXLINE( 152)			this->_hx___inactiveObject0 = null();
            		}
            		else {
HXLINE( 154)			if (hx::IsNotNull( this->_hx___inactiveObject1 )) {
HXLINE( 156)				object = this->_hx___inactiveObject1;
HXLINE( 157)				this->_hx___inactiveObject1 = null();
            			}
            			else {
HXLINE( 161)				object = this->_hx___inactiveObjectList->pop();
HXLINE( 163)				if ((this->_hx___inactiveObjectList->length > (int)0)) {
HXLINE( 165)					this->_hx___inactiveObject0 = this->_hx___inactiveObjectList->pop();
            				}
HXLINE( 168)				if ((this->_hx___inactiveObjectList->length > (int)0)) {
HXLINE( 170)					this->_hx___inactiveObject1 = this->_hx___inactiveObjectList->pop();
            				}
            			}
            		}
HXLINE( 178)		this->inactiveObjects--;
HXLINE( 179)		this->activeObjects++;
HXLINE( 181)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectPool_obj,_hx___getInactive,return )

void ObjectPool_obj::_hx___removeInactive(int count){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_185___removeInactive)
HXLINE( 186)		bool _hx_tmp;
HXDLIN( 186)		if ((count > (int)0)) {
HXLINE( 186)			_hx_tmp = (this->inactiveObjects == (int)0);
            		}
            		else {
HXLINE( 186)			_hx_tmp = true;
            		}
HXDLIN( 186)		if (_hx_tmp) {
HXLINE( 186)			return;
            		}
HXLINE( 188)		if (hx::IsNotNull( this->_hx___inactiveObject0 )) {
HXLINE( 190)			::haxe::IMap_obj::remove(this->_hx___pool,this->_hx___inactiveObject0);
HXLINE( 191)			this->_hx___inactiveObject0 = null();
HXLINE( 192)			this->inactiveObjects--;
HXLINE( 193)			count = (count - (int)1);
            		}
HXLINE( 196)		bool _hx_tmp1;
HXDLIN( 196)		if ((count != (int)0)) {
HXLINE( 196)			_hx_tmp1 = (this->inactiveObjects == (int)0);
            		}
            		else {
HXLINE( 196)			_hx_tmp1 = true;
            		}
HXDLIN( 196)		if (_hx_tmp1) {
HXLINE( 196)			return;
            		}
HXLINE( 198)		if (hx::IsNotNull( this->_hx___inactiveObject1 )) {
HXLINE( 200)			::haxe::IMap_obj::remove(this->_hx___pool,this->_hx___inactiveObject1);
HXLINE( 201)			this->_hx___inactiveObject1 = null();
HXLINE( 202)			this->inactiveObjects--;
HXLINE( 203)			count = (count - (int)1);
            		}
HXLINE( 206)		bool _hx_tmp2;
HXDLIN( 206)		if ((count != (int)0)) {
HXLINE( 206)			_hx_tmp2 = (this->inactiveObjects == (int)0);
            		}
            		else {
HXLINE( 206)			_hx_tmp2 = true;
            		}
HXDLIN( 206)		if (_hx_tmp2) {
HXLINE( 206)			return;
            		}
HXLINE( 208)		{
HXLINE( 208)			 ::_List::ListNode _g_head = this->_hx___inactiveObjectList->h;
HXDLIN( 208)			while(hx::IsNotNull( _g_head )){
HXLINE( 208)				 ::Dynamic val = _g_head->item;
HXDLIN( 208)				_g_head = _g_head->next;
HXDLIN( 208)				 ::Dynamic object = val;
HXLINE( 210)				::haxe::IMap_obj::remove(this->_hx___pool,object);
HXLINE( 211)				this->_hx___inactiveObjectList->remove(object);
HXLINE( 212)				this->inactiveObjects--;
HXLINE( 213)				count = (count - (int)1);
HXLINE( 215)				bool _hx_tmp3;
HXDLIN( 215)				if ((count != (int)0)) {
HXLINE( 215)					_hx_tmp3 = (this->inactiveObjects == (int)0);
            				}
            				else {
HXLINE( 215)					_hx_tmp3 = true;
            				}
HXDLIN( 215)				if (_hx_tmp3) {
HXLINE( 215)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ObjectPool_obj,_hx___removeInactive,(void))

 ::Dynamic ObjectPool_obj::get_size(){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_222_get_size)
HXDLIN( 222)		return this->_hx___size;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectPool_obj,get_size,return )

 ::Dynamic ObjectPool_obj::set_size( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_06bcacad9f56fcf1_226_set_size)
HXLINE( 227)		if (hx::IsNull( value )) {
HXLINE( 229)			this->_hx___size = null();
            		}
            		else {
HXLINE( 233)			int current = (this->inactiveObjects + this->activeObjects);
HXLINE( 234)			this->_hx___size = value;
HXLINE( 236)			if (hx::IsGreater( current,value )) {
HXLINE( 238)				this->_hx___removeInactive((current - value));
            			}
            			else {
HXLINE( 240)				if (hx::IsGreater( value,current )) {
HXLINE( 242)					 ::Dynamic object;
HXLINE( 244)					{
HXLINE( 244)						int _g1 = (int)0;
HXDLIN( 244)						int _g = (value - current);
HXDLIN( 244)						while((_g1 < _g)){
HXLINE( 244)							_g1 = (_g1 + (int)1);
HXDLIN( 244)							int i = (_g1 - (int)1);
HXLINE( 246)							object = this->create();
HXLINE( 248)							if (hx::IsNotNull( object )) {
HXLINE( 250)								::haxe::IMap_obj::set(this->_hx___pool,object,false);
HXLINE( 251)								this->_hx___inactiveObjectList->add(object);
HXLINE( 252)								this->inactiveObjects++;
            							}
            							else {
HXLINE( 256)								goto _hx_goto_12;
            							}
            						}
            						_hx_goto_12:;
            					}
            				}
            			}
            		}
HXLINE( 262)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ObjectPool_obj,set_size,return )


void ObjectPool_obj::__alloc_dynamic_functions(hx::Ctx *_hx_ctx,ObjectPool_obj *_hx_obj) {
	if (!_hx_obj->create.mPtr) _hx_obj->create = new __default_create(_hx_obj);
	if (!_hx_obj->clean.mPtr) _hx_obj->clean = new __default_clean(_hx_obj);
}
hx::ObjectPtr< ObjectPool_obj > ObjectPool_obj::__new( ::Dynamic create, ::Dynamic clean, ::Dynamic size) {
	hx::ObjectPtr< ObjectPool_obj > __this = new ObjectPool_obj();
	__this->__construct(create,clean,size);
	return __this;
}

hx::ObjectPtr< ObjectPool_obj > ObjectPool_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic create, ::Dynamic clean, ::Dynamic size) {
	ObjectPool_obj *__this = (ObjectPool_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ObjectPool_obj), true, "lime.utils.ObjectPool"));
	*(void **)__this = ObjectPool_obj::_hx_vtable;
	lime::utils::ObjectPool_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(create,clean,size);
	return __this;
}

ObjectPool_obj::ObjectPool_obj()
{
	create = new __default_create(this);
	clean = new __default_clean(this);
}

void ObjectPool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectPool);
	HX_MARK_MEMBER_NAME(activeObjects,"activeObjects");
	HX_MARK_MEMBER_NAME(inactiveObjects,"inactiveObjects");
	HX_MARK_MEMBER_NAME(_hx___inactiveObject0,"__inactiveObject0");
	HX_MARK_MEMBER_NAME(_hx___inactiveObject1,"__inactiveObject1");
	HX_MARK_MEMBER_NAME(_hx___inactiveObjectList,"__inactiveObjectList");
	HX_MARK_MEMBER_NAME(_hx___pool,"__pool");
	HX_MARK_MEMBER_NAME(_hx___size,"__size");
	HX_MARK_MEMBER_NAME(clean,"clean");
	HX_MARK_MEMBER_NAME(create,"create");
	HX_MARK_END_CLASS();
}

void ObjectPool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(activeObjects,"activeObjects");
	HX_VISIT_MEMBER_NAME(inactiveObjects,"inactiveObjects");
	HX_VISIT_MEMBER_NAME(_hx___inactiveObject0,"__inactiveObject0");
	HX_VISIT_MEMBER_NAME(_hx___inactiveObject1,"__inactiveObject1");
	HX_VISIT_MEMBER_NAME(_hx___inactiveObjectList,"__inactiveObjectList");
	HX_VISIT_MEMBER_NAME(_hx___pool,"__pool");
	HX_VISIT_MEMBER_NAME(_hx___size,"__size");
	HX_VISIT_MEMBER_NAME(clean,"clean");
	HX_VISIT_MEMBER_NAME(create,"create");
}

hx::Val ObjectPool_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_size() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clean") ) { return hx::Val( clean ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { return hx::Val( _hx___pool ); }
		if (HX_FIELD_EQ(inName,"__size") ) { return hx::Val( _hx___size ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"release") ) { return hx::Val( release_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"activeObjects") ) { return hx::Val( activeObjects ); }
		if (HX_FIELD_EQ(inName,"__addInactive") ) { return hx::Val( _hx___addInactive_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getInactive") ) { return hx::Val( _hx___getInactive_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"inactiveObjects") ) { return hx::Val( inactiveObjects ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__removeInactive") ) { return hx::Val( _hx___removeInactive_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__inactiveObject0") ) { return hx::Val( _hx___inactiveObject0 ); }
		if (HX_FIELD_EQ(inName,"__inactiveObject1") ) { return hx::Val( _hx___inactiveObject1 ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__inactiveObjectList") ) { return hx::Val( _hx___inactiveObjectList ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ObjectPool_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue.Cast<  ::Dynamic >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clean") ) { clean=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__pool") ) { _hx___pool=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__size") ) { _hx___size=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"create") ) { create=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"activeObjects") ) { activeObjects=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"inactiveObjects") ) { inactiveObjects=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__inactiveObject0") ) { _hx___inactiveObject0=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__inactiveObject1") ) { _hx___inactiveObject1=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__inactiveObjectList") ) { _hx___inactiveObjectList=inValue.Cast<  ::List >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectPool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("activeObjects","\xae","\xb3","\x18","\x3a"));
	outFields->push(HX_HCSTRING("inactiveObjects","\xa9","\x0c","\xc7","\xfb"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("__inactiveObject0","\x46","\x3d","\x21","\x7f"));
	outFields->push(HX_HCSTRING("__inactiveObject1","\x47","\x3d","\x21","\x7f"));
	outFields->push(HX_HCSTRING("__inactiveObjectList","\x28","\xdd","\x99","\x7e"));
	outFields->push(HX_HCSTRING("__pool","\xfc","\xe3","\x54","\xf9"));
	outFields->push(HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ObjectPool_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ObjectPool_obj,activeObjects),HX_HCSTRING("activeObjects","\xae","\xb3","\x18","\x3a")},
	{hx::fsInt,(int)offsetof(ObjectPool_obj,inactiveObjects),HX_HCSTRING("inactiveObjects","\xa9","\x0c","\xc7","\xfb")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ObjectPool_obj,_hx___inactiveObject0),HX_HCSTRING("__inactiveObject0","\x46","\x3d","\x21","\x7f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ObjectPool_obj,_hx___inactiveObject1),HX_HCSTRING("__inactiveObject1","\x47","\x3d","\x21","\x7f")},
	{hx::fsObject /*::List*/ ,(int)offsetof(ObjectPool_obj,_hx___inactiveObjectList),HX_HCSTRING("__inactiveObjectList","\x28","\xdd","\x99","\x7e")},
	{hx::fsObject /*::haxe::IMap*/ ,(int)offsetof(ObjectPool_obj,_hx___pool),HX_HCSTRING("__pool","\xfc","\xe3","\x54","\xf9")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ObjectPool_obj,_hx___size),HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ObjectPool_obj,clean),HX_HCSTRING("clean","\x89","\x71","\x5b","\x48")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ObjectPool_obj,create),HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ObjectPool_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectPool_obj_sMemberFields[] = {
	HX_HCSTRING("activeObjects","\xae","\xb3","\x18","\x3a"),
	HX_HCSTRING("inactiveObjects","\xa9","\x0c","\xc7","\xfb"),
	HX_HCSTRING("__inactiveObject0","\x46","\x3d","\x21","\x7f"),
	HX_HCSTRING("__inactiveObject1","\x47","\x3d","\x21","\x7f"),
	HX_HCSTRING("__inactiveObjectList","\x28","\xdd","\x99","\x7e"),
	HX_HCSTRING("__pool","\xfc","\xe3","\x54","\xf9"),
	HX_HCSTRING("__size","\xe1","\x03","\x4c","\xfb"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("clean","\x89","\x71","\x5b","\x48"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("release","\xc7","\x85","\xed","\x58"),
	HX_HCSTRING("__addInactive","\x8c","\x8f","\x04","\xe4"),
	HX_HCSTRING("__getInactive","\x01","\x1b","\x9c","\xd8"),
	HX_HCSTRING("__removeInactive","\xef","\xde","\xc5","\x68"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	::String(null()) };

static void ObjectPool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ObjectPool_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ObjectPool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ObjectPool_obj::__mClass,"__mClass");
};

#endif

hx::Class ObjectPool_obj::__mClass;

void ObjectPool_obj::__register()
{
	hx::Object *dummy = new ObjectPool_obj;
	ObjectPool_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.utils.ObjectPool","\xf1","\x2f","\xf4","\x28");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ObjectPool_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ObjectPool_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ObjectPool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ObjectPool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectPool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectPool_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace utils
